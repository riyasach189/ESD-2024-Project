
stm32-input-pulse-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e20  08003e20  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e20  08003e20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08003e90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08003e90  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9b0  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002229  00000000  00000000  0002fa83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00031cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b04  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ebe  00000000  00000000  000335bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114b4  00000000  00000000  0004a47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090374  00000000  00000000  0005b92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039e0  00000000  00000000  000ebca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000ef684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003d48 	.word	0x08003d48

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08003d48 	.word	0x08003d48

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write (int file, char *ptr, int len)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	b29a      	uxth	r2, r3
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <_write+0x28>)
 8000418:	f001 ff96 	bl	8002348 <HAL_UART_Transmit>
	return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b004      	add	sp, #16
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	200000d0 	.word	0x200000d0

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fb16 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f824 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 f918 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800043c:	f000 f8c8 	bl	80005d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000440:	f000 f866 	bl	8000510 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <main+0x48>)
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fc92 	bl	8001d70 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pulseCount = __HAL_TIM_GET_COUNTER(&htim3);
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <main+0x48>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <main+0x4c>)
 8000456:	801a      	strh	r2, [r3, #0]
	  printf("%d", pulseCount);
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <main+0x4c>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	001a      	movs	r2, r3
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <main+0x50>)
 8000460:	0011      	movs	r1, r2
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fdca 	bl	8002ffc <iprintf>
	  HAL_Delay(1000);
 8000468:	23fa      	movs	r3, #250	; 0xfa
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fb7d 	bl	8000b6c <HAL_Delay>
	  pulseCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000472:	e7eb      	b.n	800044c <main+0x20>
 8000474:	20000084 	.word	0x20000084
 8000478:	20000164 	.word	0x20000164
 800047c:	08003d60 	.word	0x08003d60

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b093      	sub	sp, #76	; 0x4c
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	2414      	movs	r4, #20
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2334      	movs	r3, #52	; 0x34
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f002 fe0f 	bl	80030b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f002 fe08 	bl	80030b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fdcf 	bl	800104c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2240      	movs	r2, #64	; 0x40
 80004c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fe07 	bl	80010e4 <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004da:	f000 f923 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 f902 	bl	8001704 <HAL_RCC_ClockConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000504:	f000 f90e 	bl	8000724 <Error_Handler>
  }
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b013      	add	sp, #76	; 0x4c
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000516:	230c      	movs	r3, #12
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 fdc7 	bl	80030b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	230c      	movs	r3, #12
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f002 fdc0 	bl	80030b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <MX_TIM3_Init+0xb4>)
 8000536:	4a24      	ldr	r2, [pc, #144]	; (80005c8 <MX_TIM3_Init+0xb8>)
 8000538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_TIM3_Init+0xb4>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_TIM3_Init+0xb4>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_TIM3_Init+0xb4>)
 8000548:	4a20      	ldr	r2, [pc, #128]	; (80005cc <MX_TIM3_Init+0xbc>)
 800054a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_TIM3_Init+0xb4>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_TIM3_Init+0xb4>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MX_TIM3_Init+0xb4>)
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fbb0 	bl	8001cc0 <HAL_TIM_Base_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f8de 	bl	8000724 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000568:	210c      	movs	r1, #12
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2270      	movs	r2, #112	; 0x70
 8000574:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000588:	187a      	adds	r2, r7, r1
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_TIM3_Init+0xb4>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fc3c 	bl	8001e0c <HAL_TIM_SlaveConfigSynchro>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000598:	f000 f8c4 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a8:	003a      	movs	r2, r7
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_TIM3_Init+0xb4>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fe0c 	bl	80021cc <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80005b8:	f000 f8b4 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b008      	add	sp, #32
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000084 	.word	0x20000084
 80005c8:	40000400 	.word	0x40000400
 80005cc:	0000ffff 	.word	0x0000ffff

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <MX_USART2_UART_Init+0x98>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005dc:	22e1      	movs	r2, #225	; 0xe1
 80005de:	0252      	lsls	r2, r2, #9
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0552      	lsls	r2, r2, #21
 80005e8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_USART2_UART_Init+0x94>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_USART2_UART_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_USART2_UART_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_USART2_UART_Init+0x94>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_USART2_UART_Init+0x94>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x94>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fe3d 	bl	800229c <HAL_UART_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000626:	f000 f87d 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x94>)
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fb40 	bl	8002cb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000638:	f000 f874 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x94>)
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fb77 	bl	8002d34 <HAL_UARTEx_SetRxFifoThreshold>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800064a:	f000 f86b 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x94>)
 8000650:	0018      	movs	r0, r3
 8000652:	f002 faf5 	bl	8002c40 <HAL_UARTEx_DisableFifoMode>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800065a:	f000 f863 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000d0 	.word	0x200000d0
 8000668:	40004400 	.word	0x40004400

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b08b      	sub	sp, #44	; 0x2c
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	2414      	movs	r4, #20
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2314      	movs	r3, #20
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f002 fd19 	bl	80030b4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000688:	2104      	movs	r1, #4
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000692:	2204      	movs	r2, #4
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_GPIO_Init+0xb4>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006a0:	2120      	movs	r1, #32
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	2220      	movs	r2, #32
 80006ac:	4013      	ands	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2201      	movs	r2, #1
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006d0:	2108      	movs	r1, #8
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	2208      	movs	r2, #8
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fc90 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006f0:	0021      	movs	r1, r4
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2220      	movs	r2, #32
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2202      	movs	r2, #2
 8000708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800070a:	187a      	adds	r2, r7, r1
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fb18 	bl	8000d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b00b      	add	sp, #44	; 0x2c
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_MspInit+0x4c>)
 8000738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_MspInit+0x4c>)
 8000750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_MspInit+0x4c>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_MspInit+0x4c>)
 800075e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800076a:	23c0      	movs	r3, #192	; 0xc0
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fa20 	bl	8000bb4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	2414      	movs	r4, #20
 800078a:	193b      	adds	r3, r7, r4
 800078c:	0018      	movs	r0, r3
 800078e:	2314      	movs	r3, #20
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f002 fc8e 	bl	80030b4 <memset>
  if(htim_base->Instance==TIM3)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <HAL_TIM_Base_MspInit+0x88>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d12d      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007a8:	2102      	movs	r1, #2
 80007aa:	430a      	orrs	r2, r1
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b2:	2202      	movs	r2, #2
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007c0:	2108      	movs	r1, #8
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_TIM_Base_MspInit+0x8c>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2208      	movs	r2, #8
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2204      	movs	r2, #4
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2201      	movs	r2, #1
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_TIM_Base_MspInit+0x90>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f000 faa5 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b00b      	add	sp, #44	; 0x2c
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40000400 	.word	0x40000400
 800080c:	40021000 	.word	0x40021000
 8000810:	50000c00 	.word	0x50000c00

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b091      	sub	sp, #68	; 0x44
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	232c      	movs	r3, #44	; 0x2c
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f002 fc44 	bl	80030b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	2410      	movs	r4, #16
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	231c      	movs	r3, #28
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f002 fc3c 	bl	80030b4 <memset>
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_UART_MspInit+0xb8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d13e      	bne.n	80008c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2202      	movs	r2, #2
 800084a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	f001 f8ff 	bl	8001a58 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800085e:	f7ff ff61 	bl	8000724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 8000864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0289      	lsls	r1, r1, #10
 800086c:	430a      	orrs	r2, r1
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 8000872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	029b      	lsls	r3, r3, #10
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000896:	212c      	movs	r1, #44	; 0x2c
 8000898:	187b      	adds	r3, r7, r1
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2201      	movs	r2, #1
 80008a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2201      	movs	r2, #1
 80008b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	187a      	adds	r2, r7, r1
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fa42 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b011      	add	sp, #68	; 0x44
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f91c 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e00a      	b.n	800092a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000914:	e000      	b.n	8000918 <_read+0x16>
 8000916:	bf00      	nop
 8000918:	0001      	movs	r1, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	60ba      	str	r2, [r7, #8]
 8000920:	b2ca      	uxtb	r2, r1
 8000922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf0      	blt.n	8000914 <_read+0x12>
  }

  return len;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b006      	add	sp, #24
 800093a:	bd80      	pop	{r7, pc}

0800093c <_close>:
  }
  return len;
}

int _close(int file)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	0192      	lsls	r2, r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}

0800096c <_isatty>:

int _isatty(int file)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}

0800097e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fbcc 	bl	8003160 <__errno>
 80009c8:	0003      	movs	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	425b      	negs	r3, r3
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	18d2      	adds	r2, r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b006      	add	sp, #24
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20009000 	.word	0x20009000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000168 	.word	0x20000168
 80009fc:	200002c0 	.word	0x200002c0

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a10:	f7ff fff6 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f002 fb97 	bl	800316c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a3e:	f7ff fcf5 	bl	800042c <main>

08000a42 <LoopForever>:

LoopForever:
  b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a50:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 8000a54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a58:	200002bc 	.word	0x200002bc

08000a5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_Init+0x3c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Init+0x3c>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0049      	lsls	r1, r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f810 	bl	8000aa0 <HAL_InitTick>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe50 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d02b      	beq.n	8000b10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0x8c>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_InitTick+0x88>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	23fa      	movs	r3, #250	; 0xfa
 8000ac4:	0098      	lsls	r0, r3, #2
 8000ac6:	f7ff fb25 	bl	8000114 <__udivsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	0019      	movs	r1, r3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff fb20 	bl	8000114 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f929 	bl	8000d2e <HAL_SYSTICK_Config>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d112      	bne.n	8000b06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d80a      	bhi.n	8000afc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f908 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_InitTick+0x90>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e00d      	b.n	8000b18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e008      	b.n	8000b18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e003      	b.n	8000b18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b005      	add	sp, #20
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008
 8000b54:	2000016c 	.word	0x2000016c

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	2000016c 	.word	0x2000016c

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff fff0 	bl	8000b58 <HAL_GetTick>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	189b      	adds	r3, r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	f7ff ffe0 	bl	8000b58 <HAL_GetTick>
 8000b98:	0002      	movs	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	fffff9ff 	.word	0xfffff9ff

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	; 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	; 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	; 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	; 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d301      	bcc.n	8000cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <SysTick_Config+0x44>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff7c 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x44>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ffbf 	bl	8000cbc <SysTick_Config>
 8000d3e:	0003      	movs	r3, r0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	e147      	b.n	8000fe8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4091      	lsls	r1, r2
 8000d62:	000a      	movs	r2, r1
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <HAL_GPIO_Init+0x28>
 8000d6e:	e138      	b.n	8000fe2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d005      	beq.n	8000d88 <HAL_GPIO_Init+0x40>
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d130      	bne.n	8000dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d017      	beq.n	8000e26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d123      	bne.n	8000e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	58d3      	ldr	r3, [r2, r3]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2207      	movs	r2, #7
 8000e44:	4013      	ands	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2107      	movs	r1, #7
 8000e5e:	400b      	ands	r3, r1
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	6939      	ldr	r1, [r7, #16]
 8000e78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	401a      	ands	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	23c0      	movs	r3, #192	; 0xc0
 8000eb4:	029b      	lsls	r3, r3, #10
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d100      	bne.n	8000ebc <HAL_GPIO_Init+0x174>
 8000eba:	e092      	b.n	8000fe2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ebc:	4a50      	ldr	r2, [pc, #320]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3318      	adds	r3, #24
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	589b      	ldr	r3, [r3, r2]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	23a0      	movs	r3, #160	; 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x1ca>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a45      	ldr	r2, [pc, #276]	; (8001004 <HAL_GPIO_Init+0x2bc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x1c6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a44      	ldr	r2, [pc, #272]	; (8001008 <HAL_GPIO_Init+0x2c0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x1c2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a43      	ldr	r2, [pc, #268]	; (800100c <HAL_GPIO_Init+0x2c4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x1be>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x1cc>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x1cc>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x1cc>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x1cc>
 8000f12:	2300      	movs	r3, #0
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	2103      	movs	r1, #3
 8000f18:	400a      	ands	r2, r1
 8000f1a:	00d2      	lsls	r2, r2, #3
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f24:	4936      	ldr	r1, [pc, #216]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	035b      	lsls	r3, r3, #13
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	4013      	ands	r3, r2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000f88:	2384      	movs	r3, #132	; 0x84
 8000f8a:	58d3      	ldr	r3, [r2, r3]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fac:	4914      	ldr	r1, [pc, #80]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000fae:	2284      	movs	r2, #132	; 0x84
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	58d3      	ldr	r3, [r2, r3]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fda:	4909      	ldr	r1, [pc, #36]	; (8001000 <HAL_GPIO_Init+0x2b8>)
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_GPIO_Init+0x2ae>
 8000ff4:	e6b0      	b.n	8000d58 <HAL_GPIO_Init+0x10>
  }
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b006      	add	sp, #24
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021800 	.word	0x40021800
 8001004:	50000400 	.word	0x50000400
 8001008:	50000800 	.word	0x50000800
 800100c:	50000c00 	.word	0x50000c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	0008      	movs	r0, r1
 800101a:	0011      	movs	r1, r2
 800101c:	1cbb      	adds	r3, r7, #2
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	1c7b      	adds	r3, r7, #1
 8001024:	1c0a      	adds	r2, r1, #0
 8001026:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	1c7b      	adds	r3, r7, #1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001030:	1cbb      	adds	r3, r7, #2
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001038:	e003      	b.n	8001042 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103a:	1cbb      	adds	r3, r7, #2
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800105a:	4013      	ands	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	429a      	cmp	r2, r3
 800106e:	d11f      	bne.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	0013      	movs	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	189b      	adds	r3, r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4912      	ldr	r1, [pc, #72]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f848 	bl	8000114 <__udivsi3>
 8001084:	0003      	movs	r3, r0
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108a:	e008      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3b01      	subs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e001      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e009      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	401a      	ands	r2, r3
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d0ed      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40007000 	.word	0x40007000
 80010c0:	fffff9ff 	.word	0xfffff9ff
 80010c4:	20000000 	.word	0x20000000
 80010c8:	000f4240 	.word	0x000f4240

080010cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	23e0      	movs	r3, #224	; 0xe0
 80010d6:	01db      	lsls	r3, r3, #7
 80010d8:	4013      	ands	r3, r2
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e2f3      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x1e>
 8001100:	e07c      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001102:	4bc3      	ldr	r3, [pc, #780]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2238      	movs	r2, #56	; 0x38
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110c:	4bc0      	ldr	r3, [pc, #768]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b10      	cmp	r3, #16
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x3e>
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d002      	beq.n	8001128 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d10b      	bne.n	8001140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4bb9      	ldr	r3, [pc, #740]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d062      	beq.n	80011fa <HAL_RCC_OscConfig+0x116>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d15e      	bne.n	80011fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e2ce      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	429a      	cmp	r2, r3
 800114a:	d107      	bne.n	800115c <HAL_RCC_OscConfig+0x78>
 800114c:	4bb0      	ldr	r3, [pc, #704]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4baf      	ldr	r3, [pc, #700]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e020      	b.n	800119e <HAL_RCC_OscConfig+0xba>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	23a0      	movs	r3, #160	; 0xa0
 8001162:	02db      	lsls	r3, r3, #11
 8001164:	429a      	cmp	r2, r3
 8001166:	d10e      	bne.n	8001186 <HAL_RCC_OscConfig+0xa2>
 8001168:	4ba9      	ldr	r3, [pc, #676]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4ba8      	ldr	r3, [pc, #672]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	02c9      	lsls	r1, r1, #11
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4ba6      	ldr	r3, [pc, #664]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4ba5      	ldr	r3, [pc, #660]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0249      	lsls	r1, r1, #9
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0xba>
 8001186:	4ba2      	ldr	r3, [pc, #648]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4ba1      	ldr	r3, [pc, #644]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800118c:	49a1      	ldr	r1, [pc, #644]	; (8001414 <HAL_RCC_OscConfig+0x330>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	4b9f      	ldr	r3, [pc, #636]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001198:	499f      	ldr	r1, [pc, #636]	; (8001418 <HAL_RCC_OscConfig+0x334>)
 800119a:	400a      	ands	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d014      	beq.n	80011d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fcd7 	bl	8000b58 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcd2 	bl	8000b58 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e28d      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	4b93      	ldr	r3, [pc, #588]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xcc>
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcc2 	bl	8000b58 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fcbd 	bl	8000b58 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e278      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0xf6>
 80011f8:	e000      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2202      	movs	r2, #2
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x124>
 8001206:	e099      	b.n	800133c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2238      	movs	r2, #56	; 0x38
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2203      	movs	r2, #3
 8001218:	4013      	ands	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x144>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d002      	beq.n	800122e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d135      	bne.n	800129a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4013      	ands	r3, r2
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x162>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e24b      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a74      	ldr	r2, [pc, #464]	; (800141c <HAL_RCC_OscConfig+0x338>)
 800124c:	4013      	ands	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	021a      	lsls	r2, r3, #8
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x33c>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0adb      	lsrs	r3, r3, #11
 800127c:	2207      	movs	r2, #7
 800127e:	4013      	ands	r3, r2
 8001280:	4a68      	ldr	r2, [pc, #416]	; (8001424 <HAL_RCC_OscConfig+0x340>)
 8001282:	40da      	lsrs	r2, r3
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x344>)
 8001286:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x348>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fc07 	bl	8000aa0 <HAL_InitTick>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d051      	beq.n	800133a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e221      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d030      	beq.n	8001304 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a5e      	ldr	r2, [pc, #376]	; (8001420 <HAL_RCC_OscConfig+0x33c>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	0049      	lsls	r1, r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc48 	bl	8000b58 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc43 	bl	8000b58 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1fe      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a4a      	ldr	r2, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x338>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800130a:	4949      	ldr	r1, [pc, #292]	; (8001430 <HAL_RCC_OscConfig+0x34c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc22 	bl	8000b58 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fc1d 	bl	8000b58 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1d8      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4013      	ands	r3, r2
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x236>
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2208      	movs	r2, #8
 8001342:	4013      	ands	r3, r2
 8001344:	d047      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2238      	movs	r2, #56	; 0x38
 800134c:	4013      	ands	r3, r2
 800134e:	2b18      	cmp	r3, #24
 8001350:	d10a      	bne.n	8001368 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d03c      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d138      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e1ba      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d019      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001372:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fbec 	bl	8000b58 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fbe7 	bl	8000b58 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a2      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f1      	beq.n	8001386 <HAL_RCC_OscConfig+0x2a2>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fbd2 	bl	8000b58 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbcd 	bl	8000b58 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e188      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2fe>
 80013e0:	e0c6      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	231f      	movs	r3, #31
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2238      	movs	r2, #56	; 0x38
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d11e      	bne.n	8001434 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x31e>
 8001400:	e0b6      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d000      	beq.n	800140c <HAL_RCC_OscConfig+0x328>
 800140a:	e0b1      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e166      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
 8001410:	40021000 	.word	0x40021000
 8001414:	fffeffff 	.word	0xfffeffff
 8001418:	fffbffff 	.word	0xfffbffff
 800141c:	ffff80ff 	.word	0xffff80ff
 8001420:	ffffc7ff 	.word	0xffffc7ff
 8001424:	00f42400 	.word	0x00f42400
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004
 8001430:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001434:	4bac      	ldr	r3, [pc, #688]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	4013      	ands	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x360>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x362>
 8001444:	2300      	movs	r3, #0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4ba7      	ldr	r3, [pc, #668]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144e:	4ba6      	ldr	r3, [pc, #664]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0549      	lsls	r1, r1, #21
 8001454:	430a      	orrs	r2, r1
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
 8001458:	4ba3      	ldr	r3, [pc, #652]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800145a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4013      	ands	r3, r2
 8001478:	d11a      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800147a:	4b9c      	ldr	r3, [pc, #624]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b9b      	ldr	r3, [pc, #620]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0049      	lsls	r1, r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb66 	bl	8000b58 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fb61 	bl	8000b58 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e11c      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3e2>
 80014b8:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014bc:	4b8a      	ldr	r3, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x41c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x404>
 80014ce:	4b86      	ldr	r3, [pc, #536]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014da:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x41c>
 80014e8:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f8:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fb26 	bl	8000b58 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fb21 	bl	8000b58 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x60c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0db      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x42e>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fb11 	bl	8000b58 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fb0c 	bl	8000b58 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x60c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0c6      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800156a:	4962      	ldr	r1, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x610>)
 800156c:	400a      	ands	r2, r1
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x496>
 8001578:	e0b0      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	4013      	ands	r3, r2
 8001582:	2b10      	cmp	r3, #16
 8001584:	d100      	bne.n	8001588 <HAL_RCC_OscConfig+0x4a4>
 8001586:	e078      	b.n	800167a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d153      	bne.n	8001638 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001596:	4958      	ldr	r1, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x614>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fadc 	bl	8000b58 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fad7 	bl	8000b58 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e092      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	049b      	lsls	r3, r3, #18
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x618>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	431a      	orrs	r2, r3
 80015ec:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0449      	lsls	r1, r1, #17
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0549      	lsls	r1, r1, #21
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff faa3 	bl	8000b58 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa9e 	bl	8000b58 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e059      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x534>
 8001636:	e051      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800163e:	492e      	ldr	r1, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x614>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fa88 	bl	8000b58 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fa83 	bl	8000b58 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03e      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	049b      	lsls	r3, r3, #18
 8001668:	4013      	ands	r3, r2
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001672:	4923      	ldr	r1, [pc, #140]	; (8001700 <HAL_RCC_OscConfig+0x61c>)
 8001674:	400a      	ands	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e030      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02b      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2203      	movs	r2, #3
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	429a      	cmp	r2, r3
 8001698:	d11e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2270      	movs	r2, #112	; 0x70
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d117      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	23fe      	movs	r3, #254	; 0xfe
 80016ac:	01db      	lsls	r3, r3, #7
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d10e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	23f8      	movs	r3, #248	; 0xf8
 80016be:	039b      	lsls	r3, r3, #14
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	0f5b      	lsrs	r3, r3, #29
 80016ce:	075a      	lsls	r2, r3, #29
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b008      	add	sp, #32
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	efffffff 	.word	0xefffffff
 80016f8:	feffffff 	.word	0xfeffffff
 80016fc:	1fc1808c 	.word	0x1fc1808c
 8001700:	effefffc 	.word	0xeffefffc

08001704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0e9      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2207      	movs	r2, #7
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d91e      	bls.n	8001764 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2207      	movs	r2, #7
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa0e 	bl	8000b58 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001740:	e009      	b.n	8001756 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001742:	f7ff fa09 	bl	8000b58 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0ca      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d015      	beq.n	800179a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	d006      	beq.n	8001786 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001778:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	21e0      	movs	r1, #224	; 0xe0
 8001780:	01c9      	lsls	r1, r1, #7
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <HAL_RCC_ClockConfig+0x1fc>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d057      	beq.n	8001854 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d12b      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e097      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	049b      	lsls	r3, r3, #18
 80017cc:	4013      	ands	r3, r2
 80017ce:	d11f      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e08b      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	d113      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07f      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e074      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e06d      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2207      	movs	r2, #7
 8001816:	4393      	bics	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7ff f998 	bl	8000b58 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f993 	bl	8000b58 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e054      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2238      	movs	r2, #56	; 0x38
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ec      	bne.n	800182e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2207      	movs	r2, #7
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d21e      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2207      	movs	r2, #7
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001874:	f7ff f970 	bl	8000b58 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f96b 	bl	8000b58 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e02c      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_RCC_ClockConfig+0x200>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018be:	f000 f829 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018c2:	0001      	movs	r1, r0
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	220f      	movs	r2, #15
 80018cc:	401a      	ands	r2, r3
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x204>)
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	58d3      	ldr	r3, [r2, r3]
 80018d4:	221f      	movs	r2, #31
 80018d6:	4013      	ands	r3, r2
 80018d8:	000a      	movs	r2, r1
 80018da:	40da      	lsrs	r2, r3
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x208>)
 80018de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff f8db 	bl	8000aa0 <HAL_InitTick>
 80018ea:	0003      	movs	r3, r0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffff0ff 	.word	0xfffff0ff
 8001904:	ffff8fff 	.word	0xffff8fff
 8001908:	08003d64 	.word	0x08003d64
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0adb      	lsrs	r3, r3, #11
 800192a:	2207      	movs	r2, #7
 800192c:	4013      	ands	r3, r2
 800192e:	2201      	movs	r2, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	4835      	ldr	r0, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800193a:	f7fe fbeb 	bl	8000114 <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e05d      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2238      	movs	r2, #56	; 0x38
 800194a:	4013      	ands	r3, r2
 800194c:	2b08      	cmp	r3, #8
 800194e:	d102      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e054      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	2b10      	cmp	r3, #16
 8001960:	d138      	bne.n	80019d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2203      	movs	r2, #3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	3301      	adds	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d10d      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4824      	ldr	r0, [pc, #144]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001984:	f7fe fbc6 	bl	8000114 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	227f      	movs	r2, #127	; 0x7f
 8001994:	4013      	ands	r3, r2
 8001996:	434b      	muls	r3, r1
 8001998:	617b      	str	r3, [r7, #20]
        break;
 800199a:	e00d      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	481c      	ldr	r0, [pc, #112]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a0:	f7fe fbb8 	bl	8000114 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	227f      	movs	r2, #127	; 0x7f
 80019b0:	4013      	ands	r3, r2
 80019b2:	434b      	muls	r3, r1
 80019b4:	617b      	str	r3, [r7, #20]
        break;
 80019b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0f5b      	lsrs	r3, r3, #29
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7fe fba3 	bl	8000114 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e015      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2238      	movs	r2, #56	; 0x38
 80019da:	4013      	ands	r3, r2
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d103      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2238      	movs	r2, #56	; 0x38
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b18      	cmp	r3, #24
 80019f2:	d103      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019f4:	23fa      	movs	r3, #250	; 0xfa
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e001      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a00:	693b      	ldr	r3, [r7, #16]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	0004      	movs	r4, r0
 8001a36:	f7ff fb49 	bl	80010cc <LL_RCC_GetAPB1Prescaler>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	0b1a      	lsrs	r2, r3, #12
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	58d3      	ldr	r3, [r2, r3]
 8001a44:	221f      	movs	r2, #31
 8001a46:	4013      	ands	r3, r2
 8001a48:	40dc      	lsrs	r4, r3
 8001a4a:	0023      	movs	r3, r4
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	08003da4 	.word	0x08003da4

08001a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a60:	2313      	movs	r3, #19
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a68:	2312      	movs	r3, #18
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a7c:	e0a3      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2011      	movs	r0, #17
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b86      	ldr	r3, [pc, #536]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d110      	bne.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b83      	ldr	r3, [pc, #524]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0549      	lsls	r1, r1, #21
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	055b      	lsls	r3, r3, #21
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	183b      	adds	r3, r7, r0
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ac2:	f7ff f849 	bl	8000b58 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7ff f844 	bl	8000b58 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d904      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ada:	2313      	movs	r3, #19
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
        break;
 8001ae2:	e005      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0ed      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001af0:	2313      	movs	r3, #19
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d154      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001afa:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d019      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d014      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b24:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0249      	lsls	r1, r1, #9
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b34:	495d      	ldr	r1, [pc, #372]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d016      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f806 	bl	8000b58 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b50:	e00c      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f801 	bl	8000b58 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d904      	bls.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b62:	2313      	movs	r3, #19
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2203      	movs	r2, #3
 8001b68:	701a      	strb	r2, [r3, #0]
            break;
 8001b6a:	e004      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0ed      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b76:	2313      	movs	r3, #19
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b96:	2312      	movs	r3, #18
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2213      	movs	r2, #19
 8001b9c:	18ba      	adds	r2, r7, r2
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2213      	movs	r2, #19
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb0:	2311      	movs	r3, #17
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc0:	493c      	ldr	r1, [pc, #240]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d015      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	0899      	lsrs	r1, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d106      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0249      	lsls	r1, r1, #9
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4013      	ands	r3, r2
 8001c62:	d016      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	01db      	lsls	r3, r3, #7
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0249      	lsls	r1, r1, #9
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c92:	2312      	movs	r3, #18
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b006      	add	sp, #24
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	fffffcff 	.word	0xfffffcff
 8001cac:	fffeffff 	.word	0xfffeffff
 8001cb0:	00001388 	.word	0x00001388
 8001cb4:	efffffff 	.word	0xefffffff
 8001cb8:	ffffcfff 	.word	0xffffcfff
 8001cbc:	ffff3fff 	.word	0xffff3fff

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e04a      	b.n	8001d68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	5c9b      	ldrb	r3, [r3, r2]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223c      	movs	r2, #60	; 0x3c
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7fe fd49 	bl	8000780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223d      	movs	r2, #61	; 0x3d
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f000 f8c9 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2248      	movs	r2, #72	; 0x48
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223e      	movs	r2, #62	; 0x3e
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2241      	movs	r2, #65	; 0x41
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2242      	movs	r2, #66	; 0x42
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2243      	movs	r2, #67	; 0x43
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2244      	movs	r2, #68	; 0x44
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2245      	movs	r2, #69	; 0x45
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2246      	movs	r2, #70	; 0x46
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2247      	movs	r2, #71	; 0x47
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	223d      	movs	r2, #61	; 0x3d
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	223d      	movs	r2, #61	; 0x3d
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d001      	beq.n	8001d88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e034      	b.n	8001df2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	223d      	movs	r2, #61	; 0x3d
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_Start+0x8c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_TIM_Base_Start+0x3e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_TIM_Base_Start+0x90>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_TIM_Base_Start+0x3e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_TIM_Base_Start+0x94>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d116      	bne.n	8001ddc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <HAL_TIM_Base_Start+0x98>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b06      	cmp	r3, #6
 8001dbe:	d016      	beq.n	8001dee <HAL_TIM_Base_Start+0x7e>
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	025b      	lsls	r3, r3, #9
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d011      	beq.n	8001dee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dda:	e008      	b.n	8001dee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e000      	b.n	8001df0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	00010007 	.word	0x00010007

08001e0c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223c      	movs	r2, #60	; 0x3c
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e032      	b.n	8001e8a <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	223c      	movs	r2, #60	; 0x3c
 8001e28:	2101      	movs	r1, #1
 8001e2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	223d      	movs	r2, #61	; 0x3d
 8001e30:	2102      	movs	r1, #2
 8001e32:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0011      	movs	r1, r2
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f8b0 	bl	8001fa0 <TIM_SlaveTimer_SetConfig>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	223d      	movs	r2, #61	; 0x3d
 8001e48:	2101      	movs	r1, #1
 8001e4a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	223c      	movs	r2, #60	; 0x3c
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e018      	b.n	8001e8a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	438a      	bics	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223d      	movs	r2, #61	; 0x3d
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	223c      	movs	r2, #60	; 0x3c
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	ffffbfff 	.word	0xffffbfff

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <TIM_Base_SetConfig+0xec>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0x20>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <TIM_Base_SetConfig+0xf0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2270      	movs	r2, #112	; 0x70
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <TIM_Base_SetConfig+0xec>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <TIM_Base_SetConfig+0xf0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00f      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <TIM_Base_SetConfig+0xf4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00b      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <TIM_Base_SetConfig+0xf8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <TIM_Base_SetConfig+0xfc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d003      	beq.n	8001efa <TIM_Base_SetConfig+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a28      	ldr	r2, [pc, #160]	; (8001f98 <TIM_Base_SetConfig+0x100>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <TIM_Base_SetConfig+0x104>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	4393      	bics	r3, r2
 8001f12:	001a      	movs	r2, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <TIM_Base_SetConfig+0xec>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <TIM_Base_SetConfig+0xba>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <TIM_Base_SetConfig+0xf8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <TIM_Base_SetConfig+0xba>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <TIM_Base_SetConfig+0xfc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d003      	beq.n	8001f52 <TIM_Base_SetConfig+0xba>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <TIM_Base_SetConfig+0x100>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d103      	bne.n	8001f5a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2201      	movs	r2, #1
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4393      	bics	r3, r2
 8001f74:	001a      	movs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	611a      	str	r2, [r3, #16]
  }
}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40002000 	.word	0x40002000
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	fffffcff 	.word	0xfffffcff

08001fa0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2317      	movs	r3, #23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <TIM_SlaveTimer_SetConfig+0x124>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <TIM_SlaveTimer_SetConfig+0x128>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b70      	cmp	r3, #112	; 0x70
 8001fec:	d015      	beq.n	800201a <TIM_SlaveTimer_SetConfig+0x7a>
 8001fee:	d900      	bls.n	8001ff2 <TIM_SlaveTimer_SetConfig+0x52>
 8001ff0:	e05b      	b.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 8001ff2:	2b60      	cmp	r3, #96	; 0x60
 8001ff4:	d04f      	beq.n	8002096 <TIM_SlaveTimer_SetConfig+0xf6>
 8001ff6:	d858      	bhi.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 8001ff8:	2b50      	cmp	r3, #80	; 0x50
 8001ffa:	d042      	beq.n	8002082 <TIM_SlaveTimer_SetConfig+0xe2>
 8001ffc:	d855      	bhi.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d016      	beq.n	8002030 <TIM_SlaveTimer_SetConfig+0x90>
 8002002:	d852      	bhi.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 8002004:	2b30      	cmp	r3, #48	; 0x30
 8002006:	d055      	beq.n	80020b4 <TIM_SlaveTimer_SetConfig+0x114>
 8002008:	d84f      	bhi.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 800200a:	2b20      	cmp	r3, #32
 800200c:	d052      	beq.n	80020b4 <TIM_SlaveTimer_SetConfig+0x114>
 800200e:	d84c      	bhi.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d04f      	beq.n	80020b4 <TIM_SlaveTimer_SetConfig+0x114>
 8002014:	2b10      	cmp	r3, #16
 8002016:	d04d      	beq.n	80020b4 <TIM_SlaveTimer_SetConfig+0x114>
 8002018:	e047      	b.n	80020aa <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800202a:	f000 f8af 	bl	800218c <TIM_ETR_SetConfig>
      break;
 800202e:	e042      	b.n	80020b6 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d101      	bne.n	800203c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e03f      	b.n	80020bc <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	22f0      	movs	r2, #240	; 0xf0
 8002060:	4393      	bics	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4313      	orrs	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	621a      	str	r2, [r3, #32]
      break;
 8002080:	e019      	b.n	80020b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800208e:	001a      	movs	r2, r3
 8002090:	f000 f81c 	bl	80020cc <TIM_TI1_ConfigInputStage>
      break;
 8002094:	e00f      	b.n	80020b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020a2:	001a      	movs	r2, r3
 80020a4:	f000 f840 	bl	8002128 <TIM_TI2_ConfigInputStage>
      break;
 80020a8:	e005      	b.n	80020b6 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
      break;
 80020b2:	e000      	b.n	80020b6 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80020b4:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80020b6:	2317      	movs	r3, #23
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b006      	add	sp, #24
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	ffcfff8f 	.word	0xffcfff8f
 80020c8:	fffefff8 	.word	0xfffefff8

080020cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4393      	bics	r3, r2
 80020e6:	001a      	movs	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	22f0      	movs	r2, #240	; 0xf0
 80020f6:	4393      	bics	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	220a      	movs	r2, #10
 8002108:	4393      	bics	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2210      	movs	r2, #16
 8002140:	4393      	bics	r3, r2
 8002142:	001a      	movs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <TIM_TI2_ConfigInputStage+0x60>)
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	22a0      	movs	r2, #160	; 0xa0
 8002164:	4393      	bics	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	621a      	str	r2, [r3, #32]
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	ffff0fff 	.word	0xffff0fff

0800218c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <TIM_ETR_SetConfig+0x3c>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	021a      	lsls	r2, r3, #8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b006      	add	sp, #24
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	ffff00ff 	.word	0xffff00ff

080021cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223c      	movs	r2, #60	; 0x3c
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e04f      	b.n	8002284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	223c      	movs	r2, #60	; 0x3c
 80021e8:	2101      	movs	r1, #1
 80021ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223d      	movs	r2, #61	; 0x3d
 80021f0:	2102      	movs	r1, #2
 80021f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2270      	movs	r2, #112	; 0x70
 8002224:	4393      	bics	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d004      	beq.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10c      	bne.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	4393      	bics	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4313      	orrs	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	223d      	movs	r2, #61	; 0x3d
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	223c      	movs	r2, #60	; 0x3c
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40012c00 	.word	0x40012c00
 8002290:	ff0fffff 	.word	0xff0fffff
 8002294:	40000400 	.word	0x40000400
 8002298:	40014000 	.word	0x40014000

0800229c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e046      	b.n	800233c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2288      	movs	r2, #136	; 0x88
 80022b2:	589b      	ldr	r3, [r3, r2]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2284      	movs	r2, #132	; 0x84
 80022bc:	2100      	movs	r1, #0
 80022be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7fe faa6 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2288      	movs	r2, #136	; 0x88
 80022cc:	2124      	movs	r1, #36	; 0x24
 80022ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 fa74 	bl	80027d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f8cc 	bl	8002490 <UART_SetConfig>
 80022f8:	0003      	movs	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e01c      	b.n	800233c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	490d      	ldr	r1, [pc, #52]	; (8002344 <HAL_UART_Init+0xa8>)
 800230e:	400a      	ands	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	212a      	movs	r1, #42	; 0x2a
 800231e:	438a      	bics	r2, r1
 8002320:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fb03 	bl	8002940 <UART_CheckIdleState>
 800233a:	0003      	movs	r3, r0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	ffffb7ff 	.word	0xffffb7ff

08002348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2288      	movs	r2, #136	; 0x88
 800235c:	589b      	ldr	r3, [r3, r2]
 800235e:	2b20      	cmp	r3, #32
 8002360:	d000      	beq.n	8002364 <HAL_UART_Transmit+0x1c>
 8002362:	e090      	b.n	8002486 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_UART_Transmit+0x2a>
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e088      	b.n	8002488 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	015b      	lsls	r3, r3, #5
 800237e:	429a      	cmp	r2, r3
 8002380:	d109      	bne.n	8002396 <HAL_UART_Transmit+0x4e>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d001      	beq.n	8002396 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e078      	b.n	8002488 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2290      	movs	r2, #144	; 0x90
 800239a:	2100      	movs	r1, #0
 800239c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2288      	movs	r2, #136	; 0x88
 80023a2:	2121      	movs	r1, #33	; 0x21
 80023a4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fbd7 	bl	8000b58 <HAL_GetTick>
 80023aa:	0003      	movs	r3, r0
 80023ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1dba      	adds	r2, r7, #6
 80023b2:	2154      	movs	r1, #84	; 0x54
 80023b4:	8812      	ldrh	r2, [r2, #0]
 80023b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1dba      	adds	r2, r7, #6
 80023bc:	2156      	movs	r1, #86	; 0x56
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	015b      	lsls	r3, r3, #5
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Transmit+0x98>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e8:	e030      	b.n	800244c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	0013      	movs	r3, r2
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	f000 fb4c 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d005      	beq.n	800240c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2288      	movs	r2, #136	; 0x88
 8002404:	2120      	movs	r1, #32
 8002406:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e03d      	b.n	8002488 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	001a      	movs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	05d2      	lsls	r2, r2, #23
 800241e:	0dd2      	lsrs	r2, r2, #23
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3302      	adds	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e007      	b.n	800243a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2256      	movs	r2, #86	; 0x56
 800243e:	5a9b      	ldrh	r3, [r3, r2]
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b299      	uxth	r1, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2256      	movs	r2, #86	; 0x56
 800244a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2256      	movs	r2, #86	; 0x56
 8002450:	5a9b      	ldrh	r3, [r3, r2]
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1c8      	bne.n	80023ea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	0013      	movs	r3, r2
 8002462:	2200      	movs	r2, #0
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	f000 fb15 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d005      	beq.n	800247a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2288      	movs	r2, #136	; 0x88
 8002472:	2120      	movs	r1, #32
 8002474:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e006      	b.n	8002488 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2288      	movs	r2, #136	; 0x88
 800247e:	2120      	movs	r1, #32
 8002480:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002486:	2302      	movs	r3, #2
  }
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b008      	add	sp, #32
 800248e:	bd80      	pop	{r7, pc}

08002490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002498:	231a      	movs	r3, #26
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4abc      	ldr	r2, [pc, #752]	; (80027b0 <UART_SetConfig+0x320>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4ab7      	ldr	r2, [pc, #732]	; (80027b4 <UART_SetConfig+0x324>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4aae      	ldr	r2, [pc, #696]	; (80027b8 <UART_SetConfig+0x328>)
 80024fe:	4013      	ands	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	220f      	movs	r2, #15
 8002514:	4393      	bics	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4aa4      	ldr	r2, [pc, #656]	; (80027bc <UART_SetConfig+0x32c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d127      	bne.n	800257e <UART_SetConfig+0xee>
 800252e:	4ba4      	ldr	r3, [pc, #656]	; (80027c0 <UART_SetConfig+0x330>)
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2203      	movs	r2, #3
 8002534:	4013      	ands	r3, r2
 8002536:	2b03      	cmp	r3, #3
 8002538:	d017      	beq.n	800256a <UART_SetConfig+0xda>
 800253a:	d81b      	bhi.n	8002574 <UART_SetConfig+0xe4>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d00a      	beq.n	8002556 <UART_SetConfig+0xc6>
 8002540:	d818      	bhi.n	8002574 <UART_SetConfig+0xe4>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <UART_SetConfig+0xbc>
 8002546:	2b01      	cmp	r3, #1
 8002548:	d00a      	beq.n	8002560 <UART_SetConfig+0xd0>
 800254a:	e013      	b.n	8002574 <UART_SetConfig+0xe4>
 800254c:	231b      	movs	r3, #27
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e058      	b.n	8002608 <UART_SetConfig+0x178>
 8002556:	231b      	movs	r3, #27
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2202      	movs	r2, #2
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e053      	b.n	8002608 <UART_SetConfig+0x178>
 8002560:	231b      	movs	r3, #27
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2204      	movs	r2, #4
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	e04e      	b.n	8002608 <UART_SetConfig+0x178>
 800256a:	231b      	movs	r3, #27
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2208      	movs	r2, #8
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e049      	b.n	8002608 <UART_SetConfig+0x178>
 8002574:	231b      	movs	r3, #27
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2210      	movs	r2, #16
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e044      	b.n	8002608 <UART_SetConfig+0x178>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a90      	ldr	r2, [pc, #576]	; (80027c4 <UART_SetConfig+0x334>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d127      	bne.n	80025d8 <UART_SetConfig+0x148>
 8002588:	4b8d      	ldr	r3, [pc, #564]	; (80027c0 <UART_SetConfig+0x330>)
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	220c      	movs	r2, #12
 800258e:	4013      	ands	r3, r2
 8002590:	2b0c      	cmp	r3, #12
 8002592:	d017      	beq.n	80025c4 <UART_SetConfig+0x134>
 8002594:	d81b      	bhi.n	80025ce <UART_SetConfig+0x13e>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d00a      	beq.n	80025b0 <UART_SetConfig+0x120>
 800259a:	d818      	bhi.n	80025ce <UART_SetConfig+0x13e>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <UART_SetConfig+0x116>
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d00a      	beq.n	80025ba <UART_SetConfig+0x12a>
 80025a4:	e013      	b.n	80025ce <UART_SetConfig+0x13e>
 80025a6:	231b      	movs	r3, #27
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e02b      	b.n	8002608 <UART_SetConfig+0x178>
 80025b0:	231b      	movs	r3, #27
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e026      	b.n	8002608 <UART_SetConfig+0x178>
 80025ba:	231b      	movs	r3, #27
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e021      	b.n	8002608 <UART_SetConfig+0x178>
 80025c4:	231b      	movs	r3, #27
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2208      	movs	r2, #8
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e01c      	b.n	8002608 <UART_SetConfig+0x178>
 80025ce:	231b      	movs	r3, #27
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2210      	movs	r2, #16
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e017      	b.n	8002608 <UART_SetConfig+0x178>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <UART_SetConfig+0x338>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d104      	bne.n	80025ec <UART_SetConfig+0x15c>
 80025e2:	231b      	movs	r3, #27
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e00d      	b.n	8002608 <UART_SetConfig+0x178>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a76      	ldr	r2, [pc, #472]	; (80027cc <UART_SetConfig+0x33c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d104      	bne.n	8002600 <UART_SetConfig+0x170>
 80025f6:	231b      	movs	r3, #27
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e003      	b.n	8002608 <UART_SetConfig+0x178>
 8002600:	231b      	movs	r3, #27
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2210      	movs	r2, #16
 8002606:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	429a      	cmp	r2, r3
 8002612:	d000      	beq.n	8002616 <UART_SetConfig+0x186>
 8002614:	e065      	b.n	80026e2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002616:	231b      	movs	r3, #27
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d015      	beq.n	800264c <UART_SetConfig+0x1bc>
 8002620:	dc18      	bgt.n	8002654 <UART_SetConfig+0x1c4>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00d      	beq.n	8002642 <UART_SetConfig+0x1b2>
 8002626:	dc15      	bgt.n	8002654 <UART_SetConfig+0x1c4>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <UART_SetConfig+0x1a2>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d005      	beq.n	800263c <UART_SetConfig+0x1ac>
 8002630:	e010      	b.n	8002654 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff f9fb 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002636:	0003      	movs	r3, r0
 8002638:	617b      	str	r3, [r7, #20]
        break;
 800263a:	e012      	b.n	8002662 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <UART_SetConfig+0x340>)
 800263e:	617b      	str	r3, [r7, #20]
        break;
 8002640:	e00f      	b.n	8002662 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002642:	f7ff f967 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 8002646:	0003      	movs	r3, r0
 8002648:	617b      	str	r3, [r7, #20]
        break;
 800264a:	e00a      	b.n	8002662 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	617b      	str	r3, [r7, #20]
        break;
 8002652:	e006      	b.n	8002662 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002658:	231a      	movs	r3, #26
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
        break;
 8002660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d100      	bne.n	800266a <UART_SetConfig+0x1da>
 8002668:	e08d      	b.n	8002786 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266e:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <UART_SetConfig+0x344>)
 8002670:	0052      	lsls	r2, r2, #1
 8002672:	5ad3      	ldrh	r3, [r2, r3]
 8002674:	0019      	movs	r1, r3
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7fd fd4c 	bl	8000114 <__udivsi3>
 800267c:	0003      	movs	r3, r0
 800267e:	005a      	lsls	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	18d2      	adds	r2, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0019      	movs	r1, r3
 800268e:	0010      	movs	r0, r2
 8002690:	f7fd fd40 	bl	8000114 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	d91c      	bls.n	80026d8 <UART_SetConfig+0x248>
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	025b      	lsls	r3, r3, #9
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d217      	bcs.n	80026d8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	200e      	movs	r0, #14
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	210f      	movs	r1, #15
 80026b2:	438a      	bics	r2, r1
 80026b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2207      	movs	r2, #7
 80026be:	4013      	ands	r3, r2
 80026c0:	b299      	uxth	r1, r3
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	183a      	adds	r2, r7, r0
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	183a      	adds	r2, r7, r0
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	e056      	b.n	8002786 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80026d8:	231a      	movs	r3, #26
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e051      	b.n	8002786 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026e2:	231b      	movs	r3, #27
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d015      	beq.n	8002718 <UART_SetConfig+0x288>
 80026ec:	dc18      	bgt.n	8002720 <UART_SetConfig+0x290>
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00d      	beq.n	800270e <UART_SetConfig+0x27e>
 80026f2:	dc15      	bgt.n	8002720 <UART_SetConfig+0x290>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <UART_SetConfig+0x26e>
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d005      	beq.n	8002708 <UART_SetConfig+0x278>
 80026fc:	e010      	b.n	8002720 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026fe:	f7ff f995 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002702:	0003      	movs	r3, r0
 8002704:	617b      	str	r3, [r7, #20]
        break;
 8002706:	e012      	b.n	800272e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <UART_SetConfig+0x340>)
 800270a:	617b      	str	r3, [r7, #20]
        break;
 800270c:	e00f      	b.n	800272e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800270e:	f7ff f901 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 8002712:	0003      	movs	r3, r0
 8002714:	617b      	str	r3, [r7, #20]
        break;
 8002716:	e00a      	b.n	800272e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	617b      	str	r3, [r7, #20]
        break;
 800271e:	e006      	b.n	800272e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002724:	231a      	movs	r3, #26
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
        break;
 800272c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d028      	beq.n	8002786 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <UART_SetConfig+0x344>)
 800273a:	0052      	lsls	r2, r2, #1
 800273c:	5ad3      	ldrh	r3, [r2, r3]
 800273e:	0019      	movs	r1, r3
 8002740:	6978      	ldr	r0, [r7, #20]
 8002742:	f7fd fce7 	bl	8000114 <__udivsi3>
 8002746:	0003      	movs	r3, r0
 8002748:	001a      	movs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	18d2      	adds	r2, r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0019      	movs	r1, r3
 8002758:	0010      	movs	r0, r2
 800275a:	f7fd fcdb 	bl	8000114 <__udivsi3>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d90a      	bls.n	800277e <UART_SetConfig+0x2ee>
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	025b      	lsls	r3, r3, #9
 800276e:	429a      	cmp	r2, r3
 8002770:	d205      	bcs.n	800277e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	e003      	b.n	8002786 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800277e:	231a      	movs	r3, #26
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	226a      	movs	r2, #106	; 0x6a
 800278a:	2101      	movs	r1, #1
 800278c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2268      	movs	r2, #104	; 0x68
 8002792:	2101      	movs	r1, #1
 8002794:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80027a2:	231a      	movs	r3, #26
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b008      	add	sp, #32
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	cfff69f3 	.word	0xcfff69f3
 80027b4:	ffffcfff 	.word	0xffffcfff
 80027b8:	11fff4ff 	.word	0x11fff4ff
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40004400 	.word	0x40004400
 80027c8:	40004800 	.word	0x40004800
 80027cc:	40004c00 	.word	0x40004c00
 80027d0:	00f42400 	.word	0x00f42400
 80027d4:	08003dc4 	.word	0x08003dc4

080027d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2208      	movs	r2, #8
 80027e6:	4013      	ands	r3, r2
 80027e8:	d00b      	beq.n	8002802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a4a      	ldr	r2, [pc, #296]	; (800291c <UART_AdvFeatureConfig+0x144>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d00b      	beq.n	8002824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a43      	ldr	r2, [pc, #268]	; (8002920 <UART_AdvFeatureConfig+0x148>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d00b      	beq.n	8002846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <UART_AdvFeatureConfig+0x14c>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2204      	movs	r2, #4
 800284c:	4013      	ands	r3, r2
 800284e:	d00b      	beq.n	8002868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a34      	ldr	r2, [pc, #208]	; (8002928 <UART_AdvFeatureConfig+0x150>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2210      	movs	r2, #16
 800286e:	4013      	ands	r3, r2
 8002870:	d00b      	beq.n	800288a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a2c      	ldr	r2, [pc, #176]	; (800292c <UART_AdvFeatureConfig+0x154>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	2220      	movs	r2, #32
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4a25      	ldr	r2, [pc, #148]	; (8002930 <UART_AdvFeatureConfig+0x158>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	4013      	ands	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <UART_AdvFeatureConfig+0x15c>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	035b      	lsls	r3, r3, #13
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d10b      	bne.n	80028f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <UART_AdvFeatureConfig+0x160>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <UART_AdvFeatureConfig+0x164>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
  }
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	ffff7fff 	.word	0xffff7fff
 8002920:	fffdffff 	.word	0xfffdffff
 8002924:	fffeffff 	.word	0xfffeffff
 8002928:	fffbffff 	.word	0xfffbffff
 800292c:	ffffefff 	.word	0xffffefff
 8002930:	ffffdfff 	.word	0xffffdfff
 8002934:	ffefffff 	.word	0xffefffff
 8002938:	ff9fffff 	.word	0xff9fffff
 800293c:	fff7ffff 	.word	0xfff7ffff

08002940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af02      	add	r7, sp, #8
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2290      	movs	r2, #144	; 0x90
 800294c:	2100      	movs	r1, #0
 800294e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002950:	f7fe f902 	bl	8000b58 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2208      	movs	r2, #8
 8002960:	4013      	ands	r3, r2
 8002962:	2b08      	cmp	r3, #8
 8002964:	d12d      	bne.n	80029c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	0391      	lsls	r1, r2, #14
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4a47      	ldr	r2, [pc, #284]	; (8002a8c <UART_CheckIdleState+0x14c>)
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	f000 f88e 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d022      	beq.n	80029c2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297c:	f3ef 8310 	mrs	r3, PRIMASK
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
 8002986:	2301      	movs	r3, #1
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	f383 8810 	msr	PRIMASK, r3
}
 80029ac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2288      	movs	r2, #136	; 0x88
 80029b2:	2120      	movs	r1, #32
 80029b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2284      	movs	r2, #132	; 0x84
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e060      	b.n	8002a84 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2204      	movs	r2, #4
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d146      	bne.n	8002a5e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	03d1      	lsls	r1, r2, #15
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <UART_CheckIdleState+0x14c>)
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	f000 f859 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80029e2:	1e03      	subs	r3, r0, #0
 80029e4:	d03b      	beq.n	8002a5e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80029ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
 80029f0:	2301      	movs	r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4922      	ldr	r1, [pc, #136]	; (8002a90 <UART_CheckIdleState+0x150>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	228c      	movs	r2, #140	; 0x8c
 8002a4e:	2120      	movs	r1, #32
 8002a50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2284      	movs	r2, #132	; 0x84
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e012      	b.n	8002a84 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2288      	movs	r2, #136	; 0x88
 8002a62:	2120      	movs	r1, #32
 8002a64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	228c      	movs	r2, #140	; 0x8c
 8002a6a:	2120      	movs	r1, #32
 8002a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2284      	movs	r2, #132	; 0x84
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b010      	add	sp, #64	; 0x40
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	01ffffff 	.word	0x01ffffff
 8002a90:	fffffedf 	.word	0xfffffedf

08002a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	1dfb      	adds	r3, r7, #7
 8002aa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa4:	e051      	b.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	d04e      	beq.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fe f854 	bl	8000b58 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e051      	b.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2204      	movs	r2, #4
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d03b      	beq.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d038      	beq.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d035      	beq.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d111      	bne.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2208      	movs	r2, #8
 8002af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f83c 	bl	8002b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2290      	movs	r2, #144	; 0x90
 8002b00:	2108      	movs	r1, #8
 8002b02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2284      	movs	r2, #132	; 0x84
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e02c      	b.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d112      	bne.n	8002b4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 f81f 	bl	8002b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2290      	movs	r2, #144	; 0x90
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2284      	movs	r2, #132	; 0x84
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e00f      	b.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	425a      	negs	r2, r3
 8002b5a:	4153      	adcs	r3, r2
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	001a      	movs	r2, r3
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d09e      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b80:	617b      	str	r3, [r7, #20]
  return(result);
 8002b82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
 8002b86:	2301      	movs	r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f383 8810 	msr	PRIMASK, r3
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4926      	ldr	r1, [pc, #152]	; (8002c38 <UART_EndRxTransfer+0xc4>)
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bae:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb2:	623b      	str	r3, [r7, #32]
  return(result);
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb8:	2301      	movs	r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	491b      	ldr	r1, [pc, #108]	; (8002c3c <UART_EndRxTransfer+0xc8>)
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d118      	bne.n	8002c1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f383 8810 	msr	PRIMASK, r3
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2110      	movs	r1, #16
 8002c0a:	438a      	bics	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f383 8810 	msr	PRIMASK, r3
}
 8002c18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	228c      	movs	r2, #140	; 0x8c
 8002c1e:	2120      	movs	r1, #32
 8002c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b00e      	add	sp, #56	; 0x38
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	fffffedf 	.word	0xfffffedf
 8002c3c:	effffffe 	.word	0xeffffffe

08002c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2284      	movs	r2, #132	; 0x84
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e027      	b.n	8002ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2284      	movs	r2, #132	; 0x84
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2288      	movs	r2, #136	; 0x88
 8002c62:	2124      	movs	r1, #36	; 0x24
 8002c64:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2288      	movs	r2, #136	; 0x88
 8002c98:	2120      	movs	r1, #32
 8002c9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2284      	movs	r2, #132	; 0x84
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	dfffffff 	.word	0xdfffffff

08002cb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2284      	movs	r2, #132	; 0x84
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e02e      	b.n	8002d2a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2284      	movs	r2, #132	; 0x84
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2288      	movs	r2, #136	; 0x88
 8002cd8:	2124      	movs	r1, #36	; 0x24
 8002cda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	08d9      	lsrs	r1, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 f854 	bl	8002db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2288      	movs	r2, #136	; 0x88
 8002d1c:	2120      	movs	r1, #32
 8002d1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2284      	movs	r2, #132	; 0x84
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2284      	movs	r2, #132	; 0x84
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e02f      	b.n	8002dac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2284      	movs	r2, #132	; 0x84
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2288      	movs	r2, #136	; 0x88
 8002d58:	2124      	movs	r1, #36	; 0x24
 8002d5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 f813 	bl	8002db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2288      	movs	r2, #136	; 0x88
 8002d9e:	2120      	movs	r1, #32
 8002da0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2284      	movs	r2, #132	; 0x84
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	f1ffffff 	.word	0xf1ffffff

08002db8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d108      	bne.n	8002dda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	226a      	movs	r2, #106	; 0x6a
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2268      	movs	r2, #104	; 0x68
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002dd8:	e043      	b.n	8002e62 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002dda:	260f      	movs	r6, #15
 8002ddc:	19bb      	adds	r3, r7, r6
 8002dde:	2208      	movs	r2, #8
 8002de0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002de2:	200e      	movs	r0, #14
 8002de4:	183b      	adds	r3, r7, r0
 8002de6:	2208      	movs	r2, #8
 8002de8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	0e5b      	lsrs	r3, r3, #25
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	240d      	movs	r4, #13
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	2107      	movs	r1, #7
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	0f5b      	lsrs	r3, r3, #29
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	250c      	movs	r5, #12
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	2107      	movs	r1, #7
 8002e0e:	400a      	ands	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	197a      	adds	r2, r7, r5
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	4914      	ldr	r1, [pc, #80]	; (8002e6c <UARTEx_SetNbDataToProcess+0xb4>)
 8002e1c:	5c8a      	ldrb	r2, [r1, r2]
 8002e1e:	435a      	muls	r2, r3
 8002e20:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e22:	197b      	adds	r3, r7, r5
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <UARTEx_SetNbDataToProcess+0xb8>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	f7fd f9fc 	bl	8000228 <__divsi3>
 8002e30:	0003      	movs	r3, r0
 8002e32:	b299      	uxth	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	226a      	movs	r2, #106	; 0x6a
 8002e38:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e3a:	19bb      	adds	r3, r7, r6
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	193a      	adds	r2, r7, r4
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	490a      	ldr	r1, [pc, #40]	; (8002e6c <UARTEx_SetNbDataToProcess+0xb4>)
 8002e44:	5c8a      	ldrb	r2, [r1, r2]
 8002e46:	435a      	muls	r2, r3
 8002e48:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <UARTEx_SetNbDataToProcess+0xb8>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e52:	0019      	movs	r1, r3
 8002e54:	f7fd f9e8 	bl	8000228 <__divsi3>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2268      	movs	r2, #104	; 0x68
 8002e60:	5299      	strh	r1, [r3, r2]
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b005      	add	sp, #20
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	08003ddc 	.word	0x08003ddc
 8002e70:	08003de4 	.word	0x08003de4

08002e74 <std>:
 8002e74:	2300      	movs	r3, #0
 8002e76:	b510      	push	{r4, lr}
 8002e78:	0004      	movs	r4, r0
 8002e7a:	6003      	str	r3, [r0, #0]
 8002e7c:	6043      	str	r3, [r0, #4]
 8002e7e:	6083      	str	r3, [r0, #8]
 8002e80:	8181      	strh	r1, [r0, #12]
 8002e82:	6643      	str	r3, [r0, #100]	; 0x64
 8002e84:	81c2      	strh	r2, [r0, #14]
 8002e86:	6103      	str	r3, [r0, #16]
 8002e88:	6143      	str	r3, [r0, #20]
 8002e8a:	6183      	str	r3, [r0, #24]
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	2208      	movs	r2, #8
 8002e90:	305c      	adds	r0, #92	; 0x5c
 8002e92:	f000 f90f 	bl	80030b4 <memset>
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <std+0x50>)
 8002e98:	6224      	str	r4, [r4, #32]
 8002e9a:	6263      	str	r3, [r4, #36]	; 0x24
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <std+0x54>)
 8002e9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <std+0x58>)
 8002ea2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <std+0x5c>)
 8002ea6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <std+0x60>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d005      	beq.n	8002eba <std+0x46>
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <std+0x64>)
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	d002      	beq.n	8002eba <std+0x46>
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <std+0x68>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d103      	bne.n	8002ec2 <std+0x4e>
 8002eba:	0020      	movs	r0, r4
 8002ebc:	3058      	adds	r0, #88	; 0x58
 8002ebe:	f000 f979 	bl	80031b4 <__retarget_lock_init_recursive>
 8002ec2:	bd10      	pop	{r4, pc}
 8002ec4:	0800301d 	.word	0x0800301d
 8002ec8:	08003045 	.word	0x08003045
 8002ecc:	0800307d 	.word	0x0800307d
 8002ed0:	080030a9 	.word	0x080030a9
 8002ed4:	20000170 	.word	0x20000170
 8002ed8:	200001d8 	.word	0x200001d8
 8002edc:	20000240 	.word	0x20000240

08002ee0 <stdio_exit_handler>:
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <stdio_exit_handler+0x10>)
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <stdio_exit_handler+0x14>)
 8002ee6:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <stdio_exit_handler+0x18>)
 8002ee8:	f000 f86c 	bl	8002fc4 <_fwalk_sglue>
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	2000000c 	.word	0x2000000c
 8002ef4:	08003a55 	.word	0x08003a55
 8002ef8:	20000018 	.word	0x20000018

08002efc <cleanup_stdio>:
 8002efc:	6841      	ldr	r1, [r0, #4]
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <cleanup_stdio+0x30>)
 8002f00:	b510      	push	{r4, lr}
 8002f02:	0004      	movs	r4, r0
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d001      	beq.n	8002f0c <cleanup_stdio+0x10>
 8002f08:	f000 fda4 	bl	8003a54 <_fflush_r>
 8002f0c:	68a1      	ldr	r1, [r4, #8]
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <cleanup_stdio+0x34>)
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <cleanup_stdio+0x1e>
 8002f14:	0020      	movs	r0, r4
 8002f16:	f000 fd9d 	bl	8003a54 <_fflush_r>
 8002f1a:	68e1      	ldr	r1, [r4, #12]
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <cleanup_stdio+0x38>)
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	d002      	beq.n	8002f28 <cleanup_stdio+0x2c>
 8002f22:	0020      	movs	r0, r4
 8002f24:	f000 fd96 	bl	8003a54 <_fflush_r>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	20000170 	.word	0x20000170
 8002f30:	200001d8 	.word	0x200001d8
 8002f34:	20000240 	.word	0x20000240

08002f38 <global_stdio_init.part.0>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <global_stdio_init.part.0+0x28>)
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <global_stdio_init.part.0+0x2c>)
 8002f3e:	2104      	movs	r1, #4
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4809      	ldr	r0, [pc, #36]	; (8002f68 <global_stdio_init.part.0+0x30>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	f7ff ff95 	bl	8002e74 <std>
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2109      	movs	r1, #9
 8002f4e:	4807      	ldr	r0, [pc, #28]	; (8002f6c <global_stdio_init.part.0+0x34>)
 8002f50:	f7ff ff90 	bl	8002e74 <std>
 8002f54:	2202      	movs	r2, #2
 8002f56:	2112      	movs	r1, #18
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <global_stdio_init.part.0+0x38>)
 8002f5a:	f7ff ff8b 	bl	8002e74 <std>
 8002f5e:	bd10      	pop	{r4, pc}
 8002f60:	200002a8 	.word	0x200002a8
 8002f64:	08002ee1 	.word	0x08002ee1
 8002f68:	20000170 	.word	0x20000170
 8002f6c:	200001d8 	.word	0x200001d8
 8002f70:	20000240 	.word	0x20000240

08002f74 <__sfp_lock_acquire>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4802      	ldr	r0, [pc, #8]	; (8002f80 <__sfp_lock_acquire+0xc>)
 8002f78:	f000 f91d 	bl	80031b6 <__retarget_lock_acquire_recursive>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	200002b1 	.word	0x200002b1

08002f84 <__sfp_lock_release>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <__sfp_lock_release+0xc>)
 8002f88:	f000 f916 	bl	80031b8 <__retarget_lock_release_recursive>
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	200002b1 	.word	0x200002b1

08002f94 <__sinit>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	0004      	movs	r4, r0
 8002f98:	f7ff ffec 	bl	8002f74 <__sfp_lock_acquire>
 8002f9c:	6a23      	ldr	r3, [r4, #32]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <__sinit+0x14>
 8002fa2:	f7ff ffef 	bl	8002f84 <__sfp_lock_release>
 8002fa6:	bd10      	pop	{r4, pc}
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__sinit+0x28>)
 8002faa:	6223      	str	r3, [r4, #32]
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__sinit+0x2c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f6      	bne.n	8002fa2 <__sinit+0xe>
 8002fb4:	f7ff ffc0 	bl	8002f38 <global_stdio_init.part.0>
 8002fb8:	e7f3      	b.n	8002fa2 <__sinit+0xe>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	08002efd 	.word	0x08002efd
 8002fc0:	200002a8 	.word	0x200002a8

08002fc4 <_fwalk_sglue>:
 8002fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fc6:	0014      	movs	r4, r2
 8002fc8:	2600      	movs	r6, #0
 8002fca:	9000      	str	r0, [sp, #0]
 8002fcc:	9101      	str	r1, [sp, #4]
 8002fce:	68a5      	ldr	r5, [r4, #8]
 8002fd0:	6867      	ldr	r7, [r4, #4]
 8002fd2:	3f01      	subs	r7, #1
 8002fd4:	d504      	bpl.n	8002fe0 <_fwalk_sglue+0x1c>
 8002fd6:	6824      	ldr	r4, [r4, #0]
 8002fd8:	2c00      	cmp	r4, #0
 8002fda:	d1f8      	bne.n	8002fce <_fwalk_sglue+0xa>
 8002fdc:	0030      	movs	r0, r6
 8002fde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fe0:	89ab      	ldrh	r3, [r5, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d908      	bls.n	8002ff8 <_fwalk_sglue+0x34>
 8002fe6:	220e      	movs	r2, #14
 8002fe8:	5eab      	ldrsh	r3, [r5, r2]
 8002fea:	3301      	adds	r3, #1
 8002fec:	d004      	beq.n	8002ff8 <_fwalk_sglue+0x34>
 8002fee:	0029      	movs	r1, r5
 8002ff0:	9800      	ldr	r0, [sp, #0]
 8002ff2:	9b01      	ldr	r3, [sp, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	4306      	orrs	r6, r0
 8002ff8:	3568      	adds	r5, #104	; 0x68
 8002ffa:	e7ea      	b.n	8002fd2 <_fwalk_sglue+0xe>

08002ffc <iprintf>:
 8002ffc:	b40f      	push	{r0, r1, r2, r3}
 8002ffe:	b507      	push	{r0, r1, r2, lr}
 8003000:	4905      	ldr	r1, [pc, #20]	; (8003018 <iprintf+0x1c>)
 8003002:	ab04      	add	r3, sp, #16
 8003004:	6808      	ldr	r0, [r1, #0]
 8003006:	cb04      	ldmia	r3!, {r2}
 8003008:	6881      	ldr	r1, [r0, #8]
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	f000 f9fc 	bl	8003408 <_vfiprintf_r>
 8003010:	b003      	add	sp, #12
 8003012:	bc08      	pop	{r3}
 8003014:	b004      	add	sp, #16
 8003016:	4718      	bx	r3
 8003018:	20000064 	.word	0x20000064

0800301c <__sread>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	000c      	movs	r4, r1
 8003020:	250e      	movs	r5, #14
 8003022:	5f49      	ldrsh	r1, [r1, r5]
 8003024:	f000 f874 	bl	8003110 <_read_r>
 8003028:	2800      	cmp	r0, #0
 800302a:	db03      	blt.n	8003034 <__sread+0x18>
 800302c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800302e:	181b      	adds	r3, r3, r0
 8003030:	6563      	str	r3, [r4, #84]	; 0x54
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	4a02      	ldr	r2, [pc, #8]	; (8003040 <__sread+0x24>)
 8003038:	4013      	ands	r3, r2
 800303a:	81a3      	strh	r3, [r4, #12]
 800303c:	e7f9      	b.n	8003032 <__sread+0x16>
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	ffffefff 	.word	0xffffefff

08003044 <__swrite>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	001f      	movs	r7, r3
 8003048:	898b      	ldrh	r3, [r1, #12]
 800304a:	0005      	movs	r5, r0
 800304c:	000c      	movs	r4, r1
 800304e:	0016      	movs	r6, r2
 8003050:	05db      	lsls	r3, r3, #23
 8003052:	d505      	bpl.n	8003060 <__swrite+0x1c>
 8003054:	230e      	movs	r3, #14
 8003056:	5ec9      	ldrsh	r1, [r1, r3]
 8003058:	2200      	movs	r2, #0
 800305a:	2302      	movs	r3, #2
 800305c:	f000 f844 	bl	80030e8 <_lseek_r>
 8003060:	89a3      	ldrh	r3, [r4, #12]
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <__swrite+0x34>)
 8003064:	0028      	movs	r0, r5
 8003066:	4013      	ands	r3, r2
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	0032      	movs	r2, r6
 800306c:	230e      	movs	r3, #14
 800306e:	5ee1      	ldrsh	r1, [r4, r3]
 8003070:	003b      	movs	r3, r7
 8003072:	f000 f861 	bl	8003138 <_write_r>
 8003076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003078:	ffffefff 	.word	0xffffefff

0800307c <__sseek>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	000c      	movs	r4, r1
 8003080:	250e      	movs	r5, #14
 8003082:	5f49      	ldrsh	r1, [r1, r5]
 8003084:	f000 f830 	bl	80030e8 <_lseek_r>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	1c42      	adds	r2, r0, #1
 800308c:	d103      	bne.n	8003096 <__sseek+0x1a>
 800308e:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <__sseek+0x28>)
 8003090:	4013      	ands	r3, r2
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0152      	lsls	r2, r2, #5
 800309a:	4313      	orrs	r3, r2
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	6560      	str	r0, [r4, #84]	; 0x54
 80030a0:	e7f8      	b.n	8003094 <__sseek+0x18>
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	ffffefff 	.word	0xffffefff

080030a8 <__sclose>:
 80030a8:	b510      	push	{r4, lr}
 80030aa:	230e      	movs	r3, #14
 80030ac:	5ec9      	ldrsh	r1, [r1, r3]
 80030ae:	f000 f809 	bl	80030c4 <_close_r>
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <memset>:
 80030b4:	0003      	movs	r3, r0
 80030b6:	1882      	adds	r2, r0, r2
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d100      	bne.n	80030be <memset+0xa>
 80030bc:	4770      	bx	lr
 80030be:	7019      	strb	r1, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e7f9      	b.n	80030b8 <memset+0x4>

080030c4 <_close_r>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	4d06      	ldr	r5, [pc, #24]	; (80030e4 <_close_r+0x20>)
 80030ca:	0004      	movs	r4, r0
 80030cc:	0008      	movs	r0, r1
 80030ce:	602b      	str	r3, [r5, #0]
 80030d0:	f7fd fc34 	bl	800093c <_close>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d103      	bne.n	80030e0 <_close_r+0x1c>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d000      	beq.n	80030e0 <_close_r+0x1c>
 80030de:	6023      	str	r3, [r4, #0]
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	200002ac 	.word	0x200002ac

080030e8 <_lseek_r>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	0004      	movs	r4, r0
 80030ec:	0008      	movs	r0, r1
 80030ee:	0011      	movs	r1, r2
 80030f0:	001a      	movs	r2, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	4d05      	ldr	r5, [pc, #20]	; (800310c <_lseek_r+0x24>)
 80030f6:	602b      	str	r3, [r5, #0]
 80030f8:	f7fd fc41 	bl	800097e <_lseek>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d103      	bne.n	8003108 <_lseek_r+0x20>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d000      	beq.n	8003108 <_lseek_r+0x20>
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	bd70      	pop	{r4, r5, r6, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	200002ac 	.word	0x200002ac

08003110 <_read_r>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	0004      	movs	r4, r0
 8003114:	0008      	movs	r0, r1
 8003116:	0011      	movs	r1, r2
 8003118:	001a      	movs	r2, r3
 800311a:	2300      	movs	r3, #0
 800311c:	4d05      	ldr	r5, [pc, #20]	; (8003134 <_read_r+0x24>)
 800311e:	602b      	str	r3, [r5, #0]
 8003120:	f7fd fbef 	bl	8000902 <_read>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d103      	bne.n	8003130 <_read_r+0x20>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <_read_r+0x20>
 800312e:	6023      	str	r3, [r4, #0]
 8003130:	bd70      	pop	{r4, r5, r6, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	200002ac 	.word	0x200002ac

08003138 <_write_r>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	0004      	movs	r4, r0
 800313c:	0008      	movs	r0, r1
 800313e:	0011      	movs	r1, r2
 8003140:	001a      	movs	r2, r3
 8003142:	2300      	movs	r3, #0
 8003144:	4d05      	ldr	r5, [pc, #20]	; (800315c <_write_r+0x24>)
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	f7fd f95a 	bl	8000400 <_write>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d103      	bne.n	8003158 <_write_r+0x20>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d000      	beq.n	8003158 <_write_r+0x20>
 8003156:	6023      	str	r3, [r4, #0]
 8003158:	bd70      	pop	{r4, r5, r6, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	200002ac 	.word	0x200002ac

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000064 	.word	0x20000064

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2600      	movs	r6, #0
 8003170:	4c0c      	ldr	r4, [pc, #48]	; (80031a4 <__libc_init_array+0x38>)
 8003172:	4d0d      	ldr	r5, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	2600      	movs	r6, #0
 800317e:	f000 fde3 	bl	8003d48 <_init>
 8003182:	4c0a      	ldr	r4, [pc, #40]	; (80031ac <__libc_init_array+0x40>)
 8003184:	4d0a      	ldr	r5, [pc, #40]	; (80031b0 <__libc_init_array+0x44>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	00b3      	lsls	r3, r6, #2
 8003192:	58eb      	ldr	r3, [r5, r3]
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	00b3      	lsls	r3, r6, #2
 800319c:	58eb      	ldr	r3, [r5, r3]
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08003e20 	.word	0x08003e20
 80031a8:	08003e20 	.word	0x08003e20
 80031ac:	08003e24 	.word	0x08003e24
 80031b0:	08003e20 	.word	0x08003e20

080031b4 <__retarget_lock_init_recursive>:
 80031b4:	4770      	bx	lr

080031b6 <__retarget_lock_acquire_recursive>:
 80031b6:	4770      	bx	lr

080031b8 <__retarget_lock_release_recursive>:
 80031b8:	4770      	bx	lr
	...

080031bc <_free_r>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	0005      	movs	r5, r0
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d010      	beq.n	80031e6 <_free_r+0x2a>
 80031c4:	1f0c      	subs	r4, r1, #4
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <_free_r+0x12>
 80031cc:	18e4      	adds	r4, r4, r3
 80031ce:	0028      	movs	r0, r5
 80031d0:	f000 f8e2 	bl	8003398 <__malloc_lock>
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <_free_r+0x90>)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <_free_r+0x2c>
 80031dc:	6063      	str	r3, [r4, #4]
 80031de:	6014      	str	r4, [r2, #0]
 80031e0:	0028      	movs	r0, r5
 80031e2:	f000 f8e1 	bl	80033a8 <__malloc_unlock>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	42a3      	cmp	r3, r4
 80031ea:	d908      	bls.n	80031fe <_free_r+0x42>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	1821      	adds	r1, r4, r0
 80031f0:	428b      	cmp	r3, r1
 80031f2:	d1f3      	bne.n	80031dc <_free_r+0x20>
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	1809      	adds	r1, r1, r0
 80031fa:	6021      	str	r1, [r4, #0]
 80031fc:	e7ee      	b.n	80031dc <_free_r+0x20>
 80031fe:	001a      	movs	r2, r3
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <_free_r+0x4e>
 8003206:	42a3      	cmp	r3, r4
 8003208:	d9f9      	bls.n	80031fe <_free_r+0x42>
 800320a:	6811      	ldr	r1, [r2, #0]
 800320c:	1850      	adds	r0, r2, r1
 800320e:	42a0      	cmp	r0, r4
 8003210:	d10b      	bne.n	800322a <_free_r+0x6e>
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	1809      	adds	r1, r1, r0
 8003216:	1850      	adds	r0, r2, r1
 8003218:	6011      	str	r1, [r2, #0]
 800321a:	4283      	cmp	r3, r0
 800321c:	d1e0      	bne.n	80031e0 <_free_r+0x24>
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	1841      	adds	r1, r0, r1
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e7da      	b.n	80031e0 <_free_r+0x24>
 800322a:	42a0      	cmp	r0, r4
 800322c:	d902      	bls.n	8003234 <_free_r+0x78>
 800322e:	230c      	movs	r3, #12
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	e7d5      	b.n	80031e0 <_free_r+0x24>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	1821      	adds	r1, r4, r0
 8003238:	428b      	cmp	r3, r1
 800323a:	d103      	bne.n	8003244 <_free_r+0x88>
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1809      	adds	r1, r1, r0
 8003242:	6021      	str	r1, [r4, #0]
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	6054      	str	r4, [r2, #4]
 8003248:	e7ca      	b.n	80031e0 <_free_r+0x24>
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	200002b4 	.word	0x200002b4

08003250 <sbrk_aligned>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	4e0f      	ldr	r6, [pc, #60]	; (8003290 <sbrk_aligned+0x40>)
 8003254:	000d      	movs	r5, r1
 8003256:	6831      	ldr	r1, [r6, #0]
 8003258:	0004      	movs	r4, r0
 800325a:	2900      	cmp	r1, #0
 800325c:	d102      	bne.n	8003264 <sbrk_aligned+0x14>
 800325e:	f000 fccb 	bl	8003bf8 <_sbrk_r>
 8003262:	6030      	str	r0, [r6, #0]
 8003264:	0029      	movs	r1, r5
 8003266:	0020      	movs	r0, r4
 8003268:	f000 fcc6 	bl	8003bf8 <_sbrk_r>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d00a      	beq.n	8003286 <sbrk_aligned+0x36>
 8003270:	2303      	movs	r3, #3
 8003272:	1cc5      	adds	r5, r0, #3
 8003274:	439d      	bics	r5, r3
 8003276:	42a8      	cmp	r0, r5
 8003278:	d007      	beq.n	800328a <sbrk_aligned+0x3a>
 800327a:	1a29      	subs	r1, r5, r0
 800327c:	0020      	movs	r0, r4
 800327e:	f000 fcbb 	bl	8003bf8 <_sbrk_r>
 8003282:	3001      	adds	r0, #1
 8003284:	d101      	bne.n	800328a <sbrk_aligned+0x3a>
 8003286:	2501      	movs	r5, #1
 8003288:	426d      	negs	r5, r5
 800328a:	0028      	movs	r0, r5
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	200002b8 	.word	0x200002b8

08003294 <_malloc_r>:
 8003294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003296:	2203      	movs	r2, #3
 8003298:	1ccb      	adds	r3, r1, #3
 800329a:	4393      	bics	r3, r2
 800329c:	3308      	adds	r3, #8
 800329e:	0006      	movs	r6, r0
 80032a0:	001f      	movs	r7, r3
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d238      	bcs.n	8003318 <_malloc_r+0x84>
 80032a6:	270c      	movs	r7, #12
 80032a8:	42b9      	cmp	r1, r7
 80032aa:	d837      	bhi.n	800331c <_malloc_r+0x88>
 80032ac:	0030      	movs	r0, r6
 80032ae:	f000 f873 	bl	8003398 <__malloc_lock>
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <_malloc_r+0x100>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	001c      	movs	r4, r3
 80032ba:	2c00      	cmp	r4, #0
 80032bc:	d133      	bne.n	8003326 <_malloc_r+0x92>
 80032be:	0039      	movs	r1, r7
 80032c0:	0030      	movs	r0, r6
 80032c2:	f7ff ffc5 	bl	8003250 <sbrk_aligned>
 80032c6:	0004      	movs	r4, r0
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d15e      	bne.n	800338a <_malloc_r+0xf6>
 80032cc:	9b00      	ldr	r3, [sp, #0]
 80032ce:	681c      	ldr	r4, [r3, #0]
 80032d0:	0025      	movs	r5, r4
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	d14e      	bne.n	8003374 <_malloc_r+0xe0>
 80032d6:	2c00      	cmp	r4, #0
 80032d8:	d051      	beq.n	800337e <_malloc_r+0xea>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	0029      	movs	r1, r5
 80032de:	18e3      	adds	r3, r4, r3
 80032e0:	0030      	movs	r0, r6
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	f000 fc88 	bl	8003bf8 <_sbrk_r>
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	4283      	cmp	r3, r0
 80032ec:	d147      	bne.n	800337e <_malloc_r+0xea>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	0030      	movs	r0, r6
 80032f2:	1aff      	subs	r7, r7, r3
 80032f4:	0039      	movs	r1, r7
 80032f6:	f7ff ffab 	bl	8003250 <sbrk_aligned>
 80032fa:	3001      	adds	r0, #1
 80032fc:	d03f      	beq.n	800337e <_malloc_r+0xea>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	19db      	adds	r3, r3, r7
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	9b00      	ldr	r3, [sp, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d040      	beq.n	800338e <_malloc_r+0xfa>
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	42a2      	cmp	r2, r4
 8003310:	d133      	bne.n	800337a <_malloc_r+0xe6>
 8003312:	2200      	movs	r2, #0
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e014      	b.n	8003342 <_malloc_r+0xae>
 8003318:	2b00      	cmp	r3, #0
 800331a:	dac5      	bge.n	80032a8 <_malloc_r+0x14>
 800331c:	230c      	movs	r3, #12
 800331e:	2500      	movs	r5, #0
 8003320:	6033      	str	r3, [r6, #0]
 8003322:	0028      	movs	r0, r5
 8003324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003326:	6821      	ldr	r1, [r4, #0]
 8003328:	1bc9      	subs	r1, r1, r7
 800332a:	d420      	bmi.n	800336e <_malloc_r+0xda>
 800332c:	290b      	cmp	r1, #11
 800332e:	d918      	bls.n	8003362 <_malloc_r+0xce>
 8003330:	19e2      	adds	r2, r4, r7
 8003332:	6027      	str	r7, [r4, #0]
 8003334:	42a3      	cmp	r3, r4
 8003336:	d112      	bne.n	800335e <_malloc_r+0xca>
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	6011      	str	r1, [r2, #0]
 8003340:	6053      	str	r3, [r2, #4]
 8003342:	0030      	movs	r0, r6
 8003344:	0025      	movs	r5, r4
 8003346:	f000 f82f 	bl	80033a8 <__malloc_unlock>
 800334a:	2207      	movs	r2, #7
 800334c:	350b      	adds	r5, #11
 800334e:	1d23      	adds	r3, r4, #4
 8003350:	4395      	bics	r5, r2
 8003352:	1aea      	subs	r2, r5, r3
 8003354:	429d      	cmp	r5, r3
 8003356:	d0e4      	beq.n	8003322 <_malloc_r+0x8e>
 8003358:	1b5b      	subs	r3, r3, r5
 800335a:	50a3      	str	r3, [r4, r2]
 800335c:	e7e1      	b.n	8003322 <_malloc_r+0x8e>
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	e7ec      	b.n	800333c <_malloc_r+0xa8>
 8003362:	6862      	ldr	r2, [r4, #4]
 8003364:	42a3      	cmp	r3, r4
 8003366:	d1d5      	bne.n	8003314 <_malloc_r+0x80>
 8003368:	9b00      	ldr	r3, [sp, #0]
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e7e9      	b.n	8003342 <_malloc_r+0xae>
 800336e:	0023      	movs	r3, r4
 8003370:	6864      	ldr	r4, [r4, #4]
 8003372:	e7a2      	b.n	80032ba <_malloc_r+0x26>
 8003374:	002c      	movs	r4, r5
 8003376:	686d      	ldr	r5, [r5, #4]
 8003378:	e7ab      	b.n	80032d2 <_malloc_r+0x3e>
 800337a:	0013      	movs	r3, r2
 800337c:	e7c4      	b.n	8003308 <_malloc_r+0x74>
 800337e:	230c      	movs	r3, #12
 8003380:	0030      	movs	r0, r6
 8003382:	6033      	str	r3, [r6, #0]
 8003384:	f000 f810 	bl	80033a8 <__malloc_unlock>
 8003388:	e7cb      	b.n	8003322 <_malloc_r+0x8e>
 800338a:	6027      	str	r7, [r4, #0]
 800338c:	e7d9      	b.n	8003342 <_malloc_r+0xae>
 800338e:	605b      	str	r3, [r3, #4]
 8003390:	deff      	udf	#255	; 0xff
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	200002b4 	.word	0x200002b4

08003398 <__malloc_lock>:
 8003398:	b510      	push	{r4, lr}
 800339a:	4802      	ldr	r0, [pc, #8]	; (80033a4 <__malloc_lock+0xc>)
 800339c:	f7ff ff0b 	bl	80031b6 <__retarget_lock_acquire_recursive>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	200002b0 	.word	0x200002b0

080033a8 <__malloc_unlock>:
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4802      	ldr	r0, [pc, #8]	; (80033b4 <__malloc_unlock+0xc>)
 80033ac:	f7ff ff04 	bl	80031b8 <__retarget_lock_release_recursive>
 80033b0:	bd10      	pop	{r4, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	200002b0 	.word	0x200002b0

080033b8 <__sfputc_r>:
 80033b8:	6893      	ldr	r3, [r2, #8]
 80033ba:	b510      	push	{r4, lr}
 80033bc:	3b01      	subs	r3, #1
 80033be:	6093      	str	r3, [r2, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da04      	bge.n	80033ce <__sfputc_r+0x16>
 80033c4:	6994      	ldr	r4, [r2, #24]
 80033c6:	42a3      	cmp	r3, r4
 80033c8:	db07      	blt.n	80033da <__sfputc_r+0x22>
 80033ca:	290a      	cmp	r1, #10
 80033cc:	d005      	beq.n	80033da <__sfputc_r+0x22>
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	1c58      	adds	r0, r3, #1
 80033d2:	6010      	str	r0, [r2, #0]
 80033d4:	7019      	strb	r1, [r3, #0]
 80033d6:	0008      	movs	r0, r1
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	f000 fb66 	bl	8003aaa <__swbuf_r>
 80033de:	0001      	movs	r1, r0
 80033e0:	e7f9      	b.n	80033d6 <__sfputc_r+0x1e>

080033e2 <__sfputs_r>:
 80033e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e4:	0006      	movs	r6, r0
 80033e6:	000f      	movs	r7, r1
 80033e8:	0014      	movs	r4, r2
 80033ea:	18d5      	adds	r5, r2, r3
 80033ec:	42ac      	cmp	r4, r5
 80033ee:	d101      	bne.n	80033f4 <__sfputs_r+0x12>
 80033f0:	2000      	movs	r0, #0
 80033f2:	e007      	b.n	8003404 <__sfputs_r+0x22>
 80033f4:	7821      	ldrb	r1, [r4, #0]
 80033f6:	003a      	movs	r2, r7
 80033f8:	0030      	movs	r0, r6
 80033fa:	f7ff ffdd 	bl	80033b8 <__sfputc_r>
 80033fe:	3401      	adds	r4, #1
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d1f3      	bne.n	80033ec <__sfputs_r+0xa>
 8003404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003408 <_vfiprintf_r>:
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	b0a1      	sub	sp, #132	; 0x84
 800340c:	000f      	movs	r7, r1
 800340e:	0015      	movs	r5, r2
 8003410:	001e      	movs	r6, r3
 8003412:	9003      	str	r0, [sp, #12]
 8003414:	2800      	cmp	r0, #0
 8003416:	d004      	beq.n	8003422 <_vfiprintf_r+0x1a>
 8003418:	6a03      	ldr	r3, [r0, #32]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <_vfiprintf_r+0x1a>
 800341e:	f7ff fdb9 	bl	8002f94 <__sinit>
 8003422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d405      	bmi.n	8003434 <_vfiprintf_r+0x2c>
 8003428:	89bb      	ldrh	r3, [r7, #12]
 800342a:	059b      	lsls	r3, r3, #22
 800342c:	d402      	bmi.n	8003434 <_vfiprintf_r+0x2c>
 800342e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003430:	f7ff fec1 	bl	80031b6 <__retarget_lock_acquire_recursive>
 8003434:	89bb      	ldrh	r3, [r7, #12]
 8003436:	071b      	lsls	r3, r3, #28
 8003438:	d502      	bpl.n	8003440 <_vfiprintf_r+0x38>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <_vfiprintf_r+0x60>
 8003440:	0039      	movs	r1, r7
 8003442:	9803      	ldr	r0, [sp, #12]
 8003444:	f000 fb74 	bl	8003b30 <__swsetup_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	d00d      	beq.n	8003468 <_vfiprintf_r+0x60>
 800344c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344e:	07db      	lsls	r3, r3, #31
 8003450:	d503      	bpl.n	800345a <_vfiprintf_r+0x52>
 8003452:	2001      	movs	r0, #1
 8003454:	4240      	negs	r0, r0
 8003456:	b021      	add	sp, #132	; 0x84
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	89bb      	ldrh	r3, [r7, #12]
 800345c:	059b      	lsls	r3, r3, #22
 800345e:	d4f8      	bmi.n	8003452 <_vfiprintf_r+0x4a>
 8003460:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003462:	f7ff fea9 	bl	80031b8 <__retarget_lock_release_recursive>
 8003466:	e7f4      	b.n	8003452 <_vfiprintf_r+0x4a>
 8003468:	2300      	movs	r3, #0
 800346a:	ac08      	add	r4, sp, #32
 800346c:	6163      	str	r3, [r4, #20]
 800346e:	3320      	adds	r3, #32
 8003470:	7663      	strb	r3, [r4, #25]
 8003472:	3310      	adds	r3, #16
 8003474:	76a3      	strb	r3, [r4, #26]
 8003476:	9607      	str	r6, [sp, #28]
 8003478:	002e      	movs	r6, r5
 800347a:	7833      	ldrb	r3, [r6, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <_vfiprintf_r+0x7c>
 8003480:	2b25      	cmp	r3, #37	; 0x25
 8003482:	d148      	bne.n	8003516 <_vfiprintf_r+0x10e>
 8003484:	1b73      	subs	r3, r6, r5
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	42ae      	cmp	r6, r5
 800348a:	d00b      	beq.n	80034a4 <_vfiprintf_r+0x9c>
 800348c:	002a      	movs	r2, r5
 800348e:	0039      	movs	r1, r7
 8003490:	9803      	ldr	r0, [sp, #12]
 8003492:	f7ff ffa6 	bl	80033e2 <__sfputs_r>
 8003496:	3001      	adds	r0, #1
 8003498:	d100      	bne.n	800349c <_vfiprintf_r+0x94>
 800349a:	e0af      	b.n	80035fc <_vfiprintf_r+0x1f4>
 800349c:	6963      	ldr	r3, [r4, #20]
 800349e:	9a05      	ldr	r2, [sp, #20]
 80034a0:	189b      	adds	r3, r3, r2
 80034a2:	6163      	str	r3, [r4, #20]
 80034a4:	7833      	ldrb	r3, [r6, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d100      	bne.n	80034ac <_vfiprintf_r+0xa4>
 80034aa:	e0a7      	b.n	80035fc <_vfiprintf_r+0x1f4>
 80034ac:	2201      	movs	r2, #1
 80034ae:	2300      	movs	r3, #0
 80034b0:	4252      	negs	r2, r2
 80034b2:	6062      	str	r2, [r4, #4]
 80034b4:	a904      	add	r1, sp, #16
 80034b6:	3254      	adds	r2, #84	; 0x54
 80034b8:	1852      	adds	r2, r2, r1
 80034ba:	1c75      	adds	r5, r6, #1
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	60e3      	str	r3, [r4, #12]
 80034c0:	60a3      	str	r3, [r4, #8]
 80034c2:	7013      	strb	r3, [r2, #0]
 80034c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80034c6:	4b59      	ldr	r3, [pc, #356]	; (800362c <_vfiprintf_r+0x224>)
 80034c8:	2205      	movs	r2, #5
 80034ca:	0018      	movs	r0, r3
 80034cc:	7829      	ldrb	r1, [r5, #0]
 80034ce:	9305      	str	r3, [sp, #20]
 80034d0:	f000 fba4 	bl	8003c1c <memchr>
 80034d4:	1c6e      	adds	r6, r5, #1
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d11f      	bne.n	800351a <_vfiprintf_r+0x112>
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	06d3      	lsls	r3, r2, #27
 80034de:	d504      	bpl.n	80034ea <_vfiprintf_r+0xe2>
 80034e0:	2353      	movs	r3, #83	; 0x53
 80034e2:	a904      	add	r1, sp, #16
 80034e4:	185b      	adds	r3, r3, r1
 80034e6:	2120      	movs	r1, #32
 80034e8:	7019      	strb	r1, [r3, #0]
 80034ea:	0713      	lsls	r3, r2, #28
 80034ec:	d504      	bpl.n	80034f8 <_vfiprintf_r+0xf0>
 80034ee:	2353      	movs	r3, #83	; 0x53
 80034f0:	a904      	add	r1, sp, #16
 80034f2:	185b      	adds	r3, r3, r1
 80034f4:	212b      	movs	r1, #43	; 0x2b
 80034f6:	7019      	strb	r1, [r3, #0]
 80034f8:	782b      	ldrb	r3, [r5, #0]
 80034fa:	2b2a      	cmp	r3, #42	; 0x2a
 80034fc:	d016      	beq.n	800352c <_vfiprintf_r+0x124>
 80034fe:	002e      	movs	r6, r5
 8003500:	2100      	movs	r1, #0
 8003502:	200a      	movs	r0, #10
 8003504:	68e3      	ldr	r3, [r4, #12]
 8003506:	7832      	ldrb	r2, [r6, #0]
 8003508:	1c75      	adds	r5, r6, #1
 800350a:	3a30      	subs	r2, #48	; 0x30
 800350c:	2a09      	cmp	r2, #9
 800350e:	d94e      	bls.n	80035ae <_vfiprintf_r+0x1a6>
 8003510:	2900      	cmp	r1, #0
 8003512:	d111      	bne.n	8003538 <_vfiprintf_r+0x130>
 8003514:	e017      	b.n	8003546 <_vfiprintf_r+0x13e>
 8003516:	3601      	adds	r6, #1
 8003518:	e7af      	b.n	800347a <_vfiprintf_r+0x72>
 800351a:	9b05      	ldr	r3, [sp, #20]
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	1ac0      	subs	r0, r0, r3
 8003520:	2301      	movs	r3, #1
 8003522:	4083      	lsls	r3, r0
 8003524:	4313      	orrs	r3, r2
 8003526:	0035      	movs	r5, r6
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	e7cc      	b.n	80034c6 <_vfiprintf_r+0xbe>
 800352c:	9b07      	ldr	r3, [sp, #28]
 800352e:	1d19      	adds	r1, r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	9107      	str	r1, [sp, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db01      	blt.n	800353c <_vfiprintf_r+0x134>
 8003538:	930b      	str	r3, [sp, #44]	; 0x2c
 800353a:	e004      	b.n	8003546 <_vfiprintf_r+0x13e>
 800353c:	425b      	negs	r3, r3
 800353e:	60e3      	str	r3, [r4, #12]
 8003540:	2302      	movs	r3, #2
 8003542:	4313      	orrs	r3, r2
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	7833      	ldrb	r3, [r6, #0]
 8003548:	2b2e      	cmp	r3, #46	; 0x2e
 800354a:	d10a      	bne.n	8003562 <_vfiprintf_r+0x15a>
 800354c:	7873      	ldrb	r3, [r6, #1]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d135      	bne.n	80035be <_vfiprintf_r+0x1b6>
 8003552:	9b07      	ldr	r3, [sp, #28]
 8003554:	3602      	adds	r6, #2
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	9207      	str	r2, [sp, #28]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db2b      	blt.n	80035b8 <_vfiprintf_r+0x1b0>
 8003560:	9309      	str	r3, [sp, #36]	; 0x24
 8003562:	4d33      	ldr	r5, [pc, #204]	; (8003630 <_vfiprintf_r+0x228>)
 8003564:	2203      	movs	r2, #3
 8003566:	0028      	movs	r0, r5
 8003568:	7831      	ldrb	r1, [r6, #0]
 800356a:	f000 fb57 	bl	8003c1c <memchr>
 800356e:	2800      	cmp	r0, #0
 8003570:	d006      	beq.n	8003580 <_vfiprintf_r+0x178>
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	1b40      	subs	r0, r0, r5
 8003576:	4083      	lsls	r3, r0
 8003578:	6822      	ldr	r2, [r4, #0]
 800357a:	3601      	adds	r6, #1
 800357c:	4313      	orrs	r3, r2
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	7831      	ldrb	r1, [r6, #0]
 8003582:	2206      	movs	r2, #6
 8003584:	482b      	ldr	r0, [pc, #172]	; (8003634 <_vfiprintf_r+0x22c>)
 8003586:	1c75      	adds	r5, r6, #1
 8003588:	7621      	strb	r1, [r4, #24]
 800358a:	f000 fb47 	bl	8003c1c <memchr>
 800358e:	2800      	cmp	r0, #0
 8003590:	d043      	beq.n	800361a <_vfiprintf_r+0x212>
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <_vfiprintf_r+0x230>)
 8003594:	2b00      	cmp	r3, #0
 8003596:	d125      	bne.n	80035e4 <_vfiprintf_r+0x1dc>
 8003598:	2207      	movs	r2, #7
 800359a:	9b07      	ldr	r3, [sp, #28]
 800359c:	3307      	adds	r3, #7
 800359e:	4393      	bics	r3, r2
 80035a0:	3308      	adds	r3, #8
 80035a2:	9307      	str	r3, [sp, #28]
 80035a4:	6963      	ldr	r3, [r4, #20]
 80035a6:	9a04      	ldr	r2, [sp, #16]
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	6163      	str	r3, [r4, #20]
 80035ac:	e764      	b.n	8003478 <_vfiprintf_r+0x70>
 80035ae:	4343      	muls	r3, r0
 80035b0:	002e      	movs	r6, r5
 80035b2:	2101      	movs	r1, #1
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	e7a6      	b.n	8003506 <_vfiprintf_r+0xfe>
 80035b8:	2301      	movs	r3, #1
 80035ba:	425b      	negs	r3, r3
 80035bc:	e7d0      	b.n	8003560 <_vfiprintf_r+0x158>
 80035be:	2300      	movs	r3, #0
 80035c0:	200a      	movs	r0, #10
 80035c2:	001a      	movs	r2, r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	7831      	ldrb	r1, [r6, #0]
 80035ca:	1c75      	adds	r5, r6, #1
 80035cc:	3930      	subs	r1, #48	; 0x30
 80035ce:	2909      	cmp	r1, #9
 80035d0:	d903      	bls.n	80035da <_vfiprintf_r+0x1d2>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0c5      	beq.n	8003562 <_vfiprintf_r+0x15a>
 80035d6:	9209      	str	r2, [sp, #36]	; 0x24
 80035d8:	e7c3      	b.n	8003562 <_vfiprintf_r+0x15a>
 80035da:	4342      	muls	r2, r0
 80035dc:	002e      	movs	r6, r5
 80035de:	2301      	movs	r3, #1
 80035e0:	1852      	adds	r2, r2, r1
 80035e2:	e7f1      	b.n	80035c8 <_vfiprintf_r+0x1c0>
 80035e4:	aa07      	add	r2, sp, #28
 80035e6:	9200      	str	r2, [sp, #0]
 80035e8:	0021      	movs	r1, r4
 80035ea:	003a      	movs	r2, r7
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <_vfiprintf_r+0x234>)
 80035ee:	9803      	ldr	r0, [sp, #12]
 80035f0:	e000      	b.n	80035f4 <_vfiprintf_r+0x1ec>
 80035f2:	bf00      	nop
 80035f4:	9004      	str	r0, [sp, #16]
 80035f6:	9b04      	ldr	r3, [sp, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	d1d3      	bne.n	80035a4 <_vfiprintf_r+0x19c>
 80035fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fe:	07db      	lsls	r3, r3, #31
 8003600:	d405      	bmi.n	800360e <_vfiprintf_r+0x206>
 8003602:	89bb      	ldrh	r3, [r7, #12]
 8003604:	059b      	lsls	r3, r3, #22
 8003606:	d402      	bmi.n	800360e <_vfiprintf_r+0x206>
 8003608:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800360a:	f7ff fdd5 	bl	80031b8 <__retarget_lock_release_recursive>
 800360e:	89bb      	ldrh	r3, [r7, #12]
 8003610:	065b      	lsls	r3, r3, #25
 8003612:	d500      	bpl.n	8003616 <_vfiprintf_r+0x20e>
 8003614:	e71d      	b.n	8003452 <_vfiprintf_r+0x4a>
 8003616:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003618:	e71d      	b.n	8003456 <_vfiprintf_r+0x4e>
 800361a:	aa07      	add	r2, sp, #28
 800361c:	9200      	str	r2, [sp, #0]
 800361e:	0021      	movs	r1, r4
 8003620:	003a      	movs	r2, r7
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <_vfiprintf_r+0x234>)
 8003624:	9803      	ldr	r0, [sp, #12]
 8003626:	f000 f87b 	bl	8003720 <_printf_i>
 800362a:	e7e3      	b.n	80035f4 <_vfiprintf_r+0x1ec>
 800362c:	08003dec 	.word	0x08003dec
 8003630:	08003df2 	.word	0x08003df2
 8003634:	08003df6 	.word	0x08003df6
 8003638:	00000000 	.word	0x00000000
 800363c:	080033e3 	.word	0x080033e3

08003640 <_printf_common>:
 8003640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003642:	0016      	movs	r6, r2
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	688a      	ldr	r2, [r1, #8]
 8003648:	690b      	ldr	r3, [r1, #16]
 800364a:	000c      	movs	r4, r1
 800364c:	9000      	str	r0, [sp, #0]
 800364e:	4293      	cmp	r3, r2
 8003650:	da00      	bge.n	8003654 <_printf_common+0x14>
 8003652:	0013      	movs	r3, r2
 8003654:	0022      	movs	r2, r4
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	3243      	adds	r2, #67	; 0x43
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	2a00      	cmp	r2, #0
 800365e:	d001      	beq.n	8003664 <_printf_common+0x24>
 8003660:	3301      	adds	r3, #1
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	069b      	lsls	r3, r3, #26
 8003668:	d502      	bpl.n	8003670 <_printf_common+0x30>
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	3302      	adds	r3, #2
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	6822      	ldr	r2, [r4, #0]
 8003672:	2306      	movs	r3, #6
 8003674:	0015      	movs	r5, r2
 8003676:	401d      	ands	r5, r3
 8003678:	421a      	tst	r2, r3
 800367a:	d027      	beq.n	80036cc <_printf_common+0x8c>
 800367c:	0023      	movs	r3, r4
 800367e:	3343      	adds	r3, #67	; 0x43
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	4193      	sbcs	r3, r2
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	0692      	lsls	r2, r2, #26
 800368a:	d430      	bmi.n	80036ee <_printf_common+0xae>
 800368c:	0022      	movs	r2, r4
 800368e:	9901      	ldr	r1, [sp, #4]
 8003690:	9800      	ldr	r0, [sp, #0]
 8003692:	9d08      	ldr	r5, [sp, #32]
 8003694:	3243      	adds	r2, #67	; 0x43
 8003696:	47a8      	blx	r5
 8003698:	3001      	adds	r0, #1
 800369a:	d025      	beq.n	80036e8 <_printf_common+0xa8>
 800369c:	2206      	movs	r2, #6
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	2500      	movs	r5, #0
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d105      	bne.n	80036b4 <_printf_common+0x74>
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	68e5      	ldr	r5, [r4, #12]
 80036ac:	1aed      	subs	r5, r5, r3
 80036ae:	43eb      	mvns	r3, r5
 80036b0:	17db      	asrs	r3, r3, #31
 80036b2:	401d      	ands	r5, r3
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	6922      	ldr	r2, [r4, #16]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	dd01      	ble.n	80036c0 <_printf_common+0x80>
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	18ed      	adds	r5, r5, r3
 80036c0:	2600      	movs	r6, #0
 80036c2:	42b5      	cmp	r5, r6
 80036c4:	d120      	bne.n	8003708 <_printf_common+0xc8>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e010      	b.n	80036ec <_printf_common+0xac>
 80036ca:	3501      	adds	r5, #1
 80036cc:	68e3      	ldr	r3, [r4, #12]
 80036ce:	6832      	ldr	r2, [r6, #0]
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	42ab      	cmp	r3, r5
 80036d4:	ddd2      	ble.n	800367c <_printf_common+0x3c>
 80036d6:	0022      	movs	r2, r4
 80036d8:	2301      	movs	r3, #1
 80036da:	9901      	ldr	r1, [sp, #4]
 80036dc:	9800      	ldr	r0, [sp, #0]
 80036de:	9f08      	ldr	r7, [sp, #32]
 80036e0:	3219      	adds	r2, #25
 80036e2:	47b8      	blx	r7
 80036e4:	3001      	adds	r0, #1
 80036e6:	d1f0      	bne.n	80036ca <_printf_common+0x8a>
 80036e8:	2001      	movs	r0, #1
 80036ea:	4240      	negs	r0, r0
 80036ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036ee:	2030      	movs	r0, #48	; 0x30
 80036f0:	18e1      	adds	r1, r4, r3
 80036f2:	3143      	adds	r1, #67	; 0x43
 80036f4:	7008      	strb	r0, [r1, #0]
 80036f6:	0021      	movs	r1, r4
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	3145      	adds	r1, #69	; 0x45
 80036fc:	7809      	ldrb	r1, [r1, #0]
 80036fe:	18a2      	adds	r2, r4, r2
 8003700:	3243      	adds	r2, #67	; 0x43
 8003702:	3302      	adds	r3, #2
 8003704:	7011      	strb	r1, [r2, #0]
 8003706:	e7c1      	b.n	800368c <_printf_common+0x4c>
 8003708:	0022      	movs	r2, r4
 800370a:	2301      	movs	r3, #1
 800370c:	9901      	ldr	r1, [sp, #4]
 800370e:	9800      	ldr	r0, [sp, #0]
 8003710:	9f08      	ldr	r7, [sp, #32]
 8003712:	321a      	adds	r2, #26
 8003714:	47b8      	blx	r7
 8003716:	3001      	adds	r0, #1
 8003718:	d0e6      	beq.n	80036e8 <_printf_common+0xa8>
 800371a:	3601      	adds	r6, #1
 800371c:	e7d1      	b.n	80036c2 <_printf_common+0x82>
	...

08003720 <_printf_i>:
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	9206      	str	r2, [sp, #24]
 8003726:	000a      	movs	r2, r1
 8003728:	3243      	adds	r2, #67	; 0x43
 800372a:	9307      	str	r3, [sp, #28]
 800372c:	9005      	str	r0, [sp, #20]
 800372e:	9204      	str	r2, [sp, #16]
 8003730:	7e0a      	ldrb	r2, [r1, #24]
 8003732:	000c      	movs	r4, r1
 8003734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003736:	2a78      	cmp	r2, #120	; 0x78
 8003738:	d809      	bhi.n	800374e <_printf_i+0x2e>
 800373a:	2a62      	cmp	r2, #98	; 0x62
 800373c:	d80b      	bhi.n	8003756 <_printf_i+0x36>
 800373e:	2a00      	cmp	r2, #0
 8003740:	d100      	bne.n	8003744 <_printf_i+0x24>
 8003742:	e0be      	b.n	80038c2 <_printf_i+0x1a2>
 8003744:	497c      	ldr	r1, [pc, #496]	; (8003938 <_printf_i+0x218>)
 8003746:	9103      	str	r1, [sp, #12]
 8003748:	2a58      	cmp	r2, #88	; 0x58
 800374a:	d100      	bne.n	800374e <_printf_i+0x2e>
 800374c:	e093      	b.n	8003876 <_printf_i+0x156>
 800374e:	0026      	movs	r6, r4
 8003750:	3642      	adds	r6, #66	; 0x42
 8003752:	7032      	strb	r2, [r6, #0]
 8003754:	e022      	b.n	800379c <_printf_i+0x7c>
 8003756:	0010      	movs	r0, r2
 8003758:	3863      	subs	r0, #99	; 0x63
 800375a:	2815      	cmp	r0, #21
 800375c:	d8f7      	bhi.n	800374e <_printf_i+0x2e>
 800375e:	f7fc fccf 	bl	8000100 <__gnu_thumb1_case_shi>
 8003762:	0016      	.short	0x0016
 8003764:	fff6001f 	.word	0xfff6001f
 8003768:	fff6fff6 	.word	0xfff6fff6
 800376c:	001ffff6 	.word	0x001ffff6
 8003770:	fff6fff6 	.word	0xfff6fff6
 8003774:	fff6fff6 	.word	0xfff6fff6
 8003778:	003600a3 	.word	0x003600a3
 800377c:	fff60083 	.word	0xfff60083
 8003780:	00b4fff6 	.word	0x00b4fff6
 8003784:	0036fff6 	.word	0x0036fff6
 8003788:	fff6fff6 	.word	0xfff6fff6
 800378c:	0087      	.short	0x0087
 800378e:	0026      	movs	r6, r4
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	3642      	adds	r6, #66	; 0x42
 8003794:	1d11      	adds	r1, r2, #4
 8003796:	6019      	str	r1, [r3, #0]
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	7033      	strb	r3, [r6, #0]
 800379c:	2301      	movs	r3, #1
 800379e:	e0a2      	b.n	80038e6 <_printf_i+0x1c6>
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	6809      	ldr	r1, [r1, #0]
 80037a4:	1d02      	adds	r2, r0, #4
 80037a6:	060d      	lsls	r5, r1, #24
 80037a8:	d50b      	bpl.n	80037c2 <_printf_i+0xa2>
 80037aa:	6805      	ldr	r5, [r0, #0]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	da03      	bge.n	80037ba <_printf_i+0x9a>
 80037b2:	232d      	movs	r3, #45	; 0x2d
 80037b4:	9a04      	ldr	r2, [sp, #16]
 80037b6:	426d      	negs	r5, r5
 80037b8:	7013      	strb	r3, [r2, #0]
 80037ba:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <_printf_i+0x218>)
 80037bc:	270a      	movs	r7, #10
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	e01b      	b.n	80037fa <_printf_i+0xda>
 80037c2:	6805      	ldr	r5, [r0, #0]
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	0649      	lsls	r1, r1, #25
 80037c8:	d5f1      	bpl.n	80037ae <_printf_i+0x8e>
 80037ca:	b22d      	sxth	r5, r5
 80037cc:	e7ef      	b.n	80037ae <_printf_i+0x8e>
 80037ce:	680d      	ldr	r5, [r1, #0]
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	1d08      	adds	r0, r1, #4
 80037d4:	6018      	str	r0, [r3, #0]
 80037d6:	062e      	lsls	r6, r5, #24
 80037d8:	d501      	bpl.n	80037de <_printf_i+0xbe>
 80037da:	680d      	ldr	r5, [r1, #0]
 80037dc:	e003      	b.n	80037e6 <_printf_i+0xc6>
 80037de:	066d      	lsls	r5, r5, #25
 80037e0:	d5fb      	bpl.n	80037da <_printf_i+0xba>
 80037e2:	680d      	ldr	r5, [r1, #0]
 80037e4:	b2ad      	uxth	r5, r5
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <_printf_i+0x218>)
 80037e8:	2708      	movs	r7, #8
 80037ea:	9303      	str	r3, [sp, #12]
 80037ec:	2a6f      	cmp	r2, #111	; 0x6f
 80037ee:	d000      	beq.n	80037f2 <_printf_i+0xd2>
 80037f0:	3702      	adds	r7, #2
 80037f2:	0023      	movs	r3, r4
 80037f4:	2200      	movs	r2, #0
 80037f6:	3343      	adds	r3, #67	; 0x43
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	6863      	ldr	r3, [r4, #4]
 80037fc:	60a3      	str	r3, [r4, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db03      	blt.n	800380a <_printf_i+0xea>
 8003802:	2104      	movs	r1, #4
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	438a      	bics	r2, r1
 8003808:	6022      	str	r2, [r4, #0]
 800380a:	2d00      	cmp	r5, #0
 800380c:	d102      	bne.n	8003814 <_printf_i+0xf4>
 800380e:	9e04      	ldr	r6, [sp, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00c      	beq.n	800382e <_printf_i+0x10e>
 8003814:	9e04      	ldr	r6, [sp, #16]
 8003816:	0028      	movs	r0, r5
 8003818:	0039      	movs	r1, r7
 800381a:	f7fc fd01 	bl	8000220 <__aeabi_uidivmod>
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	3e01      	subs	r6, #1
 8003822:	5c5b      	ldrb	r3, [r3, r1]
 8003824:	7033      	strb	r3, [r6, #0]
 8003826:	002b      	movs	r3, r5
 8003828:	0005      	movs	r5, r0
 800382a:	429f      	cmp	r7, r3
 800382c:	d9f3      	bls.n	8003816 <_printf_i+0xf6>
 800382e:	2f08      	cmp	r7, #8
 8003830:	d109      	bne.n	8003846 <_printf_i+0x126>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	07db      	lsls	r3, r3, #31
 8003836:	d506      	bpl.n	8003846 <_printf_i+0x126>
 8003838:	6862      	ldr	r2, [r4, #4]
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	dc02      	bgt.n	8003846 <_printf_i+0x126>
 8003840:	2330      	movs	r3, #48	; 0x30
 8003842:	3e01      	subs	r6, #1
 8003844:	7033      	strb	r3, [r6, #0]
 8003846:	9b04      	ldr	r3, [sp, #16]
 8003848:	1b9b      	subs	r3, r3, r6
 800384a:	6123      	str	r3, [r4, #16]
 800384c:	9b07      	ldr	r3, [sp, #28]
 800384e:	0021      	movs	r1, r4
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	9805      	ldr	r0, [sp, #20]
 8003854:	9b06      	ldr	r3, [sp, #24]
 8003856:	aa09      	add	r2, sp, #36	; 0x24
 8003858:	f7ff fef2 	bl	8003640 <_printf_common>
 800385c:	3001      	adds	r0, #1
 800385e:	d147      	bne.n	80038f0 <_printf_i+0x1d0>
 8003860:	2001      	movs	r0, #1
 8003862:	4240      	negs	r0, r0
 8003864:	b00b      	add	sp, #44	; 0x2c
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003868:	2220      	movs	r2, #32
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	6022      	str	r2, [r4, #0]
 8003870:	2278      	movs	r2, #120	; 0x78
 8003872:	4932      	ldr	r1, [pc, #200]	; (800393c <_printf_i+0x21c>)
 8003874:	9103      	str	r1, [sp, #12]
 8003876:	0021      	movs	r1, r4
 8003878:	3145      	adds	r1, #69	; 0x45
 800387a:	700a      	strb	r2, [r1, #0]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	c920      	ldmia	r1!, {r5}
 8003882:	0610      	lsls	r0, r2, #24
 8003884:	d402      	bmi.n	800388c <_printf_i+0x16c>
 8003886:	0650      	lsls	r0, r2, #25
 8003888:	d500      	bpl.n	800388c <_printf_i+0x16c>
 800388a:	b2ad      	uxth	r5, r5
 800388c:	6019      	str	r1, [r3, #0]
 800388e:	07d3      	lsls	r3, r2, #31
 8003890:	d502      	bpl.n	8003898 <_printf_i+0x178>
 8003892:	2320      	movs	r3, #32
 8003894:	4313      	orrs	r3, r2
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	2710      	movs	r7, #16
 800389a:	2d00      	cmp	r5, #0
 800389c:	d1a9      	bne.n	80037f2 <_printf_i+0xd2>
 800389e:	2220      	movs	r2, #32
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	4393      	bics	r3, r2
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	e7a4      	b.n	80037f2 <_printf_i+0xd2>
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	680d      	ldr	r5, [r1, #0]
 80038ac:	1d10      	adds	r0, r2, #4
 80038ae:	6949      	ldr	r1, [r1, #20]
 80038b0:	6018      	str	r0, [r3, #0]
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	062e      	lsls	r6, r5, #24
 80038b6:	d501      	bpl.n	80038bc <_printf_i+0x19c>
 80038b8:	6019      	str	r1, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <_printf_i+0x1a2>
 80038bc:	066d      	lsls	r5, r5, #25
 80038be:	d5fb      	bpl.n	80038b8 <_printf_i+0x198>
 80038c0:	8019      	strh	r1, [r3, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9e04      	ldr	r6, [sp, #16]
 80038c6:	6123      	str	r3, [r4, #16]
 80038c8:	e7c0      	b.n	800384c <_printf_i+0x12c>
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	1d11      	adds	r1, r2, #4
 80038ce:	6019      	str	r1, [r3, #0]
 80038d0:	6816      	ldr	r6, [r2, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	0030      	movs	r0, r6
 80038d6:	6862      	ldr	r2, [r4, #4]
 80038d8:	f000 f9a0 	bl	8003c1c <memchr>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d001      	beq.n	80038e4 <_printf_i+0x1c4>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	6060      	str	r0, [r4, #4]
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9a04      	ldr	r2, [sp, #16]
 80038ec:	7013      	strb	r3, [r2, #0]
 80038ee:	e7ad      	b.n	800384c <_printf_i+0x12c>
 80038f0:	0032      	movs	r2, r6
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	9906      	ldr	r1, [sp, #24]
 80038f6:	9805      	ldr	r0, [sp, #20]
 80038f8:	9d07      	ldr	r5, [sp, #28]
 80038fa:	47a8      	blx	r5
 80038fc:	3001      	adds	r0, #1
 80038fe:	d0af      	beq.n	8003860 <_printf_i+0x140>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	d415      	bmi.n	8003932 <_printf_i+0x212>
 8003906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003908:	68e0      	ldr	r0, [r4, #12]
 800390a:	4298      	cmp	r0, r3
 800390c:	daaa      	bge.n	8003864 <_printf_i+0x144>
 800390e:	0018      	movs	r0, r3
 8003910:	e7a8      	b.n	8003864 <_printf_i+0x144>
 8003912:	0022      	movs	r2, r4
 8003914:	2301      	movs	r3, #1
 8003916:	9906      	ldr	r1, [sp, #24]
 8003918:	9805      	ldr	r0, [sp, #20]
 800391a:	9e07      	ldr	r6, [sp, #28]
 800391c:	3219      	adds	r2, #25
 800391e:	47b0      	blx	r6
 8003920:	3001      	adds	r0, #1
 8003922:	d09d      	beq.n	8003860 <_printf_i+0x140>
 8003924:	3501      	adds	r5, #1
 8003926:	68e3      	ldr	r3, [r4, #12]
 8003928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	42ab      	cmp	r3, r5
 800392e:	dcf0      	bgt.n	8003912 <_printf_i+0x1f2>
 8003930:	e7e9      	b.n	8003906 <_printf_i+0x1e6>
 8003932:	2500      	movs	r5, #0
 8003934:	e7f7      	b.n	8003926 <_printf_i+0x206>
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	08003dfd 	.word	0x08003dfd
 800393c:	08003e0e 	.word	0x08003e0e

08003940 <__sflush_r>:
 8003940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003942:	898b      	ldrh	r3, [r1, #12]
 8003944:	0005      	movs	r5, r0
 8003946:	000c      	movs	r4, r1
 8003948:	071a      	lsls	r2, r3, #28
 800394a:	d45c      	bmi.n	8003a06 <__sflush_r+0xc6>
 800394c:	684a      	ldr	r2, [r1, #4]
 800394e:	2a00      	cmp	r2, #0
 8003950:	dc04      	bgt.n	800395c <__sflush_r+0x1c>
 8003952:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003954:	2a00      	cmp	r2, #0
 8003956:	dc01      	bgt.n	800395c <__sflush_r+0x1c>
 8003958:	2000      	movs	r0, #0
 800395a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800395c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800395e:	2f00      	cmp	r7, #0
 8003960:	d0fa      	beq.n	8003958 <__sflush_r+0x18>
 8003962:	2200      	movs	r2, #0
 8003964:	2080      	movs	r0, #128	; 0x80
 8003966:	682e      	ldr	r6, [r5, #0]
 8003968:	602a      	str	r2, [r5, #0]
 800396a:	001a      	movs	r2, r3
 800396c:	0140      	lsls	r0, r0, #5
 800396e:	6a21      	ldr	r1, [r4, #32]
 8003970:	4002      	ands	r2, r0
 8003972:	4203      	tst	r3, r0
 8003974:	d034      	beq.n	80039e0 <__sflush_r+0xa0>
 8003976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	075b      	lsls	r3, r3, #29
 800397c:	d506      	bpl.n	800398c <__sflush_r+0x4c>
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	1ac0      	subs	r0, r0, r3
 8003982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <__sflush_r+0x4c>
 8003988:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800398a:	1ac0      	subs	r0, r0, r3
 800398c:	0002      	movs	r2, r0
 800398e:	2300      	movs	r3, #0
 8003990:	0028      	movs	r0, r5
 8003992:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	47b8      	blx	r7
 8003998:	89a2      	ldrh	r2, [r4, #12]
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	d106      	bne.n	80039ac <__sflush_r+0x6c>
 800399e:	6829      	ldr	r1, [r5, #0]
 80039a0:	291d      	cmp	r1, #29
 80039a2:	d82c      	bhi.n	80039fe <__sflush_r+0xbe>
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <__sflush_r+0x110>)
 80039a6:	410b      	asrs	r3, r1
 80039a8:	07db      	lsls	r3, r3, #31
 80039aa:	d428      	bmi.n	80039fe <__sflush_r+0xbe>
 80039ac:	2300      	movs	r3, #0
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	04d2      	lsls	r2, r2, #19
 80039b6:	d505      	bpl.n	80039c4 <__sflush_r+0x84>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <__sflush_r+0x82>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d100      	bne.n	80039c4 <__sflush_r+0x84>
 80039c2:	6560      	str	r0, [r4, #84]	; 0x54
 80039c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039c6:	602e      	str	r6, [r5, #0]
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d0c5      	beq.n	8003958 <__sflush_r+0x18>
 80039cc:	0023      	movs	r3, r4
 80039ce:	3344      	adds	r3, #68	; 0x44
 80039d0:	4299      	cmp	r1, r3
 80039d2:	d002      	beq.n	80039da <__sflush_r+0x9a>
 80039d4:	0028      	movs	r0, r5
 80039d6:	f7ff fbf1 	bl	80031bc <_free_r>
 80039da:	2000      	movs	r0, #0
 80039dc:	6360      	str	r0, [r4, #52]	; 0x34
 80039de:	e7bc      	b.n	800395a <__sflush_r+0x1a>
 80039e0:	2301      	movs	r3, #1
 80039e2:	0028      	movs	r0, r5
 80039e4:	47b8      	blx	r7
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	d1c6      	bne.n	8003978 <__sflush_r+0x38>
 80039ea:	682b      	ldr	r3, [r5, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0c3      	beq.n	8003978 <__sflush_r+0x38>
 80039f0:	2b1d      	cmp	r3, #29
 80039f2:	d001      	beq.n	80039f8 <__sflush_r+0xb8>
 80039f4:	2b16      	cmp	r3, #22
 80039f6:	d101      	bne.n	80039fc <__sflush_r+0xbc>
 80039f8:	602e      	str	r6, [r5, #0]
 80039fa:	e7ad      	b.n	8003958 <__sflush_r+0x18>
 80039fc:	89a2      	ldrh	r2, [r4, #12]
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	4313      	orrs	r3, r2
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	e7a9      	b.n	800395a <__sflush_r+0x1a>
 8003a06:	690e      	ldr	r6, [r1, #16]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	d0a5      	beq.n	8003958 <__sflush_r+0x18>
 8003a0c:	680f      	ldr	r7, [r1, #0]
 8003a0e:	600e      	str	r6, [r1, #0]
 8003a10:	1bba      	subs	r2, r7, r6
 8003a12:	9201      	str	r2, [sp, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	079b      	lsls	r3, r3, #30
 8003a18:	d100      	bne.n	8003a1c <__sflush_r+0xdc>
 8003a1a:	694a      	ldr	r2, [r1, #20]
 8003a1c:	60a2      	str	r2, [r4, #8]
 8003a1e:	9b01      	ldr	r3, [sp, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dd99      	ble.n	8003958 <__sflush_r+0x18>
 8003a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a26:	0032      	movs	r2, r6
 8003a28:	001f      	movs	r7, r3
 8003a2a:	0028      	movs	r0, r5
 8003a2c:	9b01      	ldr	r3, [sp, #4]
 8003a2e:	6a21      	ldr	r1, [r4, #32]
 8003a30:	47b8      	blx	r7
 8003a32:	2800      	cmp	r0, #0
 8003a34:	dc06      	bgt.n	8003a44 <__sflush_r+0x104>
 8003a36:	2340      	movs	r3, #64	; 0x40
 8003a38:	2001      	movs	r0, #1
 8003a3a:	89a2      	ldrh	r2, [r4, #12]
 8003a3c:	4240      	negs	r0, r0
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e78a      	b.n	800395a <__sflush_r+0x1a>
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	1836      	adds	r6, r6, r0
 8003a48:	1a1b      	subs	r3, r3, r0
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	e7e7      	b.n	8003a1e <__sflush_r+0xde>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	dfbffffe 	.word	0xdfbffffe

08003a54 <_fflush_r>:
 8003a54:	690b      	ldr	r3, [r1, #16]
 8003a56:	b570      	push	{r4, r5, r6, lr}
 8003a58:	0005      	movs	r5, r0
 8003a5a:	000c      	movs	r4, r1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <_fflush_r+0x12>
 8003a60:	2500      	movs	r5, #0
 8003a62:	0028      	movs	r0, r5
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d004      	beq.n	8003a74 <_fflush_r+0x20>
 8003a6a:	6a03      	ldr	r3, [r0, #32]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <_fflush_r+0x20>
 8003a70:	f7ff fa90 	bl	8002f94 <__sinit>
 8003a74:	220c      	movs	r2, #12
 8003a76:	5ea3      	ldrsh	r3, [r4, r2]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f1      	beq.n	8003a60 <_fflush_r+0xc>
 8003a7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a7e:	07d2      	lsls	r2, r2, #31
 8003a80:	d404      	bmi.n	8003a8c <_fflush_r+0x38>
 8003a82:	059b      	lsls	r3, r3, #22
 8003a84:	d402      	bmi.n	8003a8c <_fflush_r+0x38>
 8003a86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a88:	f7ff fb95 	bl	80031b6 <__retarget_lock_acquire_recursive>
 8003a8c:	0028      	movs	r0, r5
 8003a8e:	0021      	movs	r1, r4
 8003a90:	f7ff ff56 	bl	8003940 <__sflush_r>
 8003a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a96:	0005      	movs	r5, r0
 8003a98:	07db      	lsls	r3, r3, #31
 8003a9a:	d4e2      	bmi.n	8003a62 <_fflush_r+0xe>
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	059b      	lsls	r3, r3, #22
 8003aa0:	d4df      	bmi.n	8003a62 <_fflush_r+0xe>
 8003aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa4:	f7ff fb88 	bl	80031b8 <__retarget_lock_release_recursive>
 8003aa8:	e7db      	b.n	8003a62 <_fflush_r+0xe>

08003aaa <__swbuf_r>:
 8003aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aac:	0006      	movs	r6, r0
 8003aae:	000d      	movs	r5, r1
 8003ab0:	0014      	movs	r4, r2
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d004      	beq.n	8003ac0 <__swbuf_r+0x16>
 8003ab6:	6a03      	ldr	r3, [r0, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <__swbuf_r+0x16>
 8003abc:	f7ff fa6a 	bl	8002f94 <__sinit>
 8003ac0:	69a3      	ldr	r3, [r4, #24]
 8003ac2:	60a3      	str	r3, [r4, #8]
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	071b      	lsls	r3, r3, #28
 8003ac8:	d528      	bpl.n	8003b1c <__swbuf_r+0x72>
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d025      	beq.n	8003b1c <__swbuf_r+0x72>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	b2ef      	uxtb	r7, r5
 8003ad6:	1ac0      	subs	r0, r0, r3
 8003ad8:	6963      	ldr	r3, [r4, #20]
 8003ada:	b2ed      	uxtb	r5, r5
 8003adc:	4283      	cmp	r3, r0
 8003ade:	dc05      	bgt.n	8003aec <__swbuf_r+0x42>
 8003ae0:	0021      	movs	r1, r4
 8003ae2:	0030      	movs	r0, r6
 8003ae4:	f7ff ffb6 	bl	8003a54 <_fflush_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d11d      	bne.n	8003b28 <__swbuf_r+0x7e>
 8003aec:	68a3      	ldr	r3, [r4, #8]
 8003aee:	3001      	adds	r0, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	60a3      	str	r3, [r4, #8]
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	701f      	strb	r7, [r3, #0]
 8003afc:	6963      	ldr	r3, [r4, #20]
 8003afe:	4283      	cmp	r3, r0
 8003b00:	d004      	beq.n	8003b0c <__swbuf_r+0x62>
 8003b02:	89a3      	ldrh	r3, [r4, #12]
 8003b04:	07db      	lsls	r3, r3, #31
 8003b06:	d507      	bpl.n	8003b18 <__swbuf_r+0x6e>
 8003b08:	2d0a      	cmp	r5, #10
 8003b0a:	d105      	bne.n	8003b18 <__swbuf_r+0x6e>
 8003b0c:	0021      	movs	r1, r4
 8003b0e:	0030      	movs	r0, r6
 8003b10:	f7ff ffa0 	bl	8003a54 <_fflush_r>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d107      	bne.n	8003b28 <__swbuf_r+0x7e>
 8003b18:	0028      	movs	r0, r5
 8003b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b1c:	0021      	movs	r1, r4
 8003b1e:	0030      	movs	r0, r6
 8003b20:	f000 f806 	bl	8003b30 <__swsetup_r>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d0d3      	beq.n	8003ad0 <__swbuf_r+0x26>
 8003b28:	2501      	movs	r5, #1
 8003b2a:	426d      	negs	r5, r5
 8003b2c:	e7f4      	b.n	8003b18 <__swbuf_r+0x6e>
	...

08003b30 <__swsetup_r>:
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <__swsetup_r+0xc4>)
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	0005      	movs	r5, r0
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	000c      	movs	r4, r1
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d004      	beq.n	8003b48 <__swsetup_r+0x18>
 8003b3e:	6a03      	ldr	r3, [r0, #32]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <__swsetup_r+0x18>
 8003b44:	f7ff fa26 	bl	8002f94 <__sinit>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	5ee2      	ldrsh	r2, [r4, r3]
 8003b4c:	b293      	uxth	r3, r2
 8003b4e:	0711      	lsls	r1, r2, #28
 8003b50:	d423      	bmi.n	8003b9a <__swsetup_r+0x6a>
 8003b52:	06d9      	lsls	r1, r3, #27
 8003b54:	d407      	bmi.n	8003b66 <__swsetup_r+0x36>
 8003b56:	2309      	movs	r3, #9
 8003b58:	2001      	movs	r0, #1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	3337      	adds	r3, #55	; 0x37
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	4240      	negs	r0, r0
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	075b      	lsls	r3, r3, #29
 8003b68:	d513      	bpl.n	8003b92 <__swsetup_r+0x62>
 8003b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	d008      	beq.n	8003b82 <__swsetup_r+0x52>
 8003b70:	0023      	movs	r3, r4
 8003b72:	3344      	adds	r3, #68	; 0x44
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d002      	beq.n	8003b7e <__swsetup_r+0x4e>
 8003b78:	0028      	movs	r0, r5
 8003b7a:	f7ff fb1f 	bl	80031bc <_free_r>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6363      	str	r3, [r4, #52]	; 0x34
 8003b82:	2224      	movs	r2, #36	; 0x24
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	4393      	bics	r3, r2
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	2308      	movs	r3, #8
 8003b94:	89a2      	ldrh	r2, [r4, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <__swsetup_r+0x88>
 8003ba0:	21a0      	movs	r1, #160	; 0xa0
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	0089      	lsls	r1, r1, #2
 8003ba8:	0092      	lsls	r2, r2, #2
 8003baa:	400b      	ands	r3, r1
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <__swsetup_r+0x88>
 8003bb0:	0021      	movs	r1, r4
 8003bb2:	0028      	movs	r0, r5
 8003bb4:	f000 f866 	bl	8003c84 <__smakebuf_r>
 8003bb8:	220c      	movs	r2, #12
 8003bba:	5ea3      	ldrsh	r3, [r4, r2]
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	4002      	ands	r2, r0
 8003bc4:	4203      	tst	r3, r0
 8003bc6:	d00f      	beq.n	8003be8 <__swsetup_r+0xb8>
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60a2      	str	r2, [r4, #8]
 8003bcc:	6962      	ldr	r2, [r4, #20]
 8003bce:	4252      	negs	r2, r2
 8003bd0:	61a2      	str	r2, [r4, #24]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	6922      	ldr	r2, [r4, #16]
 8003bd6:	4282      	cmp	r2, r0
 8003bd8:	d1c4      	bne.n	8003b64 <__swsetup_r+0x34>
 8003bda:	0609      	lsls	r1, r1, #24
 8003bdc:	d5c2      	bpl.n	8003b64 <__swsetup_r+0x34>
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	4313      	orrs	r3, r2
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	3801      	subs	r0, #1
 8003be6:	e7bd      	b.n	8003b64 <__swsetup_r+0x34>
 8003be8:	0788      	lsls	r0, r1, #30
 8003bea:	d400      	bmi.n	8003bee <__swsetup_r+0xbe>
 8003bec:	6962      	ldr	r2, [r4, #20]
 8003bee:	60a2      	str	r2, [r4, #8]
 8003bf0:	e7ef      	b.n	8003bd2 <__swsetup_r+0xa2>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000064 	.word	0x20000064

08003bf8 <_sbrk_r>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b570      	push	{r4, r5, r6, lr}
 8003bfc:	4d06      	ldr	r5, [pc, #24]	; (8003c18 <_sbrk_r+0x20>)
 8003bfe:	0004      	movs	r4, r0
 8003c00:	0008      	movs	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fc fec6 	bl	8000994 <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_sbrk_r+0x1c>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d000      	beq.n	8003c14 <_sbrk_r+0x1c>
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	200002ac 	.word	0x200002ac

08003c1c <memchr>:
 8003c1c:	b2c9      	uxtb	r1, r1
 8003c1e:	1882      	adds	r2, r0, r2
 8003c20:	4290      	cmp	r0, r2
 8003c22:	d101      	bne.n	8003c28 <memchr+0xc>
 8003c24:	2000      	movs	r0, #0
 8003c26:	4770      	bx	lr
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	428b      	cmp	r3, r1
 8003c2c:	d0fb      	beq.n	8003c26 <memchr+0xa>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	e7f6      	b.n	8003c20 <memchr+0x4>
	...

08003c34 <__swhatbuf_r>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	000e      	movs	r6, r1
 8003c38:	001d      	movs	r5, r3
 8003c3a:	230e      	movs	r3, #14
 8003c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8003c3e:	0014      	movs	r4, r2
 8003c40:	b096      	sub	sp, #88	; 0x58
 8003c42:	2900      	cmp	r1, #0
 8003c44:	da0c      	bge.n	8003c60 <__swhatbuf_r+0x2c>
 8003c46:	89b2      	ldrh	r2, [r6, #12]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	4019      	ands	r1, r3
 8003c4e:	421a      	tst	r2, r3
 8003c50:	d013      	beq.n	8003c7a <__swhatbuf_r+0x46>
 8003c52:	2100      	movs	r1, #0
 8003c54:	3b40      	subs	r3, #64	; 0x40
 8003c56:	2000      	movs	r0, #0
 8003c58:	6029      	str	r1, [r5, #0]
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	b016      	add	sp, #88	; 0x58
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	466a      	mov	r2, sp
 8003c62:	f000 f84d 	bl	8003d00 <_fstat_r>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	dbed      	blt.n	8003c46 <__swhatbuf_r+0x12>
 8003c6a:	23f0      	movs	r3, #240	; 0xf0
 8003c6c:	9901      	ldr	r1, [sp, #4]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	4019      	ands	r1, r3
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <__swhatbuf_r+0x4c>)
 8003c74:	18c9      	adds	r1, r1, r3
 8003c76:	424b      	negs	r3, r1
 8003c78:	4159      	adcs	r1, r3
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	e7ea      	b.n	8003c56 <__swhatbuf_r+0x22>
 8003c80:	ffffe000 	.word	0xffffe000

08003c84 <__smakebuf_r>:
 8003c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c86:	2602      	movs	r6, #2
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	0005      	movs	r5, r0
 8003c8c:	000c      	movs	r4, r1
 8003c8e:	4233      	tst	r3, r6
 8003c90:	d006      	beq.n	8003ca0 <__smakebuf_r+0x1c>
 8003c92:	0023      	movs	r3, r4
 8003c94:	3347      	adds	r3, #71	; 0x47
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	6123      	str	r3, [r4, #16]
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	6163      	str	r3, [r4, #20]
 8003c9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ca0:	466a      	mov	r2, sp
 8003ca2:	ab01      	add	r3, sp, #4
 8003ca4:	f7ff ffc6 	bl	8003c34 <__swhatbuf_r>
 8003ca8:	9900      	ldr	r1, [sp, #0]
 8003caa:	0007      	movs	r7, r0
 8003cac:	0028      	movs	r0, r5
 8003cae:	f7ff faf1 	bl	8003294 <_malloc_r>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d108      	bne.n	8003cc8 <__smakebuf_r+0x44>
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8003cba:	059a      	lsls	r2, r3, #22
 8003cbc:	d4ef      	bmi.n	8003c9e <__smakebuf_r+0x1a>
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	431e      	orrs	r6, r3
 8003cc4:	81a6      	strh	r6, [r4, #12]
 8003cc6:	e7e4      	b.n	8003c92 <__smakebuf_r+0xe>
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	89a2      	ldrh	r2, [r4, #12]
 8003ccc:	6020      	str	r0, [r4, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	9b00      	ldr	r3, [sp, #0]
 8003cd4:	6120      	str	r0, [r4, #16]
 8003cd6:	6163      	str	r3, [r4, #20]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <__smakebuf_r+0x74>
 8003cde:	0028      	movs	r0, r5
 8003ce0:	230e      	movs	r3, #14
 8003ce2:	5ee1      	ldrsh	r1, [r4, r3]
 8003ce4:	f000 f81e 	bl	8003d24 <_isatty_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d005      	beq.n	8003cf8 <__smakebuf_r+0x74>
 8003cec:	2303      	movs	r3, #3
 8003cee:	89a2      	ldrh	r2, [r4, #12]
 8003cf0:	439a      	bics	r2, r3
 8003cf2:	3b02      	subs	r3, #2
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	433b      	orrs	r3, r7
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	e7ce      	b.n	8003c9e <__smakebuf_r+0x1a>

08003d00 <_fstat_r>:
 8003d00:	2300      	movs	r3, #0
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	4d06      	ldr	r5, [pc, #24]	; (8003d20 <_fstat_r+0x20>)
 8003d06:	0004      	movs	r4, r0
 8003d08:	0008      	movs	r0, r1
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	f7fc fe1f 	bl	8000950 <_fstat>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	d103      	bne.n	8003d1e <_fstat_r+0x1e>
 8003d16:	682b      	ldr	r3, [r5, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d000      	beq.n	8003d1e <_fstat_r+0x1e>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	200002ac 	.word	0x200002ac

08003d24 <_isatty_r>:
 8003d24:	2300      	movs	r3, #0
 8003d26:	b570      	push	{r4, r5, r6, lr}
 8003d28:	4d06      	ldr	r5, [pc, #24]	; (8003d44 <_isatty_r+0x20>)
 8003d2a:	0004      	movs	r4, r0
 8003d2c:	0008      	movs	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fc fe1c 	bl	800096c <_isatty>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d103      	bne.n	8003d40 <_isatty_r+0x1c>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d000      	beq.n	8003d40 <_isatty_r+0x1c>
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	200002ac 	.word	0x200002ac

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
