
stm32-lsr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003180  08003180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003180  08003180  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003180  08003180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003194  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f23b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001faa  00000000  00000000  0002f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00031260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a90  00000000  00000000  00031fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f45  00000000  00000000  00032a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108ee  00000000  00000000  00048995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e4e5  00000000  00000000  00059283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000307c  00000000  00000000  000e7768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ea7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080030c0 	.word	0x080030c0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080030c0 	.word	0x080030c0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <forward.4>:
  MX_TIM1_Init();

  /* USER CODE BEGIN 2 */

  void forward(void)
  {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4663      	mov	r3, ip
 80003f4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(motorLeft1_GPIO_Port, motorLeft1_Pin, GPIO_PIN_SET);
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <forward.4+0x44>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	2120      	movs	r1, #32
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 ffde 	bl	80013be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motorLeft2_GPIO_Port, motorLeft2_Pin, GPIO_PIN_RESET);
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <forward.4+0x44>)
 8000404:	2200      	movs	r2, #0
 8000406:	2110      	movs	r1, #16
 8000408:	0018      	movs	r0, r3
 800040a:	f000 ffd8 	bl	80013be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motorRight1_GPIO_Port, motorRight1_Pin, GPIO_PIN_SET);
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <forward.4+0x44>)
 8000410:	2201      	movs	r2, #1
 8000412:	2108      	movs	r1, #8
 8000414:	0018      	movs	r0, r3
 8000416:	f000 ffd2 	bl	80013be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motorRight2_GPIO_Port, motorRight2_Pin, GPIO_PIN_RESET);
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <forward.4+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	0018      	movs	r0, r3
 8000422:	f000 ffcc 	bl	80013be <HAL_GPIO_WritePin>
  }
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	50000c00 	.word	0x50000c00

08000434 <main>:
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
int main(void)
 800043a:	2318      	movs	r3, #24
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000440:	f000 fcc8 	bl	8000dd4 <HAL_Init>
  SystemClock_Config();
 8000444:	f000 fa1e 	bl	8000884 <SystemClock_Config>
  MX_GPIO_Init();
 8000448:	f000 fb20 	bl	8000a8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800044c:	f000 fad0 	bl	80009f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000450:	f000 fa72 	bl	8000938 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 forward();
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	469c      	mov	ip, r3
 8000458:	f7ff ffc8 	bl	80003ec <forward.4>
	 lsr = 0;
 800045c:	4bbb      	ldr	r3, [pc, #748]	; (800074c <main+0x318>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]

	 // ultrasonic

	 HAL_GPIO_WritePin(trigLeft_GPIO_Port, trigLeft_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	48ba      	ldr	r0, [pc, #744]	; (8000750 <main+0x31c>)
 8000468:	2201      	movs	r2, #1
 800046a:	0019      	movs	r1, r3
 800046c:	f000 ffa7 	bl	80013be <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000470:	4bb8      	ldr	r3, [pc, #736]	; (8000754 <main+0x320>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24
	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	4bb6      	ldr	r3, [pc, #728]	; (8000754 <main+0x320>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	2b09      	cmp	r3, #9
 8000482:	d9fa      	bls.n	800047a <main+0x46>
	 HAL_GPIO_WritePin(trigLeft_GPIO_Port, trigLeft_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	48b1      	ldr	r0, [pc, #708]	; (8000750 <main+0x31c>)
 800048a:	2200      	movs	r2, #0
 800048c:	0019      	movs	r1, r3
 800048e:	f000 ff96 	bl	80013be <HAL_GPIO_WritePin>

	 pMillisLeft = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000492:	f000 fd1b 	bl	8000ecc <HAL_GetTick>
 8000496:	0002      	movs	r2, r0
 8000498:	4baf      	ldr	r3, [pc, #700]	; (8000758 <main+0x324>)
 800049a:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go high
	 while (!(HAL_GPIO_ReadPin (echoLeft_GPIO_Port, echoLeft_Pin)) && pMillisLeft + 10 >  HAL_GetTick());
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4aab      	ldr	r2, [pc, #684]	; (8000750 <main+0x31c>)
 80004a4:	0019      	movs	r1, r3
 80004a6:	0010      	movs	r0, r2
 80004a8:	f000 ff6c 	bl	8001384 <HAL_GPIO_ReadPin>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d108      	bne.n	80004c2 <main+0x8e>
 80004b0:	4ba9      	ldr	r3, [pc, #676]	; (8000758 <main+0x324>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	330a      	adds	r3, #10
 80004b6:	001c      	movs	r4, r3
 80004b8:	f000 fd08 	bl	8000ecc <HAL_GetTick>
 80004bc:	0003      	movs	r3, r0
 80004be:	429c      	cmp	r4, r3
 80004c0:	d8ed      	bhi.n	800049e <main+0x6a>
	 Value1Left = __HAL_TIM_GET_COUNTER (&htim1);
 80004c2:	4ba4      	ldr	r3, [pc, #656]	; (8000754 <main+0x320>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c8:	4ba4      	ldr	r3, [pc, #656]	; (800075c <main+0x328>)
 80004ca:	601a      	str	r2, [r3, #0]

	 pMillisLeft = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80004cc:	f000 fcfe 	bl	8000ecc <HAL_GetTick>
 80004d0:	0002      	movs	r2, r0
 80004d2:	4ba1      	ldr	r3, [pc, #644]	; (8000758 <main+0x324>)
 80004d4:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go low
	 while ((HAL_GPIO_ReadPin (echoLeft_GPIO_Port, echoLeft_Pin)) && pMillisLeft + 50 > HAL_GetTick());
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4a9c      	ldr	r2, [pc, #624]	; (8000750 <main+0x31c>)
 80004de:	0019      	movs	r1, r3
 80004e0:	0010      	movs	r0, r2
 80004e2:	f000 ff4f 	bl	8001384 <HAL_GPIO_ReadPin>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d008      	beq.n	80004fc <main+0xc8>
 80004ea:	4b9b      	ldr	r3, [pc, #620]	; (8000758 <main+0x324>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3332      	adds	r3, #50	; 0x32
 80004f0:	001c      	movs	r4, r3
 80004f2:	f000 fceb 	bl	8000ecc <HAL_GetTick>
 80004f6:	0003      	movs	r3, r0
 80004f8:	429c      	cmp	r4, r3
 80004fa:	d8ed      	bhi.n	80004d8 <main+0xa4>
	 Value2Left = __HAL_TIM_GET_COUNTER (&htim1);
 80004fc:	4b95      	ldr	r3, [pc, #596]	; (8000754 <main+0x320>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000502:	4b97      	ldr	r3, [pc, #604]	; (8000760 <main+0x32c>)
 8000504:	601a      	str	r2, [r3, #0]

	 DistanceLeft = ((Value2Left - Value1Left) * 34) / 2;//distance in millimeters
 8000506:	4b96      	ldr	r3, [pc, #600]	; (8000760 <main+0x32c>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b94      	ldr	r3, [pc, #592]	; (800075c <main+0x328>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	0013      	movs	r3, r2
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	189b      	adds	r3, r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	085a      	lsrs	r2, r3, #1
 800051a:	4b92      	ldr	r3, [pc, #584]	; (8000764 <main+0x330>)
 800051c:	601a      	str	r2, [r3, #0]

	 HAL_GPIO_WritePin(trigStraight_GPIO_Port, trigStraight_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800051e:	4b8c      	ldr	r3, [pc, #560]	; (8000750 <main+0x31c>)
 8000520:	2201      	movs	r2, #1
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff4a 	bl	80013be <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 800052a:	4b8a      	ldr	r3, [pc, #552]	; (8000754 <main+0x320>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	4b87      	ldr	r3, [pc, #540]	; (8000754 <main+0x320>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053a:	2b09      	cmp	r3, #9
 800053c:	d9fa      	bls.n	8000534 <main+0x100>
	 HAL_GPIO_WritePin(trigStraight_GPIO_Port, trigStraight_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800053e:	4b84      	ldr	r3, [pc, #528]	; (8000750 <main+0x31c>)
 8000540:	2200      	movs	r2, #0
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	0018      	movs	r0, r3
 8000546:	f000 ff3a 	bl	80013be <HAL_GPIO_WritePin>

	 pMillisStraight = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800054a:	f000 fcbf 	bl	8000ecc <HAL_GetTick>
 800054e:	0002      	movs	r2, r0
 8000550:	4b85      	ldr	r3, [pc, #532]	; (8000768 <main+0x334>)
 8000552:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go high
	 while (!(HAL_GPIO_ReadPin (echoStraight_GPIO_Port, echoStraight_Pin)) && pMillisStraight + 10 >  HAL_GetTick());
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	4b7e      	ldr	r3, [pc, #504]	; (8000750 <main+0x31c>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0018      	movs	r0, r3
 800055c:	f000 ff12 	bl	8001384 <HAL_GPIO_ReadPin>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d108      	bne.n	8000576 <main+0x142>
 8000564:	4b80      	ldr	r3, [pc, #512]	; (8000768 <main+0x334>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	330a      	adds	r3, #10
 800056a:	001c      	movs	r4, r3
 800056c:	f000 fcae 	bl	8000ecc <HAL_GetTick>
 8000570:	0003      	movs	r3, r0
 8000572:	429c      	cmp	r4, r3
 8000574:	d8ef      	bhi.n	8000556 <main+0x122>
	 Value1Straight = __HAL_TIM_GET_COUNTER (&htim1);
 8000576:	4b77      	ldr	r3, [pc, #476]	; (8000754 <main+0x320>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057c:	4b7b      	ldr	r3, [pc, #492]	; (800076c <main+0x338>)
 800057e:	601a      	str	r2, [r3, #0]

	 pMillisStraight = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000580:	f000 fca4 	bl	8000ecc <HAL_GetTick>
 8000584:	0002      	movs	r2, r0
 8000586:	4b78      	ldr	r3, [pc, #480]	; (8000768 <main+0x334>)
 8000588:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go low
	 while ((HAL_GPIO_ReadPin (echoStraight_GPIO_Port, echoStraight_Pin)) && pMillisStraight + 50 > HAL_GetTick());
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	4b70      	ldr	r3, [pc, #448]	; (8000750 <main+0x31c>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fef7 	bl	8001384 <HAL_GPIO_ReadPin>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d008      	beq.n	80005ac <main+0x178>
 800059a:	4b73      	ldr	r3, [pc, #460]	; (8000768 <main+0x334>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3332      	adds	r3, #50	; 0x32
 80005a0:	001c      	movs	r4, r3
 80005a2:	f000 fc93 	bl	8000ecc <HAL_GetTick>
 80005a6:	0003      	movs	r3, r0
 80005a8:	429c      	cmp	r4, r3
 80005aa:	d8ef      	bhi.n	800058c <main+0x158>
	 Value2Straight = __HAL_TIM_GET_COUNTER (&htim1);
 80005ac:	4b69      	ldr	r3, [pc, #420]	; (8000754 <main+0x320>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b2:	4b6f      	ldr	r3, [pc, #444]	; (8000770 <main+0x33c>)
 80005b4:	601a      	str	r2, [r3, #0]

	 DistanceStraight = ((Value2Straight - Value1Straight) * 34) / 2;//distance in millimeters
 80005b6:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <main+0x33c>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b6c      	ldr	r3, [pc, #432]	; (800076c <main+0x338>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	0013      	movs	r3, r2
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	189b      	adds	r3, r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	085a      	lsrs	r2, r3, #1
 80005ca:	4b6a      	ldr	r3, [pc, #424]	; (8000774 <main+0x340>)
 80005cc:	601a      	str	r2, [r3, #0]

	 HAL_GPIO_WritePin(trigRight_GPIO_Port, trigRight_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80005ce:	4b60      	ldr	r3, [pc, #384]	; (8000750 <main+0x31c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fef2 	bl	80013be <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COUNTER(&htim1, 0);
 80005da:	4b5e      	ldr	r3, [pc, #376]	; (8000754 <main+0x320>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
	 while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <main+0x320>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ea:	2b09      	cmp	r3, #9
 80005ec:	d9fa      	bls.n	80005e4 <main+0x1b0>
	 HAL_GPIO_WritePin(trigRight_GPIO_Port, trigRight_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80005ee:	4b58      	ldr	r3, [pc, #352]	; (8000750 <main+0x31c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fee2 	bl	80013be <HAL_GPIO_WritePin>

	 pMillisRight = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80005fa:	f000 fc67 	bl	8000ecc <HAL_GetTick>
 80005fe:	0002      	movs	r2, r0
 8000600:	4b5d      	ldr	r3, [pc, #372]	; (8000778 <main+0x344>)
 8000602:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go high
	 while (!(HAL_GPIO_ReadPin (echoRight_GPIO_Port, echoRight_Pin)) && pMillisRight + 10 >  HAL_GetTick());
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	4b52      	ldr	r3, [pc, #328]	; (8000750 <main+0x31c>)
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f000 feba 	bl	8001384 <HAL_GPIO_ReadPin>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d108      	bne.n	8000626 <main+0x1f2>
 8000614:	4b58      	ldr	r3, [pc, #352]	; (8000778 <main+0x344>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	330a      	adds	r3, #10
 800061a:	001c      	movs	r4, r3
 800061c:	f000 fc56 	bl	8000ecc <HAL_GetTick>
 8000620:	0003      	movs	r3, r0
 8000622:	429c      	cmp	r4, r3
 8000624:	d8ef      	bhi.n	8000606 <main+0x1d2>
	 Value1Right = __HAL_TIM_GET_COUNTER (&htim1);
 8000626:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <main+0x320>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800062c:	4b53      	ldr	r3, [pc, #332]	; (800077c <main+0x348>)
 800062e:	601a      	str	r2, [r3, #0]

	 pMillisRight = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000630:	f000 fc4c 	bl	8000ecc <HAL_GetTick>
 8000634:	0002      	movs	r2, r0
 8000636:	4b50      	ldr	r3, [pc, #320]	; (8000778 <main+0x344>)
 8000638:	601a      	str	r2, [r3, #0]
	 // wait for the echo pin to go low
	 while ((HAL_GPIO_ReadPin (echoRight_GPIO_Port, echoRight_Pin)) && pMillisRight + 50 > HAL_GetTick());
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	4b44      	ldr	r3, [pc, #272]	; (8000750 <main+0x31c>)
 800063e:	2120      	movs	r1, #32
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fe9f 	bl	8001384 <HAL_GPIO_ReadPin>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d008      	beq.n	800065c <main+0x228>
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x344>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3332      	adds	r3, #50	; 0x32
 8000650:	001c      	movs	r4, r3
 8000652:	f000 fc3b 	bl	8000ecc <HAL_GetTick>
 8000656:	0003      	movs	r3, r0
 8000658:	429c      	cmp	r4, r3
 800065a:	d8ef      	bhi.n	800063c <main+0x208>
	 Value2Right = __HAL_TIM_GET_COUNTER (&htim1);
 800065c:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <main+0x320>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000662:	4b47      	ldr	r3, [pc, #284]	; (8000780 <main+0x34c>)
 8000664:	601a      	str	r2, [r3, #0]

	 DistanceRight = ((Value2Right - Value1Right) * 34) / 2;//distance in millimeters
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <main+0x34c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b44      	ldr	r3, [pc, #272]	; (800077c <main+0x348>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	0013      	movs	r3, r2
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	189b      	adds	r3, r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	085a      	lsrs	r2, r3, #1
 800067a:	4b42      	ldr	r3, [pc, #264]	; (8000784 <main+0x350>)
 800067c:	601a      	str	r2, [r3, #0]

	 if (DistanceLeft < 8) {lsr = 1;}
 800067e:	4b39      	ldr	r3, [pc, #228]	; (8000764 <main+0x330>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d803      	bhi.n	800068e <main+0x25a>
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <main+0x318>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e002      	b.n	8000694 <main+0x260>
	 else {lsr = 0;}
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <main+0x318>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]

	 if (DistanceStraight < 8) {lsr = (lsr << 1) | 1;}
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <main+0x340>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b07      	cmp	r3, #7
 800069a:	d807      	bhi.n	80006ac <main+0x278>
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <main+0x318>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2201      	movs	r2, #1
 80006a4:	431a      	orrs	r2, r3
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <main+0x318>)
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e004      	b.n	80006b6 <main+0x282>
	 else {lsr = lsr << 1;}
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <main+0x318>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	005a      	lsls	r2, r3, #1
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <main+0x318>)
 80006b4:	601a      	str	r2, [r3, #0]

	 if (DistanceRight < 8) {lsr = (lsr << 1) | 1;}
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <main+0x350>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b07      	cmp	r3, #7
 80006bc:	d807      	bhi.n	80006ce <main+0x29a>
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <main+0x318>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2201      	movs	r2, #1
 80006c6:	431a      	orrs	r2, r3
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <main+0x318>)
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	e004      	b.n	80006d8 <main+0x2a4>
	 else {lsr = lsr << 1;}
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <main+0x318>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	005a      	lsls	r2, r3, #1
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0x318>)
 80006d6:	601a      	str	r2, [r3, #0]

	 // LSR logic
	 switch (lsr)
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <main+0x318>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d82c      	bhi.n	800073a <main+0x306>
 80006e0:	009a      	lsls	r2, r3, #2
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <main+0x354>)
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	469f      	mov	pc, r3
	 {
		 case 0b000:
			 stop();
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	469c      	mov	ip, r3
 80006ee:	f000 f8a5 	bl	800083c <stop.0>
			 break;
 80006f2:	e027      	b.n	8000744 <main+0x310>
		 case 0b001:
			 left();
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	469c      	mov	ip, r3
 80006f8:	f000 f848 	bl	800078c <left.1>
			 break;
 80006fc:	e022      	b.n	8000744 <main+0x310>
		 case 0b010:
			 left();
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	469c      	mov	ip, r3
 8000702:	f000 f843 	bl	800078c <left.1>
			 break;
 8000706:	e01d      	b.n	8000744 <main+0x310>
		 case 0b011:
			 left();
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	469c      	mov	ip, r3
 800070c:	f000 f83e 	bl	800078c <left.1>
			 break;
 8000710:	e018      	b.n	8000744 <main+0x310>
		 case 0b100:
			 forward();
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	469c      	mov	ip, r3
 8000716:	f7ff fe69 	bl	80003ec <forward.4>
			 break;
 800071a:	e013      	b.n	8000744 <main+0x310>
		 case 0b101:
			 forward();
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	469c      	mov	ip, r3
 8000720:	f7ff fe64 	bl	80003ec <forward.4>
			 break;
 8000724:	e00e      	b.n	8000744 <main+0x310>
		 case 0b110:
			 right();
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	469c      	mov	ip, r3
 800072a:	f000 f853 	bl	80007d4 <right.2>
			 break;
 800072e:	e009      	b.n	8000744 <main+0x310>
		 case 0b111:
			 turnAround();
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	469c      	mov	ip, r3
 8000734:	f000 f872 	bl	800081c <turnAround.3>
			 break;
 8000738:	e004      	b.n	8000744 <main+0x310>
		 default:
			 forward();
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	469c      	mov	ip, r3
 800073e:	f7ff fe55 	bl	80003ec <forward.4>
			 break;
 8000742:	46c0      	nop			; (mov r8, r8)
	 }

	 HAL_Delay(50);
 8000744:	2032      	movs	r0, #50	; 0x32
 8000746:	f000 fbcb 	bl	8000ee0 <HAL_Delay>
	 forward();
 800074a:	e683      	b.n	8000454 <main+0x20>
 800074c:	20000108 	.word	0x20000108
 8000750:	50000400 	.word	0x50000400
 8000754:	20000028 	.word	0x20000028
 8000758:	2000010c 	.word	0x2000010c
 800075c:	20000110 	.word	0x20000110
 8000760:	20000114 	.word	0x20000114
 8000764:	20000118 	.word	0x20000118
 8000768:	2000011c 	.word	0x2000011c
 800076c:	20000120 	.word	0x20000120
 8000770:	20000124 	.word	0x20000124
 8000774:	20000128 	.word	0x20000128
 8000778:	2000012c 	.word	0x2000012c
 800077c:	20000130 	.word	0x20000130
 8000780:	20000134 	.word	0x20000134
 8000784:	20000138 	.word	0x20000138
 8000788:	080030d8 	.word	0x080030d8

0800078c <left.1>:
  {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4663      	mov	r3, ip
 8000794:	607b      	str	r3, [r7, #4]
  	HAL_GPIO_WritePin(motorLeft1_GPIO_Port, motorLeft1_Pin, GPIO_PIN_SET);
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <left.1+0x44>)
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fe0e 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorLeft2_GPIO_Port, motorLeft2_Pin, GPIO_PIN_RESET);
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <left.1+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fe08 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight1_GPIO_Port, motorRight1_Pin, GPIO_PIN_RESET);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <left.1+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	2108      	movs	r1, #8
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fe02 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight2_GPIO_Port, motorRight2_Pin, GPIO_PIN_SET);
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <left.1+0x44>)
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fdfc 	bl	80013be <HAL_GPIO_WritePin>
  }
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	50000c00 	.word	0x50000c00

080007d4 <right.2>:
  {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4663      	mov	r3, ip
 80007dc:	607b      	str	r3, [r7, #4]
  	HAL_GPIO_WritePin(motorLeft1_GPIO_Port, motorLeft1_Pin, GPIO_PIN_RESET);
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <right.2+0x44>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fdea 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorLeft2_GPIO_Port, motorLeft2_Pin, GPIO_PIN_SET);
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <right.2+0x44>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fde4 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight1_GPIO_Port, motorRight1_Pin, GPIO_PIN_SET);
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <right.2+0x44>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	2108      	movs	r1, #8
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fdde 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight2_GPIO_Port, motorRight2_Pin, GPIO_PIN_RESET);
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <right.2+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fdd8 	bl	80013be <HAL_GPIO_WritePin>
  }
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	50000c00 	.word	0x50000c00

0800081c <turnAround.3>:
  {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4664      	mov	r4, ip
 8000824:	4663      	mov	r3, ip
 8000826:	607b      	str	r3, [r7, #4]
  	right();
 8000828:	46a4      	mov	ip, r4
 800082a:	f7ff ffd3 	bl	80007d4 <right.2>
  	right();
 800082e:	46a4      	mov	ip, r4
 8000830:	f7ff ffd0 	bl	80007d4 <right.2>
  }
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b003      	add	sp, #12
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <stop.0>:
  {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4663      	mov	r3, ip
 8000844:	607b      	str	r3, [r7, #4]
  	HAL_GPIO_WritePin(motorLeft1_GPIO_Port, motorLeft1_Pin, GPIO_PIN_RESET);
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <stop.0+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	2120      	movs	r1, #32
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fdb6 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorLeft2_GPIO_Port, motorLeft2_Pin, GPIO_PIN_RESET);
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <stop.0+0x44>)
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fdb0 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight1_GPIO_Port, motorRight1_Pin, GPIO_PIN_RESET);
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <stop.0+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fdaa 	bl	80013be <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(motorRight2_GPIO_Port, motorRight2_Pin, GPIO_PIN_RESET);
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <stop.0+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fda4 	bl	80013be <HAL_GPIO_WritePin>
  }
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	50000c00 	.word	0x50000c00

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b093      	sub	sp, #76	; 0x4c
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	2414      	movs	r4, #20
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2334      	movs	r3, #52	; 0x34
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f002 fbe7 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	0018      	movs	r0, r3
 800089e:	2310      	movs	r3, #16
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 fbe0 	bl	8003068 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fda3 	bl	80013f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	0052      	lsls	r2, r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2240      	movs	r2, #64	; 0x40
 80008cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2202      	movs	r2, #2
 80008d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2202      	movs	r2, #2
 80008d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2208      	movs	r2, #8
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	0292      	lsls	r2, r2, #10
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	0592      	lsls	r2, r2, #22
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fdc9 	bl	8001490 <HAL_RCC_OscConfig>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000902:	f000 f973 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2102      	movs	r1, #2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f8c4 	bl	8001ab0 <HAL_RCC_ClockConfig>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800092c:	f000 f95e 	bl	8000bec <Error_Handler>
  }
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b013      	add	sp, #76	; 0x4c
 8000936:	bd90      	pop	{r4, r7, pc}

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	2310      	movs	r3, #16
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	2310      	movs	r3, #16
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f002 fb8d 	bl	8003068 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	0018      	movs	r0, r3
 8000952:	230c      	movs	r3, #12
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fb86 	bl	8003068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_TIM1_Init+0xac>)
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <MX_TIM1_Init+0xb0>)
 8000960:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_TIM1_Init+0xac>)
 8000964:	223f      	movs	r2, #63	; 0x3f
 8000966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM1_Init+0xac>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM1_Init+0xac>)
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <MX_TIM1_Init+0xb4>)
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM1_Init+0xac>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_TIM1_Init+0xac>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_TIM1_Init+0xac>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_TIM1_Init+0xac>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fb6f 	bl	800206c <HAL_TIM_Base_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 f92b 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	2110      	movs	r1, #16
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0152      	lsls	r2, r2, #5
 800099e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_TIM1_Init+0xac>)
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 fbb8 	bl	800211c <HAL_TIM_ConfigClockSource>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f91c 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c6:	1d3a      	adds	r2, r7, #4
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_TIM1_Init+0xac>)
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fd9b 	bl	8002508 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80009d6:	f000 f909 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b008      	add	sp, #32
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	20000028 	.word	0x20000028
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	0000ffff 	.word	0x0000ffff

080009f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 80009f6:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <MX_USART2_UART_Init+0x98>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 80009fc:	22e1      	movs	r2, #225	; 0xe1
 80009fe:	0252      	lsls	r2, r2, #9
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fdcc 	bl	80025d8 <HAL_UART_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f8d2 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fa2b 	bl	8002ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f8c9 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fa62 	bl	8002f28 <HAL_UARTEx_SetRxFifoThreshold>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f8c0 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x94>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 f9e0 	bl	8002e34 <HAL_UARTEx_DisableFifoMode>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f8b8 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000074 	.word	0x20000074
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	2414      	movs	r4, #20
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	0018      	movs	r0, r3
 8000a98:	2314      	movs	r3, #20
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f002 fae3 	bl	8003068 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
 8000aae:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aba:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac6:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	2220      	movs	r2, #32
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ade:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000af0:	2108      	movs	r1, #8
 8000af2:	430a      	orrs	r2, r1
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
 8000af6:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	2208      	movs	r2, #8
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b08:	2102      	movs	r1, #2
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b0e:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <MX_GPIO_Init+0x154>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	2202      	movs	r2, #2
 8000b14:	4013      	ands	r3, r2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fc4b 	bl	80013be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motorRight2_Pin|motorRight1_Pin|motorLeft2_Pin|motorLeft1_Pin, GPIO_PIN_RESET);
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	213c      	movs	r1, #60	; 0x3c
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fc45 	bl	80013be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, trigRight_Pin|trigStraight_Pin|trigLeft_Pin, GPIO_PIN_RESET);
 8000b34:	23a8      	movs	r3, #168	; 0xa8
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	482b      	ldr	r0, [pc, #172]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f000 fc3e 	bl	80013be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2220      	movs	r2, #32
 8000b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2202      	movs	r2, #2
 8000b58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	193a      	adds	r2, r7, r4
 8000b5c:	23a0      	movs	r3, #160	; 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 faaa 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : motorRight2_Pin motorRight1_Pin motorLeft2_Pin motorLeft1_Pin */
  GPIO_InitStruct.Pin = motorRight2_Pin|motorRight1_Pin|motorLeft2_Pin|motorLeft1_Pin;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	223c      	movs	r2, #60	; 0x3c
 8000b6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2201      	movs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <MX_GPIO_Init+0x158>)
 8000b84:	0019      	movs	r1, r3
 8000b86:	0010      	movs	r0, r2
 8000b88:	f000 fa98 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : trigRight_Pin trigStraight_Pin trigLeft_Pin */
  GPIO_InitStruct.Pin = trigRight_Pin|trigStraight_Pin|trigLeft_Pin;
 8000b8c:	0021      	movs	r1, r4
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	22a8      	movs	r2, #168	; 0xa8
 8000b92:	0052      	lsls	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	000c      	movs	r4, r1
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000bae:	0019      	movs	r1, r3
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	f000 fa83 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : echoRight_Pin echoStraight_Pin echoLeft_Pin */
  GPIO_InitStruct.Pin = echoRight_Pin|echoStraight_Pin|echoLeft_Pin;
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	22a8      	movs	r2, #168	; 0xa8
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <MX_GPIO_Init+0x15c>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	f000 fa72 	bl	80010bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b00b      	add	sp, #44	; 0x2c
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	50000c00 	.word	0x50000c00
 8000be8:	50000400 	.word	0x50000400

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4013      	ands	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0549      	lsls	r1, r1, #21
 8000c20:	430a      	orrs	r2, r1
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	055b      	lsls	r3, r3, #21
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c32:	23c0      	movs	r3, #192	; 0xc0
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f976 	bl	8000f28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10d      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	0109      	lsls	r1, r1, #4
 8000c64:	430a      	orrs	r2, r1
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40012c00 	.word	0x40012c00
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b091      	sub	sp, #68	; 0x44
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	232c      	movs	r3, #44	; 0x2c
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	0018      	movs	r0, r3
 8000c96:	2314      	movs	r3, #20
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f002 f9e4 	bl	8003068 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	2410      	movs	r4, #16
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	231c      	movs	r3, #28
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f002 f9dc 	bl	8003068 <memset>
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <HAL_UART_MspInit+0xb8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d13e      	bne.n	8000d38 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 f89b 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd2:	f7ff ff8b 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0289      	lsls	r1, r1, #10
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	029b      	lsls	r3, r3, #10
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_UART_MspInit+0xbc>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0a:	212c      	movs	r1, #44	; 0x2c
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2202      	movs	r2, #2
 8000d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2201      	movs	r2, #1
 8000d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	187a      	adds	r2, r7, r1
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f9c2 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b011      	add	sp, #68	; 0x44
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f89c 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fff7 	bl	8000d76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dae:	f002 f963 	bl	8003078 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000db2:	f7ff fb3f 	bl	8000434 <main>

08000db6 <LoopForever>:

LoopForever:
  b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	20000140 	.word	0x20000140

08000dd0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x3c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Init+0x3c>)
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	0049      	lsls	r1, r1, #1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f810 	bl	8000e14 <HAL_InitTick>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fefa 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_InitTick+0x88>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d02b      	beq.n	8000e84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_InitTick+0x8c>)
 8000e2e:	681c      	ldr	r4, [r3, #0]
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_InitTick+0x88>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	0019      	movs	r1, r3
 8000e36:	23fa      	movs	r3, #250	; 0xfa
 8000e38:	0098      	lsls	r0, r3, #2
 8000e3a:	f7ff f961 	bl	8000100 <__udivsi3>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	0019      	movs	r1, r3
 8000e42:	0020      	movs	r0, r4
 8000e44:	f7ff f95c 	bl	8000100 <__udivsi3>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f929 	bl	80010a2 <HAL_SYSTICK_Config>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d112      	bne.n	8000e7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d80a      	bhi.n	8000e70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f908 	bl	8001078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_InitTick+0x90>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e00d      	b.n	8000e8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e008      	b.n	8000e8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e003      	b.n	8000e8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	781b      	ldrb	r3, [r3, #0]
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b005      	add	sp, #20
 8000e98:	bd90      	pop	{r4, r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x1c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	18d2      	adds	r2, r2, r3
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	2000013c 	.word	0x2000013c

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_GetTick+0x10>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	2000013c 	.word	0x2000013c

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff fff0 	bl	8000ecc <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	001a      	movs	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	189b      	adds	r3, r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	f7ff ffe0 	bl	8000ecc <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	fffff9ff 	.word	0xfffff9ff

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b7f      	cmp	r3, #127	; 0x7f
 8000f68:	d828      	bhi.n	8000fbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <__NVIC_SetPriority+0xd4>)
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	33c0      	adds	r3, #192	; 0xc0
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	589b      	ldr	r3, [r3, r2]
 8000f7a:	1dfa      	adds	r2, r7, #7
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	0011      	movs	r1, r2
 8000f80:	2203      	movs	r2, #3
 8000f82:	400a      	ands	r2, r1
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	21ff      	movs	r1, #255	; 0xff
 8000f88:	4091      	lsls	r1, r2
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	401a      	ands	r2, r3
 8000f90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	22ff      	movs	r2, #255	; 0xff
 8000f98:	401a      	ands	r2, r3
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	4003      	ands	r3, r0
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa8:	481f      	ldr	r0, [pc, #124]	; (8001028 <__NVIC_SetPriority+0xd4>)
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	33c0      	adds	r3, #192	; 0xc0
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fba:	e031      	b.n	8001020 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <__NVIC_SetPriority+0xd8>)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3306      	adds	r3, #6
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1dfa      	adds	r2, r7, #7
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	0011      	movs	r1, r2
 8000fdc:	2203      	movs	r2, #3
 8000fde:	400a      	ands	r2, r1
 8000fe0:	00d2      	lsls	r2, r2, #3
 8000fe2:	21ff      	movs	r1, #255	; 0xff
 8000fe4:	4091      	lsls	r1, r2
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	43d2      	mvns	r2, r2
 8000fea:	401a      	ands	r2, r3
 8000fec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	019b      	lsls	r3, r3, #6
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	4003      	ands	r3, r0
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <__NVIC_SetPriority+0xd8>)
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	001c      	movs	r4, r3
 800100c:	230f      	movs	r3, #15
 800100e:	4023      	ands	r3, r4
 8001010:	3b08      	subs	r3, #8
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	430a      	orrs	r2, r1
 8001016:	3306      	adds	r3, #6
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	18c3      	adds	r3, r0, r3
 800101c:	3304      	adds	r3, #4
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b003      	add	sp, #12
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	045b      	lsls	r3, r3, #17
 8001040:	429a      	cmp	r2, r3
 8001042:	d301      	bcc.n	8001048 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001044:	2301      	movs	r3, #1
 8001046:	e010      	b.n	800106a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <SysTick_Config+0x44>)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	3a01      	subs	r2, #1
 800104e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001050:	2301      	movs	r3, #1
 8001052:	425b      	negs	r3, r3
 8001054:	2103      	movs	r1, #3
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff ff7c 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x44>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x44>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	210f      	movs	r1, #15
 8001084:	187b      	adds	r3, r7, r1
 8001086:	1c02      	adds	r2, r0, #0
 8001088:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	187b      	adds	r3, r7, r1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b25b      	sxtb	r3, r3
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b004      	add	sp, #16
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff ffbf 	bl	8001030 <SysTick_Config>
 80010b2:	0003      	movs	r3, r0
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ca:	e147      	b.n	800135c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4091      	lsls	r1, r2
 80010d6:	000a      	movs	r2, r1
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d100      	bne.n	80010e4 <HAL_GPIO_Init+0x28>
 80010e2:	e138      	b.n	8001356 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d005      	beq.n	80010fc <HAL_GPIO_Init+0x40>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d130      	bne.n	800115e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001132:	2201      	movs	r2, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	2201      	movs	r2, #1
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	4013      	ands	r3, r2
 8001166:	2b03      	cmp	r3, #3
 8001168:	d017      	beq.n	800119a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2203      	movs	r2, #3
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d123      	bne.n	80011ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2207      	movs	r2, #7
 80011b8:	4013      	ands	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2107      	movs	r1, #7
 80011d2:	400b      	ands	r3, r1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	6939      	ldr	r1, [r7, #16]
 80011ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	401a      	ands	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	23c0      	movs	r3, #192	; 0xc0
 8001228:	029b      	lsls	r3, r3, #10
 800122a:	4013      	ands	r3, r2
 800122c:	d100      	bne.n	8001230 <HAL_GPIO_Init+0x174>
 800122e:	e092      	b.n	8001356 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3318      	adds	r3, #24
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	589b      	ldr	r3, [r3, r2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2203      	movs	r2, #3
 8001242:	4013      	ands	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	220f      	movs	r2, #15
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	43da      	mvns	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	23a0      	movs	r3, #160	; 0xa0
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1ca>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a45      	ldr	r2, [pc, #276]	; (8001378 <HAL_GPIO_Init+0x2bc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1c6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a44      	ldr	r2, [pc, #272]	; (800137c <HAL_GPIO_Init+0x2c0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1c2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a43      	ldr	r2, [pc, #268]	; (8001380 <HAL_GPIO_Init+0x2c4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1be>
 8001276:	2303      	movs	r3, #3
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x1cc>
 800127a:	2305      	movs	r3, #5
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x1cc>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x1cc>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x1cc>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	2103      	movs	r1, #3
 800128c:	400a      	ands	r2, r1
 800128e:	00d2      	lsls	r2, r2, #3
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001298:	4936      	ldr	r1, [pc, #216]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3318      	adds	r3, #24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	035b      	lsls	r3, r3, #13
 80012be:	4013      	ands	r3, r2
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	039b      	lsls	r3, r3, #14
 80012e8:	4013      	ands	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 80012fc:	2384      	movs	r3, #132	; 0x84
 80012fe:	58d3      	ldr	r3, [r2, r3]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	4013      	ands	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001320:	4914      	ldr	r1, [pc, #80]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 8001322:	2284      	movs	r2, #132	; 0x84
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	58d3      	ldr	r3, [r2, r3]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	4013      	ands	r3, r2
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134e:	4909      	ldr	r1, [pc, #36]	; (8001374 <HAL_GPIO_Init+0x2b8>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	40da      	lsrs	r2, r3
 8001364:	1e13      	subs	r3, r2, #0
 8001366:	d000      	beq.n	800136a <HAL_GPIO_Init+0x2ae>
 8001368:	e6b0      	b.n	80010cc <HAL_GPIO_Init+0x10>
  }
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021800 	.word	0x40021800
 8001378:	50000400 	.word	0x50000400
 800137c:	50000800 	.word	0x50000800
 8001380:	50000c00 	.word	0x50000c00

08001384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	000a      	movs	r2, r1
 800138e:	1cbb      	adds	r3, r7, #2
 8001390:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	1cba      	adds	r2, r7, #2
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	4013      	ands	r3, r2
 800139c:	d004      	beq.n	80013a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e003      	b.n	80013b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	0008      	movs	r0, r1
 80013c8:	0011      	movs	r1, r2
 80013ca:	1cbb      	adds	r3, r7, #2
 80013cc:	1c02      	adds	r2, r0, #0
 80013ce:	801a      	strh	r2, [r3, #0]
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	1c0a      	adds	r2, r1, #0
 80013d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d6:	1c7b      	adds	r3, r7, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	881a      	ldrh	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	429a      	cmp	r2, r3
 800141a:	d11f      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	0013      	movs	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	189b      	adds	r3, r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4912      	ldr	r1, [pc, #72]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe fe68 	bl	8000100 <__udivsi3>
 8001430:	0003      	movs	r3, r0
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	e008      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3b01      	subs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e009      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	401a      	ands	r2, r3
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	429a      	cmp	r2, r3
 800145a:	d0ed      	beq.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	40007000 	.word	0x40007000
 800146c:	fffff9ff 	.word	0xfffff9ff
 8001470:	20000000 	.word	0x20000000
 8001474:	000f4240 	.word	0x000f4240

08001478 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <LL_RCC_GetAPB1Prescaler+0x14>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	23e0      	movs	r3, #224	; 0xe0
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	4013      	ands	r3, r2
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e2f3      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x1e>
 80014ac:	e07c      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4bc3      	ldr	r3, [pc, #780]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b8:	4bc0      	ldr	r3, [pc, #768]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2203      	movs	r2, #3
 80014be:	4013      	ands	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d102      	bne.n	80014ce <HAL_RCC_OscConfig+0x3e>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d002      	beq.n	80014d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4bb9      	ldr	r3, [pc, #740]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	d062      	beq.n	80015a6 <HAL_RCC_OscConfig+0x116>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15e      	bne.n	80015a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2ce      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x78>
 80014f8:	4bb0      	ldr	r3, [pc, #704]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4baf      	ldr	r3, [pc, #700]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0249      	lsls	r1, r1, #9
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e020      	b.n	800154a <HAL_RCC_OscConfig+0xba>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	02db      	lsls	r3, r3, #11
 8001510:	429a      	cmp	r2, r3
 8001512:	d10e      	bne.n	8001532 <HAL_RCC_OscConfig+0xa2>
 8001514:	4ba9      	ldr	r3, [pc, #676]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba8      	ldr	r3, [pc, #672]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	02c9      	lsls	r1, r1, #11
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4ba6      	ldr	r3, [pc, #664]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4ba5      	ldr	r3, [pc, #660]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0249      	lsls	r1, r1, #9
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0xba>
 8001532:	4ba2      	ldr	r3, [pc, #648]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001538:	49a1      	ldr	r1, [pc, #644]	; (80017c0 <HAL_RCC_OscConfig+0x330>)
 800153a:	400a      	ands	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4b9f      	ldr	r3, [pc, #636]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b9e      	ldr	r3, [pc, #632]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001544:	499f      	ldr	r1, [pc, #636]	; (80017c4 <HAL_RCC_OscConfig+0x334>)
 8001546:	400a      	ands	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d014      	beq.n	800157c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fcbb 	bl	8000ecc <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fcb6 	bl	8000ecc <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e28d      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4b93      	ldr	r3, [pc, #588]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	4013      	ands	r3, r2
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xcc>
 800157a:	e015      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fca6 	bl	8000ecc <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fca1 	bl	8000ecc <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e278      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	029b      	lsls	r3, r3, #10
 80015a0:	4013      	ands	r3, r2
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0xf6>
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x124>
 80015b2:	e099      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2238      	movs	r2, #56	; 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x144>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d002      	beq.n	80015da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d135      	bne.n	8001646 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015da:	4b78      	ldr	r3, [pc, #480]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4013      	ands	r3, r2
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x162>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e24b      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b72      	ldr	r3, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	021a      	lsls	r2, r3, #8
 8001602:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x33c>)
 8001614:	4013      	ands	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0adb      	lsrs	r3, r3, #11
 8001628:	2207      	movs	r2, #7
 800162a:	4013      	ands	r3, r2
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x340>)
 800162e:	40da      	lsrs	r2, r3
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_RCC_OscConfig+0x344>)
 8001632:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x348>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff fbeb 	bl	8000e14 <HAL_InitTick>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d051      	beq.n	80016e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e221      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x33c>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	4b57      	ldr	r3, [pc, #348]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc2c 	bl	8000ecc <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fc27 	bl	8000ecc <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1fe      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_RCC_OscConfig+0x338>)
 800169e:	4013      	ands	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	021a      	lsls	r2, r3, #8
 80016a8:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	e01b      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016b6:	4949      	ldr	r1, [pc, #292]	; (80017dc <HAL_RCC_OscConfig+0x34c>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc06 	bl	8000ecc <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc01 	bl	8000ecc <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1d8      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x236>
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2208      	movs	r2, #8
 80016ee:	4013      	ands	r3, r2
 80016f0:	d047      	beq.n	8001782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2238      	movs	r2, #56	; 0x38
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b18      	cmp	r3, #24
 80016fc:	d10a      	bne.n	8001714 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d03c      	beq.n	8001782 <HAL_RCC_OscConfig+0x2f2>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d138      	bne.n	8001782 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e1ba      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d019      	beq.n	8001750 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800171e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fbd0 	bl	8000ecc <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fbcb 	bl	8000ecc <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1a2      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d0f1      	beq.n	8001732 <HAL_RCC_OscConfig+0x2a2>
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001756:	2101      	movs	r1, #1
 8001758:	438a      	bics	r2, r1
 800175a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fbb6 	bl	8000ecc <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fbb1 	bl	8000ecc <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e188      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 800177a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d1f1      	bne.n	8001766 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	d100      	bne.n	800178e <HAL_RCC_OscConfig+0x2fe>
 800178c:	e0c6      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	231f      	movs	r3, #31
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2238      	movs	r2, #56	; 0x38
 800179c:	4013      	ands	r3, r2
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d11e      	bne.n	80017e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x32c>)
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d100      	bne.n	80017ae <HAL_RCC_OscConfig+0x31e>
 80017ac:	e0b6      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d000      	beq.n	80017b8 <HAL_RCC_OscConfig+0x328>
 80017b6:	e0b1      	b.n	800191c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e166      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	fffeffff 	.word	0xfffeffff
 80017c4:	fffbffff 	.word	0xfffbffff
 80017c8:	ffff80ff 	.word	0xffff80ff
 80017cc:	ffffc7ff 	.word	0xffffc7ff
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004
 80017dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017e0:	4bac      	ldr	r3, [pc, #688]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80017e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	055b      	lsls	r3, r3, #21
 80017e8:	4013      	ands	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_OscConfig+0x360>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x362>
 80017f0:	2300      	movs	r3, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d011      	beq.n	800181a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4ba7      	ldr	r3, [pc, #668]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80017f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fa:	4ba6      	ldr	r3, [pc, #664]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
 8001804:	4ba3      	ldr	r3, [pc, #652]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001812:	231f      	movs	r3, #31
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b9f      	ldr	r3, [pc, #636]	; (8001a98 <HAL_RCC_OscConfig+0x608>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4013      	ands	r3, r2
 8001824:	d11a      	bne.n	800185c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001826:	4b9c      	ldr	r3, [pc, #624]	; (8001a98 <HAL_RCC_OscConfig+0x608>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b9b      	ldr	r3, [pc, #620]	; (8001a98 <HAL_RCC_OscConfig+0x608>)
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	0049      	lsls	r1, r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb4a 	bl	8000ecc <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fb45 	bl	8000ecc <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e11c      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x608>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x3e2>
 8001864:	4b8b      	ldr	r3, [pc, #556]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001868:	4b8a      	ldr	r3, [pc, #552]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x404>
 800187a:	4b86      	ldr	r3, [pc, #536]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800187c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800187e:	4b85      	ldr	r3, [pc, #532]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	65da      	str	r2, [r3, #92]	; 0x5c
 8001886:	4b83      	ldr	r3, [pc, #524]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800188a:	4b82      	ldr	r3, [pc, #520]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	65da      	str	r2, [r3, #92]	; 0x5c
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
 8001894:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a0:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80018a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d014      	beq.n	80018de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb0a 	bl	8000ecc <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fb05 	bl	8000ecc <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a74      	ldr	r2, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x60c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0db      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x42e>
 80018dc:	e013      	b.n	8001906 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff faf5 	bl	8000ecc <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e6:	e009      	b.n	80018fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff faf0 	bl	8000ecc <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x60c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0c6      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001906:	231f      	movs	r3, #31
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001914:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001916:	4962      	ldr	r1, [pc, #392]	; (8001aa0 <HAL_RCC_OscConfig+0x610>)
 8001918:	400a      	ands	r2, r1
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x496>
 8001924:	e0b0      	b.n	8001a88 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001926:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	4013      	ands	r3, r2
 800192e:	2b10      	cmp	r3, #16
 8001930:	d100      	bne.n	8001934 <HAL_RCC_OscConfig+0x4a4>
 8001932:	e078      	b.n	8001a26 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d153      	bne.n	80019e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001942:	4958      	ldr	r1, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x614>)
 8001944:	400a      	ands	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fac0 	bl	8000ecc <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fabb 	bl	8000ecc <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e092      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	049b      	lsls	r3, r3, #18
 800196c:	4013      	ands	r3, r2
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x618>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	431a      	orrs	r2, r3
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 800199a:	430a      	orrs	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0449      	lsls	r1, r1, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0549      	lsls	r1, r1, #21
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa87 	bl	8000ecc <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fa82 	bl	8000ecc <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e059      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x534>
 80019e2:	e051      	b.n	8001a88 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 80019ea:	492e      	ldr	r1, [pc, #184]	; (8001aa4 <HAL_RCC_OscConfig+0x614>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa6c 	bl	8000ecc <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff fa67 	bl	8000ecc <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e03e      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	049b      	lsls	r3, r3, #18
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001a1e:	4923      	ldr	r1, [pc, #140]	; (8001aac <HAL_RCC_OscConfig+0x61c>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	e030      	b.n	8001a88 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02b      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_RCC_OscConfig+0x604>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d11e      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2270      	movs	r2, #112	; 0x70
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d117      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	23fe      	movs	r3, #254	; 0xfe
 8001a58:	01db      	lsls	r3, r3, #7
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d10e      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	23f8      	movs	r3, #248	; 0xf8
 8001a6a:	039b      	lsls	r3, r3, #14
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	0f5b      	lsrs	r3, r3, #29
 8001a7a:	075a      	lsls	r2, r3, #29
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b008      	add	sp, #32
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	efffffff 	.word	0xefffffff
 8001aa4:	feffffff 	.word	0xfeffffff
 8001aa8:	1fc1808c 	.word	0x1fc1808c
 8001aac:	effefffc 	.word	0xeffefffc

08001ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0e9      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d91e      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b73      	ldr	r3, [pc, #460]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f9f2 	bl	8000ecc <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7ff f9ed 	bl	8000ecc <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_RCC_ClockConfig+0x1f4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0ca      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2207      	movs	r2, #7
 8001b08:	4013      	ands	r3, r2
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d015      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4013      	ands	r3, r2
 8001b22:	d006      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b24:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2a:	21e0      	movs	r1, #224	; 0xe0
 8001b2c:	01c9      	lsls	r1, r1, #7
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <HAL_RCC_ClockConfig+0x1fc>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d057      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	029b      	lsls	r3, r3, #10
 8001b60:	4013      	ands	r3, r2
 8001b62:	d12b      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e097      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	049b      	lsls	r3, r3, #18
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d11f      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e08b      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	d113      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e07f      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e074      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bae:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e06d      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f97c 	bl	8000ecc <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7ff f977 	bl	8000ecc <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <HAL_RCC_ClockConfig+0x1f4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e054      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	; 0x38
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1ec      	bne.n	8001bda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2207      	movs	r2, #7
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d21e      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2207      	movs	r2, #7
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f954 	bl	8000ecc <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7ff f94f 	bl	8000ecc <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e02c      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2207      	movs	r2, #7
 8001c44:	4013      	ands	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2204      	movs	r2, #4
 8001c52:	4013      	ands	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_RCC_ClockConfig+0x200>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c6a:	f000 f829 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	0001      	movs	r1, r0
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	220f      	movs	r2, #15
 8001c78:	401a      	ands	r2, r3
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_RCC_ClockConfig+0x204>)
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	58d3      	ldr	r3, [r2, r3]
 8001c80:	221f      	movs	r2, #31
 8001c82:	4013      	ands	r3, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	40da      	lsrs	r2, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x208>)
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x20c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff f8bf 	bl	8000e14 <HAL_InitTick>
 8001c96:	0003      	movs	r3, r0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	fffff0ff 	.word	0xfffff0ff
 8001cb0:	ffff8fff 	.word	0xffff8fff
 8001cb4:	080030f8 	.word	0x080030f8
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2238      	movs	r2, #56	; 0x38
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d10f      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0adb      	lsrs	r3, r3, #11
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2201      	movs	r2, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	4835      	ldr	r0, [pc, #212]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ce6:	f7fe fa0b 	bl	8000100 <__udivsi3>
 8001cea:	0003      	movs	r3, r0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e05d      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e054      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2238      	movs	r2, #56	; 0x38
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d138      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2203      	movs	r2, #3
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	3301      	adds	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d10d      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	4824      	ldr	r0, [pc, #144]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d30:	f7fe f9e6 	bl	8000100 <__udivsi3>
 8001d34:	0003      	movs	r3, r0
 8001d36:	0019      	movs	r1, r3
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	227f      	movs	r2, #127	; 0x7f
 8001d40:	4013      	ands	r3, r2
 8001d42:	434b      	muls	r3, r1
 8001d44:	617b      	str	r3, [r7, #20]
        break;
 8001d46:	e00d      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	481c      	ldr	r0, [pc, #112]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d4c:	f7fe f9d8 	bl	8000100 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	227f      	movs	r2, #127	; 0x7f
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	434b      	muls	r3, r1
 8001d60:	617b      	str	r3, [r7, #20]
        break;
 8001d62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0f5b      	lsrs	r3, r3, #29
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7fe f9c3 	bl	8000100 <__udivsi3>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e015      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2238      	movs	r2, #56	; 0x38
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d103      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2238      	movs	r2, #56	; 0x38
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b18      	cmp	r3, #24
 8001d9e:	d103      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001da0:	23fa      	movs	r3, #250	; 0xfa
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e001      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dac:	693b      	ldr	r3, [r7, #16]
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b006      	add	sp, #24
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	007a1200 	.word	0x007a1200

08001dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ddc:	f7ff fff2 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de0:	0004      	movs	r4, r0
 8001de2:	f7ff fb49 	bl	8001478 <LL_RCC_GetAPB1Prescaler>
 8001de6:	0003      	movs	r3, r0
 8001de8:	0b1a      	lsrs	r2, r3, #12
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	58d3      	ldr	r3, [r2, r3]
 8001df0:	221f      	movs	r2, #31
 8001df2:	4013      	ands	r3, r2
 8001df4:	40dc      	lsrs	r4, r3
 8001df6:	0023      	movs	r3, r4
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	08003138 	.word	0x08003138

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e0c:	2313      	movs	r3, #19
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e14:	2312      	movs	r3, #18
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e28:	e0a3      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	183b      	adds	r3, r7, r0
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	055b      	lsls	r3, r3, #21
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d110      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b83      	ldr	r3, [pc, #524]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e42:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	0549      	lsls	r1, r1, #21
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e4c:	4b7f      	ldr	r3, [pc, #508]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e60:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0049      	lsls	r1, r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e6e:	f7ff f82d 	bl	8000ecc <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e76:	e00b      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7ff f828 	bl	8000ecc <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d904      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e86:	2313      	movs	r3, #19
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
        break;
 8001e8e:	e005      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e9c:	2313      	movs	r3, #19
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d154      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ea6:	4b69      	ldr	r3, [pc, #420]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d019      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d014      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0249      	lsls	r1, r1, #9
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001edc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ede:	4b5b      	ldr	r3, [pc, #364]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee0:	495d      	ldr	r1, [pc, #372]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ee6:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ffea 	bl	8000ecc <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efc:	e00c      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe ffe5 	bl	8000ecc <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d904      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f0e:	2313      	movs	r3, #19
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
            break;
 8001f16:	e004      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0ed      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f22:	2313      	movs	r3, #19
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2c:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f40:	e00c      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f42:	2312      	movs	r3, #18
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2213      	movs	r2, #19
 8001f48:	18ba      	adds	r2, r7, r2
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e005      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f50:	2312      	movs	r3, #18
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2213      	movs	r2, #19
 8001f56:	18ba      	adds	r2, r7, r2
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f5c:	2311      	movs	r3, #17
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f6c:	493c      	ldr	r1, [pc, #240]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	2203      	movs	r2, #3
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2202      	movs	r2, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	01db      	lsls	r3, r3, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d015      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	0899      	lsrs	r1, r3, #2
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	05db      	lsls	r3, r3, #23
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d106      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0249      	lsls	r1, r1, #9
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	4013      	ands	r3, r2
 800200e:	d016      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002020:	430a      	orrs	r2, r1
 8002022:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	01db      	lsls	r3, r3, #7
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0249      	lsls	r1, r1, #9
 800203a:	430a      	orrs	r2, r1
 800203c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800203e:	2312      	movs	r3, #18
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	fffffcff 	.word	0xfffffcff
 8002058:	fffeffff 	.word	0xfffeffff
 800205c:	00001388 	.word	0x00001388
 8002060:	efffffff 	.word	0xefffffff
 8002064:	ffffcfff 	.word	0xffffcfff
 8002068:	ffff3fff 	.word	0xffff3fff

0800206c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e04a      	b.n	8002114 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223d      	movs	r2, #61	; 0x3d
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223c      	movs	r2, #60	; 0x3c
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe fdd7 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	223d      	movs	r2, #61	; 0x3d
 800209e:	2102      	movs	r1, #2
 80020a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	0019      	movs	r1, r3
 80020ac:	0010      	movs	r0, r2
 80020ae:	f000 f90b 	bl	80022c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2248      	movs	r2, #72	; 0x48
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223e      	movs	r2, #62	; 0x3e
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223f      	movs	r2, #63	; 0x3f
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2241      	movs	r2, #65	; 0x41
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2242      	movs	r2, #66	; 0x42
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2243      	movs	r2, #67	; 0x43
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2244      	movs	r2, #68	; 0x44
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2245      	movs	r2, #69	; 0x45
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2246      	movs	r2, #70	; 0x46
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2247      	movs	r2, #71	; 0x47
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	223d      	movs	r2, #61	; 0x3d
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	223c      	movs	r2, #60	; 0x3c
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIM_ConfigClockSource+0x20>
 8002138:	2302      	movs	r3, #2
 800213a:	e0bc      	b.n	80022b6 <HAL_TIM_ConfigClockSource+0x19a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	223c      	movs	r2, #60	; 0x3c
 8002140:	2101      	movs	r1, #1
 8002142:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	223d      	movs	r2, #61	; 0x3d
 8002148:	2102      	movs	r1, #2
 800214a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4a5a      	ldr	r2, [pc, #360]	; (80022c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4a59      	ldr	r2, [pc, #356]	; (80022c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	0192      	lsls	r2, r2, #6
 8002174:	4293      	cmp	r3, r2
 8002176:	d040      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xde>
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0192      	lsls	r2, r2, #6
 800217c:	4293      	cmp	r3, r2
 800217e:	d900      	bls.n	8002182 <HAL_TIM_ConfigClockSource+0x66>
 8002180:	e088      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	0152      	lsls	r2, r2, #5
 8002186:	4293      	cmp	r3, r2
 8002188:	d100      	bne.n	800218c <HAL_TIM_ConfigClockSource+0x70>
 800218a:	e088      	b.n	800229e <HAL_TIM_ConfigClockSource+0x182>
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0152      	lsls	r2, r2, #5
 8002190:	4293      	cmp	r3, r2
 8002192:	d900      	bls.n	8002196 <HAL_TIM_ConfigClockSource+0x7a>
 8002194:	e07e      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 8002196:	2b70      	cmp	r3, #112	; 0x70
 8002198:	d018      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0xb0>
 800219a:	d900      	bls.n	800219e <HAL_TIM_ConfigClockSource+0x82>
 800219c:	e07a      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 800219e:	2b60      	cmp	r3, #96	; 0x60
 80021a0:	d04f      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0x126>
 80021a2:	d900      	bls.n	80021a6 <HAL_TIM_ConfigClockSource+0x8a>
 80021a4:	e076      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 80021a6:	2b50      	cmp	r3, #80	; 0x50
 80021a8:	d03b      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0x106>
 80021aa:	d900      	bls.n	80021ae <HAL_TIM_ConfigClockSource+0x92>
 80021ac:	e072      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d057      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x146>
 80021b2:	d900      	bls.n	80021b6 <HAL_TIM_ConfigClockSource+0x9a>
 80021b4:	e06e      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 80021b6:	2b30      	cmp	r3, #48	; 0x30
 80021b8:	d063      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x166>
 80021ba:	d86b      	bhi.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d060      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x166>
 80021c0:	d868      	bhi.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d05d      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x166>
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d05b      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0x166>
 80021ca:	e063      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021dc:	f000 f974 	bl	80024c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2277      	movs	r2, #119	; 0x77
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	609a      	str	r2, [r3, #8]
      break;
 80021f8:	e052      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800220a:	f000 f95d 	bl	80024c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	01c9      	lsls	r1, r1, #7
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
      break;
 8002220:	e03e      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800222e:	001a      	movs	r2, r3
 8002230:	f000 f8ce 	bl	80023d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2150      	movs	r1, #80	; 0x50
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f928 	bl	8002490 <TIM_ITRx_SetConfig>
      break;
 8002240:	e02e      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800224e:	001a      	movs	r2, r3
 8002250:	f000 f8ec 	bl	800242c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2160      	movs	r1, #96	; 0x60
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f918 	bl	8002490 <TIM_ITRx_SetConfig>
      break;
 8002260:	e01e      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800226e:	001a      	movs	r2, r3
 8002270:	f000 f8ae 	bl	80023d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2140      	movs	r1, #64	; 0x40
 800227a:	0018      	movs	r0, r3
 800227c:	f000 f908 	bl	8002490 <TIM_ITRx_SetConfig>
      break;
 8002280:	e00e      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0019      	movs	r1, r3
 800228c:	0010      	movs	r0, r2
 800228e:	f000 f8ff 	bl	8002490 <TIM_ITRx_SetConfig>
      break;
 8002292:	e005      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
      break;
 800229c:	e000      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800229e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	223d      	movs	r2, #61	; 0x3d
 80022a4:	2101      	movs	r1, #1
 80022a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223c      	movs	r2, #60	; 0x3c
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]

  return status;
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	ffceff88 	.word	0xffceff88
 80022c4:	ffff00ff 	.word	0xffff00ff

080022c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <TIM_Base_SetConfig+0xec>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0x20>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a35      	ldr	r2, [pc, #212]	; (80023b8 <TIM_Base_SetConfig+0xf0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2270      	movs	r2, #112	; 0x70
 80022ec:	4393      	bics	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <TIM_Base_SetConfig+0xec>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <TIM_Base_SetConfig+0xf0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00f      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <TIM_Base_SetConfig+0xf4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <TIM_Base_SetConfig+0xf8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <TIM_Base_SetConfig+0xfc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <TIM_Base_SetConfig+0x100>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <TIM_Base_SetConfig+0x104>)
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2280      	movs	r2, #128	; 0x80
 8002340:	4393      	bics	r3, r2
 8002342:	001a      	movs	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <TIM_Base_SetConfig+0xec>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0xba>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <TIM_Base_SetConfig+0xf8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0xba>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <TIM_Base_SetConfig+0xfc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0xba>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <TIM_Base_SetConfig+0x100>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d103      	bne.n	800238a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4393      	bics	r3, r2
 80023a4:	001a      	movs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
  }
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40002000 	.word	0x40002000
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800
 80023cc:	fffffcff 	.word	0xfffffcff

080023d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4393      	bics	r3, r2
 80023ea:	001a      	movs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	22f0      	movs	r2, #240	; 0xf0
 80023fa:	4393      	bics	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	220a      	movs	r2, #10
 800240c:	4393      	bics	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	621a      	str	r2, [r3, #32]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}

0800242c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	2210      	movs	r2, #16
 8002444:	4393      	bics	r3, r2
 8002446:	001a      	movs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <TIM_TI2_ConfigInputStage+0x60>)
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	031b      	lsls	r3, r3, #12
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	22a0      	movs	r2, #160	; 0xa0
 8002468:	4393      	bics	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b006      	add	sp, #24
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	ffff0fff 	.word	0xffff0fff

08002490 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <TIM_ITRx_SetConfig+0x34>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	2207      	movs	r2, #7
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	ffcfff8f 	.word	0xffcfff8f

080024c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <TIM_ETR_SetConfig+0x3c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	021a      	lsls	r2, r3, #8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b006      	add	sp, #24
 8002502:	bd80      	pop	{r7, pc}
 8002504:	ffff00ff 	.word	0xffff00ff

08002508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	223c      	movs	r2, #60	; 0x3c
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800251c:	2302      	movs	r3, #2
 800251e:	e04f      	b.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	223c      	movs	r2, #60	; 0x3c
 8002524:	2101      	movs	r1, #1
 8002526:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	223d      	movs	r2, #61	; 0x3d
 800252c:	2102      	movs	r1, #2
 800252e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800254e:	4013      	ands	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2270      	movs	r2, #112	; 0x70
 8002560:	4393      	bics	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10c      	bne.n	80025ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	4393      	bics	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223d      	movs	r2, #61	; 0x3d
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223c      	movs	r2, #60	; 0x3c
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b004      	add	sp, #16
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	ff0fffff 	.word	0xff0fffff
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e046      	b.n	8002678 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2288      	movs	r2, #136	; 0x88
 80025ee:	589b      	ldr	r3, [r3, r2]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2284      	movs	r2, #132	; 0x84
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fe fb42 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2288      	movs	r2, #136	; 0x88
 8002608:	2124      	movs	r1, #36	; 0x24
 800260a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2101      	movs	r1, #1
 8002618:	438a      	bics	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f9d0 	bl	80029cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 f828 	bl	8002684 <UART_SetConfig>
 8002634:	0003      	movs	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e01c      	b.n	8002678 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	490d      	ldr	r1, [pc, #52]	; (8002680 <HAL_UART_Init+0xa8>)
 800264a:	400a      	ands	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	212a      	movs	r1, #42	; 0x2a
 800265a:	438a      	bics	r2, r1
 800265c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fa5f 	bl	8002b34 <UART_CheckIdleState>
 8002676:	0003      	movs	r3, r0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}
 8002680:	ffffb7ff 	.word	0xffffb7ff

08002684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800268c:	231a      	movs	r3, #26
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4abc      	ldr	r2, [pc, #752]	; (80029a4 <UART_SetConfig+0x320>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4ab7      	ldr	r2, [pc, #732]	; (80029a8 <UART_SetConfig+0x324>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4aae      	ldr	r2, [pc, #696]	; (80029ac <UART_SetConfig+0x328>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	220f      	movs	r2, #15
 8002708:	4393      	bics	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4aa4      	ldr	r2, [pc, #656]	; (80029b0 <UART_SetConfig+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d127      	bne.n	8002772 <UART_SetConfig+0xee>
 8002722:	4ba4      	ldr	r3, [pc, #656]	; (80029b4 <UART_SetConfig+0x330>)
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	2203      	movs	r2, #3
 8002728:	4013      	ands	r3, r2
 800272a:	2b03      	cmp	r3, #3
 800272c:	d017      	beq.n	800275e <UART_SetConfig+0xda>
 800272e:	d81b      	bhi.n	8002768 <UART_SetConfig+0xe4>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d00a      	beq.n	800274a <UART_SetConfig+0xc6>
 8002734:	d818      	bhi.n	8002768 <UART_SetConfig+0xe4>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <UART_SetConfig+0xbc>
 800273a:	2b01      	cmp	r3, #1
 800273c:	d00a      	beq.n	8002754 <UART_SetConfig+0xd0>
 800273e:	e013      	b.n	8002768 <UART_SetConfig+0xe4>
 8002740:	231b      	movs	r3, #27
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e058      	b.n	80027fc <UART_SetConfig+0x178>
 800274a:	231b      	movs	r3, #27
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e053      	b.n	80027fc <UART_SetConfig+0x178>
 8002754:	231b      	movs	r3, #27
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2204      	movs	r2, #4
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e04e      	b.n	80027fc <UART_SetConfig+0x178>
 800275e:	231b      	movs	r3, #27
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2208      	movs	r2, #8
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e049      	b.n	80027fc <UART_SetConfig+0x178>
 8002768:	231b      	movs	r3, #27
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2210      	movs	r2, #16
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e044      	b.n	80027fc <UART_SetConfig+0x178>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a90      	ldr	r2, [pc, #576]	; (80029b8 <UART_SetConfig+0x334>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d127      	bne.n	80027cc <UART_SetConfig+0x148>
 800277c:	4b8d      	ldr	r3, [pc, #564]	; (80029b4 <UART_SetConfig+0x330>)
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	220c      	movs	r2, #12
 8002782:	4013      	ands	r3, r2
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d017      	beq.n	80027b8 <UART_SetConfig+0x134>
 8002788:	d81b      	bhi.n	80027c2 <UART_SetConfig+0x13e>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d00a      	beq.n	80027a4 <UART_SetConfig+0x120>
 800278e:	d818      	bhi.n	80027c2 <UART_SetConfig+0x13e>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <UART_SetConfig+0x116>
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00a      	beq.n	80027ae <UART_SetConfig+0x12a>
 8002798:	e013      	b.n	80027c2 <UART_SetConfig+0x13e>
 800279a:	231b      	movs	r3, #27
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e02b      	b.n	80027fc <UART_SetConfig+0x178>
 80027a4:	231b      	movs	r3, #27
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e026      	b.n	80027fc <UART_SetConfig+0x178>
 80027ae:	231b      	movs	r3, #27
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2204      	movs	r2, #4
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e021      	b.n	80027fc <UART_SetConfig+0x178>
 80027b8:	231b      	movs	r3, #27
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2208      	movs	r2, #8
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e01c      	b.n	80027fc <UART_SetConfig+0x178>
 80027c2:	231b      	movs	r3, #27
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2210      	movs	r2, #16
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	e017      	b.n	80027fc <UART_SetConfig+0x178>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7a      	ldr	r2, [pc, #488]	; (80029bc <UART_SetConfig+0x338>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d104      	bne.n	80027e0 <UART_SetConfig+0x15c>
 80027d6:	231b      	movs	r3, #27
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e00d      	b.n	80027fc <UART_SetConfig+0x178>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a76      	ldr	r2, [pc, #472]	; (80029c0 <UART_SetConfig+0x33c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d104      	bne.n	80027f4 <UART_SetConfig+0x170>
 80027ea:	231b      	movs	r3, #27
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e003      	b.n	80027fc <UART_SetConfig+0x178>
 80027f4:	231b      	movs	r3, #27
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2210      	movs	r2, #16
 80027fa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	429a      	cmp	r2, r3
 8002806:	d000      	beq.n	800280a <UART_SetConfig+0x186>
 8002808:	e065      	b.n	80028d6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800280a:	231b      	movs	r3, #27
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d015      	beq.n	8002840 <UART_SetConfig+0x1bc>
 8002814:	dc18      	bgt.n	8002848 <UART_SetConfig+0x1c4>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00d      	beq.n	8002836 <UART_SetConfig+0x1b2>
 800281a:	dc15      	bgt.n	8002848 <UART_SetConfig+0x1c4>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <UART_SetConfig+0x1a2>
 8002820:	2b02      	cmp	r3, #2
 8002822:	d005      	beq.n	8002830 <UART_SetConfig+0x1ac>
 8002824:	e010      	b.n	8002848 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002826:	f7ff fad7 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 800282a:	0003      	movs	r3, r0
 800282c:	617b      	str	r3, [r7, #20]
        break;
 800282e:	e012      	b.n	8002856 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <UART_SetConfig+0x340>)
 8002832:	617b      	str	r3, [r7, #20]
        break;
 8002834:	e00f      	b.n	8002856 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002836:	f7ff fa43 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 800283a:	0003      	movs	r3, r0
 800283c:	617b      	str	r3, [r7, #20]
        break;
 800283e:	e00a      	b.n	8002856 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	617b      	str	r3, [r7, #20]
        break;
 8002846:	e006      	b.n	8002856 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800284c:	231a      	movs	r3, #26
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
        break;
 8002854:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <UART_SetConfig+0x1da>
 800285c:	e08d      	b.n	800297a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <UART_SetConfig+0x344>)
 8002864:	0052      	lsls	r2, r2, #1
 8002866:	5ad3      	ldrh	r3, [r2, r3]
 8002868:	0019      	movs	r1, r3
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7fd fc48 	bl	8000100 <__udivsi3>
 8002870:	0003      	movs	r3, r0
 8002872:	005a      	lsls	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	18d2      	adds	r2, r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	0019      	movs	r1, r3
 8002882:	0010      	movs	r0, r2
 8002884:	f7fd fc3c 	bl	8000100 <__udivsi3>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	d91c      	bls.n	80028cc <UART_SetConfig+0x248>
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	429a      	cmp	r2, r3
 800289a:	d217      	bcs.n	80028cc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	200e      	movs	r0, #14
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	210f      	movs	r1, #15
 80028a6:	438a      	bics	r2, r1
 80028a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2207      	movs	r2, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	b299      	uxth	r1, r3
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	183a      	adds	r2, r7, r0
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	183a      	adds	r2, r7, r0
 80028c6:	8812      	ldrh	r2, [r2, #0]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e056      	b.n	800297a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80028cc:	231a      	movs	r3, #26
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e051      	b.n	800297a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028d6:	231b      	movs	r3, #27
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d015      	beq.n	800290c <UART_SetConfig+0x288>
 80028e0:	dc18      	bgt.n	8002914 <UART_SetConfig+0x290>
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00d      	beq.n	8002902 <UART_SetConfig+0x27e>
 80028e6:	dc15      	bgt.n	8002914 <UART_SetConfig+0x290>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <UART_SetConfig+0x26e>
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d005      	beq.n	80028fc <UART_SetConfig+0x278>
 80028f0:	e010      	b.n	8002914 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f2:	f7ff fa71 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 80028f6:	0003      	movs	r3, r0
 80028f8:	617b      	str	r3, [r7, #20]
        break;
 80028fa:	e012      	b.n	8002922 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028fc:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <UART_SetConfig+0x340>)
 80028fe:	617b      	str	r3, [r7, #20]
        break;
 8002900:	e00f      	b.n	8002922 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002902:	f7ff f9dd 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8002906:	0003      	movs	r3, r0
 8002908:	617b      	str	r3, [r7, #20]
        break;
 800290a:	e00a      	b.n	8002922 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	617b      	str	r3, [r7, #20]
        break;
 8002912:	e006      	b.n	8002922 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002918:	231a      	movs	r3, #26
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
        break;
 8002920:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d028      	beq.n	800297a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <UART_SetConfig+0x344>)
 800292e:	0052      	lsls	r2, r2, #1
 8002930:	5ad3      	ldrh	r3, [r2, r3]
 8002932:	0019      	movs	r1, r3
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7fd fbe3 	bl	8000100 <__udivsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	001a      	movs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	18d2      	adds	r2, r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	0019      	movs	r1, r3
 800294c:	0010      	movs	r0, r2
 800294e:	f7fd fbd7 	bl	8000100 <__udivsi3>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b0f      	cmp	r3, #15
 800295a:	d90a      	bls.n	8002972 <UART_SetConfig+0x2ee>
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	025b      	lsls	r3, r3, #9
 8002962:	429a      	cmp	r2, r3
 8002964:	d205      	bcs.n	8002972 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	b29a      	uxth	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	e003      	b.n	800297a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002972:	231a      	movs	r3, #26
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	226a      	movs	r2, #106	; 0x6a
 800297e:	2101      	movs	r1, #1
 8002980:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2268      	movs	r2, #104	; 0x68
 8002986:	2101      	movs	r1, #1
 8002988:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002996:	231a      	movs	r3, #26
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781b      	ldrb	r3, [r3, #0]
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b008      	add	sp, #32
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	cfff69f3 	.word	0xcfff69f3
 80029a8:	ffffcfff 	.word	0xffffcfff
 80029ac:	11fff4ff 	.word	0x11fff4ff
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40004400 	.word	0x40004400
 80029bc:	40004800 	.word	0x40004800
 80029c0:	40004c00 	.word	0x40004c00
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	08003158 	.word	0x08003158

080029cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	2208      	movs	r2, #8
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <UART_AdvFeatureConfig+0x144>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <UART_AdvFeatureConfig+0x148>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <UART_AdvFeatureConfig+0x14c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <UART_AdvFeatureConfig+0x150>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <UART_AdvFeatureConfig+0x154>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <UART_AdvFeatureConfig+0x158>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d01d      	beq.n	8002ae6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <UART_AdvFeatureConfig+0x15c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	035b      	lsls	r3, r3, #13
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10b      	bne.n	8002ae6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <UART_AdvFeatureConfig+0x160>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <UART_AdvFeatureConfig+0x164>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	ffff7fff 	.word	0xffff7fff
 8002b14:	fffdffff 	.word	0xfffdffff
 8002b18:	fffeffff 	.word	0xfffeffff
 8002b1c:	fffbffff 	.word	0xfffbffff
 8002b20:	ffffefff 	.word	0xffffefff
 8002b24:	ffffdfff 	.word	0xffffdfff
 8002b28:	ffefffff 	.word	0xffefffff
 8002b2c:	ff9fffff 	.word	0xff9fffff
 8002b30:	fff7ffff 	.word	0xfff7ffff

08002b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b092      	sub	sp, #72	; 0x48
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2290      	movs	r2, #144	; 0x90
 8002b40:	2100      	movs	r1, #0
 8002b42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b44:	f7fe f9c2 	bl	8000ecc <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2208      	movs	r2, #8
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d12d      	bne.n	8002bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0391      	lsls	r1, r2, #14
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4a47      	ldr	r2, [pc, #284]	; (8002c80 <UART_CheckIdleState+0x14c>)
 8002b64:	9200      	str	r2, [sp, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f000 f88e 	bl	8002c88 <UART_WaitOnFlagUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d022      	beq.n	8002bb6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b70:	f3ef 8310 	mrs	r3, PRIMASK
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	438a      	bics	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2288      	movs	r2, #136	; 0x88
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2284      	movs	r2, #132	; 0x84
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e060      	b.n	8002c78 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d146      	bne.n	8002c52 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	03d1      	lsls	r1, r2, #15
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <UART_CheckIdleState+0x14c>)
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f000 f859 	bl	8002c88 <UART_WaitOnFlagUntilTimeout>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d03b      	beq.n	8002c52 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bda:	f3ef 8310 	mrs	r3, PRIMASK
 8002bde:	60fb      	str	r3, [r7, #12]
  return(result);
 8002be0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <UART_CheckIdleState+0x150>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c12:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	438a      	bics	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	228c      	movs	r2, #140	; 0x8c
 8002c42:	2120      	movs	r1, #32
 8002c44:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2284      	movs	r2, #132	; 0x84
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e012      	b.n	8002c78 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2288      	movs	r2, #136	; 0x88
 8002c56:	2120      	movs	r1, #32
 8002c58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	228c      	movs	r2, #140	; 0x8c
 8002c5e:	2120      	movs	r1, #32
 8002c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2284      	movs	r2, #132	; 0x84
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b010      	add	sp, #64	; 0x40
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	01ffffff 	.word	0x01ffffff
 8002c84:	fffffedf 	.word	0xfffffedf

08002c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	1dfb      	adds	r3, r7, #7
 8002c96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c98:	e051      	b.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	d04e      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fe f914 	bl	8000ecc <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e051      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d03b      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d038      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d035      	beq.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d111      	bne.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f83c 	bl	8002d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2290      	movs	r2, #144	; 0x90
 8002cf4:	2108      	movs	r1, #8
 8002cf6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2284      	movs	r2, #132	; 0x84
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e02c      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	401a      	ands	r2, r3
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d112      	bne.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f81f 	bl	8002d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2290      	movs	r2, #144	; 0x90
 8002d2e:	2120      	movs	r1, #32
 8002d30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2284      	movs	r2, #132	; 0x84
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e00f      	b.n	8002d5e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	425a      	negs	r2, r3
 8002d4e:	4153      	adcs	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	001a      	movs	r2, r3
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d09e      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d70:	f3ef 8310 	mrs	r3, PRIMASK
 8002d74:	617b      	str	r3, [r7, #20]
  return(result);
 8002d76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4926      	ldr	r1, [pc, #152]	; (8002e2c <UART_EndRxTransfer+0xc4>)
 8002d92:	400a      	ands	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da2:	f3ef 8310 	mrs	r3, PRIMASK
 8002da6:	623b      	str	r3, [r7, #32]
  return(result);
 8002da8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	2301      	movs	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	491b      	ldr	r1, [pc, #108]	; (8002e30 <UART_EndRxTransfer+0xc8>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	f383 8810 	msr	PRIMASK, r3
}
 8002dd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d118      	bne.n	8002e0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002de2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de6:	2301      	movs	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	228c      	movs	r2, #140	; 0x8c
 8002e12:	2120      	movs	r1, #32
 8002e14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b00e      	add	sp, #56	; 0x38
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	fffffedf 	.word	0xfffffedf
 8002e30:	effffffe 	.word	0xeffffffe

08002e34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2284      	movs	r2, #132	; 0x84
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_UARTEx_DisableFifoMode+0x16>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e027      	b.n	8002e9a <HAL_UARTEx_DisableFifoMode+0x66>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2284      	movs	r2, #132	; 0x84
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2288      	movs	r2, #136	; 0x88
 8002e56:	2124      	movs	r1, #36	; 0x24
 8002e58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	438a      	bics	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2288      	movs	r2, #136	; 0x88
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2284      	movs	r2, #132	; 0x84
 8002e94:	2100      	movs	r1, #0
 8002e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	dfffffff 	.word	0xdfffffff

08002ea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2284      	movs	r2, #132	; 0x84
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e02e      	b.n	8002f1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2284      	movs	r2, #132	; 0x84
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2288      	movs	r2, #136	; 0x88
 8002ecc:	2124      	movs	r1, #36	; 0x24
 8002ece:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	08d9      	lsrs	r1, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f854 	bl	8002fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2288      	movs	r2, #136	; 0x88
 8002f10:	2120      	movs	r1, #32
 8002f12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2284      	movs	r2, #132	; 0x84
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2284      	movs	r2, #132	; 0x84
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e02f      	b.n	8002fa0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2284      	movs	r2, #132	; 0x84
 8002f44:	2101      	movs	r1, #1
 8002f46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2288      	movs	r2, #136	; 0x88
 8002f4c:	2124      	movs	r1, #36	; 0x24
 8002f4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f813 	bl	8002fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2288      	movs	r2, #136	; 0x88
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2284      	movs	r2, #132	; 0x84
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	f1ffffff 	.word	0xf1ffffff

08002fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d108      	bne.n	8002fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	226a      	movs	r2, #106	; 0x6a
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2268      	movs	r2, #104	; 0x68
 8002fc8:	2101      	movs	r1, #1
 8002fca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fcc:	e043      	b.n	8003056 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fce:	260f      	movs	r6, #15
 8002fd0:	19bb      	adds	r3, r7, r6
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fd6:	200e      	movs	r0, #14
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	2208      	movs	r2, #8
 8002fdc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0e5b      	lsrs	r3, r3, #25
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	240d      	movs	r4, #13
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2107      	movs	r1, #7
 8002fee:	400a      	ands	r2, r1
 8002ff0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	0f5b      	lsrs	r3, r3, #29
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	250c      	movs	r5, #12
 8002ffe:	197b      	adds	r3, r7, r5
 8003000:	2107      	movs	r1, #7
 8003002:	400a      	ands	r2, r1
 8003004:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003006:	183b      	adds	r3, r7, r0
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	197a      	adds	r2, r7, r5
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	4914      	ldr	r1, [pc, #80]	; (8003060 <UARTEx_SetNbDataToProcess+0xb4>)
 8003010:	5c8a      	ldrb	r2, [r1, r2]
 8003012:	435a      	muls	r2, r3
 8003014:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003016:	197b      	adds	r3, r7, r5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <UARTEx_SetNbDataToProcess+0xb8>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800301e:	0019      	movs	r1, r3
 8003020:	f7fd f8f8 	bl	8000214 <__divsi3>
 8003024:	0003      	movs	r3, r0
 8003026:	b299      	uxth	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	226a      	movs	r2, #106	; 0x6a
 800302c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800302e:	19bb      	adds	r3, r7, r6
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	193a      	adds	r2, r7, r4
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <UARTEx_SetNbDataToProcess+0xb4>)
 8003038:	5c8a      	ldrb	r2, [r1, r2]
 800303a:	435a      	muls	r2, r3
 800303c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800303e:	193b      	adds	r3, r7, r4
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <UARTEx_SetNbDataToProcess+0xb8>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003046:	0019      	movs	r1, r3
 8003048:	f7fd f8e4 	bl	8000214 <__divsi3>
 800304c:	0003      	movs	r3, r0
 800304e:	b299      	uxth	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2268      	movs	r2, #104	; 0x68
 8003054:	5299      	strh	r1, [r3, r2]
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b005      	add	sp, #20
 800305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	08003170 	.word	0x08003170
 8003064:	08003178 	.word	0x08003178

08003068 <memset>:
 8003068:	0003      	movs	r3, r0
 800306a:	1882      	adds	r2, r0, r2
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	7019      	strb	r1, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2600      	movs	r6, #0
 800307c:	4c0c      	ldr	r4, [pc, #48]	; (80030b0 <__libc_init_array+0x38>)
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 8003080:	1b64      	subs	r4, r4, r5
 8003082:	10a4      	asrs	r4, r4, #2
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	2600      	movs	r6, #0
 800308a:	f000 f819 	bl	80030c0 <_init>
 800308e:	4c0a      	ldr	r4, [pc, #40]	; (80030b8 <__libc_init_array+0x40>)
 8003090:	4d0a      	ldr	r5, [pc, #40]	; (80030bc <__libc_init_array+0x44>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	00b3      	lsls	r3, r6, #2
 800309e:	58eb      	ldr	r3, [r5, r3]
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	00b3      	lsls	r3, r6, #2
 80030a8:	58eb      	ldr	r3, [r5, r3]
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003180 	.word	0x08003180
 80030b4:	08003180 	.word	0x08003180
 80030b8:	08003184 	.word	0x08003184
 80030bc:	08003180 	.word	0x08003180

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
