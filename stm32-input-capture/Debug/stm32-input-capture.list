
stm32-input-capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a8  080037a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080037a8  080037a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a8  080037a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08003818  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003818  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad91  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccf  00000000  00000000  0002ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000684  00000000  00000000  0002d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e28  00000000  00000000  0002da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8a9  00000000  00000000  0004386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c24  00000000  00000000  0004f115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000245c  00000000  00000000  000d4d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d7198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080036cc 	.word	0x080036cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	080036cc 	.word	0x080036cc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write (int file, char *ptr, int len)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	b29a      	uxth	r2, r3
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <_write+0x28>)
 8000418:	f001 fc58 	bl	8001ccc <HAL_UART_Transmit>
	return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b004      	add	sp, #16
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20000084 	.word	0x20000084

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fa86 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f805 	bl	8000442 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 f89a 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800043c:	f000 f84a 	bl	80004d4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x14>

08000442 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000442:	b590      	push	{r4, r7, lr}
 8000444:	b093      	sub	sp, #76	; 0x4c
 8000446:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000448:	2414      	movs	r4, #20
 800044a:	193b      	adds	r3, r7, r4
 800044c:	0018      	movs	r0, r3
 800044e:	2334      	movs	r3, #52	; 0x34
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f002 faf0 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	0018      	movs	r0, r3
 800045c:	2310      	movs	r3, #16
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 fae9 	bl	8002a38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fd9e 	bl	8000fac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2202      	movs	r2, #2
 8000474:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2240      	movs	r2, #64	; 0x40
 8000488:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fdd6 	bl	8001044 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800049c:	f000 f8f8 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2100      	movs	r1, #0
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f8d1 	bl	8001664 <HAL_RCC_ClockConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004c6:	f000 f8e3 	bl	8000690 <Error_Handler>
  }
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b013      	add	sp, #76	; 0x4c
 80004d0:	bd90      	pop	{r4, r7, pc}
	...

080004d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004da:	4a24      	ldr	r2, [pc, #144]	; (800056c <MX_USART2_UART_Init+0x98>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004e0:	22e1      	movs	r2, #225	; 0xe1
 80004e2:	0252      	lsls	r2, r2, #9
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0552      	lsls	r2, r2, #21
 80004ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_USART2_UART_Init+0x94>)
 80004fc:	220c      	movs	r2, #12
 80004fe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_USART2_UART_Init+0x94>)
 800050e:	2200      	movs	r2, #0
 8000510:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000514:	2200      	movs	r2, #0
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART2_UART_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fb7d 	bl	8001c20 <HAL_UART_Init>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800052a:	f000 f8b1 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000530:	2100      	movs	r1, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f002 f880 	bl	8002638 <HAL_UARTEx_SetTxFifoThreshold>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800053c:	f000 f8a8 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000542:	2100      	movs	r1, #0
 8000544:	0018      	movs	r0, r3
 8000546:	f002 f8b7 	bl	80026b8 <HAL_UARTEx_SetRxFifoThreshold>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800054e:	f000 f89f 	bl	8000690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x94>)
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f835 	bl	80025c4 <HAL_UARTEx_DisableFifoMode>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800055e:	f000 f897 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000084 	.word	0x20000084
 800056c:	40004400 	.word	0x40004400

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b089      	sub	sp, #36	; 0x24
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	240c      	movs	r4, #12
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2314      	movs	r3, #20
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fa59 	bl	8002a38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <MX_GPIO_Init+0xd0>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <MX_GPIO_Init+0xd0>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005a4:	2120      	movs	r1, #32
 80005a6:	430a      	orrs	r2, r1
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	2220      	movs	r2, #32
 80005b0:	4013      	ands	r3, r2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_GPIO_Init+0xd0>)
 80005c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005ce:	23a0      	movs	r3, #160	; 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fc97 	bl	8000f0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2220      	movs	r2, #32
 80005e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2202      	movs	r2, #2
 80005f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005f4:	193a      	adds	r2, r7, r4
 80005f6:	23a0      	movs	r3, #160	; 0xa0
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fb03 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : motor1_input_Pin */
  GPIO_InitStruct.Pin = motor1_input_Pin;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2240      	movs	r2, #64	; 0x40
 8000608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2288      	movs	r2, #136	; 0x88
 800060e:	0352      	lsls	r2, r2, #13
 8000610:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(motor1_input_GPIO_Port, &GPIO_InitStruct);
 8000618:	187a      	adds	r2, r7, r1
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 faf1 	bl	8000c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2007      	movs	r0, #7
 800062c:	f000 faba 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000630:	2007      	movs	r0, #7
 8000632:	f000 facc 	bl	8000bce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b009      	add	sp, #36	; 0x24
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	0002      	movs	r2, r0
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	801a      	strh	r2, [r3, #0]

  if (GPIO_Pin == motor1_input_Pin)
 8000650:	1dbb      	adds	r3, r7, #6
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	2b40      	cmp	r3, #64	; 0x40
 8000656:	d113      	bne.n	8000680 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
  {
	  if(HAL_GPIO_ReadPin(motor1_input_GPIO_Port, motor1_input_Pin))
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fc36 	bl	8000ed0 <HAL_GPIO_ReadPin>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d004      	beq.n	8000672 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
		  count++;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000670:	601a      	str	r2, [r3, #0]

	  printf("%d\r\n", count);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f002 f980 	bl	8002980 <iprintf>
  }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000118 	.word	0x20000118
 800068c:	080036e4 	.word	0x080036e4

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	2101      	movs	r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	2201      	movs	r2, #1
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0549      	lsls	r1, r1, #21
 80006c4:	430a      	orrs	r2, r1
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_MspInit+0x44>)
 80006ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	055b      	lsls	r3, r3, #21
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b091      	sub	sp, #68	; 0x44
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	232c      	movs	r3, #44	; 0x2c
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	0018      	movs	r0, r3
 80006f2:	2314      	movs	r3, #20
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 f99e 	bl	8002a38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	2410      	movs	r4, #16
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	231c      	movs	r3, #28
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 f996 	bl	8002a38 <memset>
  if(huart->Instance==USART2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <HAL_UART_MspInit+0xb8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13e      	bne.n	8000794 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2202      	movs	r2, #2
 800071a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 f947 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800072e:	f7ff ffaf 	bl	8000690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 8000734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0289      	lsls	r1, r1, #10
 800073c:	430a      	orrs	r2, r1
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 8000742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	029b      	lsls	r3, r3, #10
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 8000750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0xbc>)
 800075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000766:	212c      	movs	r1, #44	; 0x2c
 8000768:	187b      	adds	r3, r7, r1
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2202      	movs	r2, #2
 8000772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2201      	movs	r2, #1
 8000784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	187a      	adds	r2, r7, r1
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fa3a 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b011      	add	sp, #68	; 0x44
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	40004400 	.word	0x40004400
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f924 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(motor1_input_Pin);
 80007d6:	2040      	movs	r0, #64	; 0x40
 80007d8:	f000 fbb4 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e00a      	b.n	800080a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f4:	e000      	b.n	80007f8 <_read+0x16>
 80007f6:	bf00      	nop
 80007f8:	0001      	movs	r1, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	b2ca      	uxtb	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	dbf0      	blt.n	80007f4 <_read+0x12>
  }

  return len;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}

0800081c <_close>:
  }
  return len;
}

int _close(int file)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}

08000830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0192      	lsls	r2, r2, #6
 8000840:	605a      	str	r2, [r3, #4]
  return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <_isatty>:

int _isatty(int file)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000854:	2301      	movs	r3, #1
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}

0800085e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f002 f91e 	bl	8002ae4 <__errno>
 80008a8:	0003      	movs	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	425b      	negs	r3, r3
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	18d2      	adds	r2, r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b006      	add	sp, #24
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20009000 	.word	0x20009000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	2000011c 	.word	0x2000011c
 80008dc:	20000270 	.word	0x20000270

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff fff6 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f002 f8e9 	bl	8002af0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800091e:	f7ff fd85 	bl	800042c <main>

08000922 <LoopForever>:

LoopForever:
  b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000930:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 8000934:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000938:	20000270 	.word	0x20000270

0800093c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_IRQHandler>
	...

08000940 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_Init+0x3c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_Init+0x3c>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0049      	lsls	r1, r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f810 	bl	8000980 <HAL_InitTick>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d003      	beq.n	800096c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e001      	b.n	8000970 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe96 	bl	800069c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_InitTick+0x88>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d02b      	beq.n	80009f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_InitTick+0x8c>)
 800099a:	681c      	ldr	r4, [r3, #0]
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_InitTick+0x88>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	0019      	movs	r1, r3
 80009a2:	23fa      	movs	r3, #250	; 0xfa
 80009a4:	0098      	lsls	r0, r3, #2
 80009a6:	f7ff fbb5 	bl	8000114 <__udivsi3>
 80009aa:	0003      	movs	r3, r0
 80009ac:	0019      	movs	r1, r3
 80009ae:	0020      	movs	r0, r4
 80009b0:	f7ff fbb0 	bl	8000114 <__udivsi3>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f919 	bl	8000bee <HAL_SYSTICK_Config>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d112      	bne.n	80009e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80a      	bhi.n	80009dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f8e8 	bl	8000ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_InitTick+0x90>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e00d      	b.n	80009f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e008      	b.n	80009f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e6:	230f      	movs	r3, #15
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e003      	b.n	80009f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009f8:	230f      	movs	r3, #15
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	781b      	ldrb	r3, [r3, #0]
}
 80009fe:	0018      	movs	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b005      	add	sp, #20
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	18d2      	adds	r2, r2, r3
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000120 	.word	0x20000120

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	20000120 	.word	0x20000120

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	0002      	movs	r2, r0
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5e:	d809      	bhi.n	8000a74 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	231f      	movs	r3, #31
 8000a68:	401a      	ands	r2, r3
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_EnableIRQ+0x30>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	000a      	movs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d828      	bhi.n	8000ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	589b      	ldr	r3, [r3, r2]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	33c0      	adds	r3, #192	; 0xc0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae6:	e031      	b.n	8000b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	400b      	ands	r3, r1
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001c      	movs	r4, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4023      	ands	r3, r4
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	3306      	adds	r3, #6
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18c3      	adds	r3, r0, r3
 8000b48:	3304      	adds	r3, #4
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	045b      	lsls	r3, r3, #17
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d301      	bcc.n	8000b74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b70:	2301      	movs	r3, #1
 8000b72:	e010      	b.n	8000b96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SysTick_Config+0x44>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2103      	movs	r1, #3
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff7c 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x44>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x44>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff33 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ffaf 	bl	8000b5c <SysTick_Config>
 8000bfe:	0003      	movs	r3, r0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e147      	b.n	8000ea8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <HAL_GPIO_Init+0x28>
 8000c2e:	e138      	b.n	8000ea2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <HAL_GPIO_Init+0x40>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d130      	bne.n	8000caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7e:	2201      	movs	r2, #1
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	2201      	movs	r2, #1
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d017      	beq.n	8000ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2203      	movs	r2, #3
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d123      	bne.n	8000d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	58d3      	ldr	r3, [r2, r3]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2207      	movs	r2, #7
 8000d04:	4013      	ands	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	400b      	ands	r3, r1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	6939      	ldr	r1, [r7, #16]
 8000d38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	23c0      	movs	r3, #192	; 0xc0
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	d100      	bne.n	8000d7c <HAL_GPIO_Init+0x174>
 8000d7a:	e092      	b.n	8000ea2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d7c:	4a50      	ldr	r2, [pc, #320]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3318      	adds	r3, #24
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	220f      	movs	r2, #15
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1ca>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a45      	ldr	r2, [pc, #276]	; (8000ec4 <HAL_GPIO_Init+0x2bc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1c6>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <HAL_GPIO_Init+0x2c0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1c2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <HAL_GPIO_Init+0x2c4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1be>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1cc>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1cc>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1cc>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1cc>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	400a      	ands	r2, r1
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000de4:	4936      	ldr	r1, [pc, #216]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3318      	adds	r3, #24
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	035b      	lsls	r3, r3, #13
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	039b      	lsls	r3, r3, #14
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e48:	2384      	movs	r3, #132	; 0x84
 8000e4a:	58d3      	ldr	r3, [r2, r3]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	029b      	lsls	r3, r3, #10
 8000e60:	4013      	ands	r3, r2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e6c:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	2284      	movs	r2, #132	; 0x84
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	58d3      	ldr	r3, [r2, r3]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	025b      	lsls	r3, r3, #9
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e9a:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <HAL_GPIO_Init+0x2b8>)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	d000      	beq.n	8000eb6 <HAL_GPIO_Init+0x2ae>
 8000eb4:	e6b0      	b.n	8000c18 <HAL_GPIO_Init+0x10>
  }
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021800 	.word	0x40021800
 8000ec4:	50000400 	.word	0x50000400
 8000ec8:	50000800 	.word	0x50000800
 8000ecc:	50000c00 	.word	0x50000c00

08000ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	000a      	movs	r2, r1
 8000eda:	1cbb      	adds	r3, r7, #2
 8000edc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	1cba      	adds	r2, r7, #2
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d004      	beq.n	8000ef4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000eea:	230f      	movs	r3, #15
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e003      	b.n	8000efc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	0008      	movs	r0, r1
 8000f14:	0011      	movs	r1, r2
 8000f16:	1cbb      	adds	r3, r7, #2
 8000f18:	1c02      	adds	r2, r0, #0
 8000f1a:	801a      	strh	r2, [r3, #0]
 8000f1c:	1c7b      	adds	r3, r7, #1
 8000f1e:	1c0a      	adds	r2, r1, #0
 8000f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f22:	1c7b      	adds	r3, r7, #1
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	1cbb      	adds	r3, r7, #2
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f34:	1cbb      	adds	r3, r7, #2
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	1dba      	adds	r2, r7, #6
 8000f56:	8812      	ldrh	r2, [r2, #0]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d008      	beq.n	8000f6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f5e:	1dba      	adds	r2, r7, #6
 8000f60:	8812      	ldrh	r2, [r2, #0]
 8000f62:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000f64:	1dbb      	adds	r3, r7, #6
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fb6b 	bl	8000644 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	1dba      	adds	r2, r7, #6
 8000f74:	8812      	ldrh	r2, [r2, #0]
 8000f76:	4013      	ands	r3, r2
 8000f78:	d008      	beq.n	8000f8c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f7c:	1dba      	adds	r2, r7, #6
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 f806 	bl	8000f98 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021800 	.word	0x40021800

08000f98 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dbb      	adds	r3, r7, #6
 8000fa2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d11f      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f898 	bl	8000114 <__udivsi3>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fea:	e008      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e001      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e009      	b.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	401a      	ands	r2, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	429a      	cmp	r2, r3
 800100e:	d0ed      	beq.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40007000 	.word	0x40007000
 8001020:	fffff9ff 	.word	0xfffff9ff
 8001024:	20000000 	.word	0x20000000
 8001028:	000f4240 	.word	0x000f4240

0800102c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	23e0      	movs	r3, #224	; 0xe0
 8001036:	01db      	lsls	r3, r3, #7
 8001038:	4013      	ands	r3, r2
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e2f3      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	d100      	bne.n	8001062 <HAL_RCC_OscConfig+0x1e>
 8001060:	e07c      	b.n	800115c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001062:	4bc3      	ldr	r3, [pc, #780]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2238      	movs	r2, #56	; 0x38
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106c:	4bc0      	ldr	r3, [pc, #768]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x3e>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d002      	beq.n	8001088 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4bb9      	ldr	r3, [pc, #740]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d062      	beq.n	800115a <HAL_RCC_OscConfig+0x116>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d15e      	bne.n	800115a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e2ce      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d107      	bne.n	80010bc <HAL_RCC_OscConfig+0x78>
 80010ac:	4bb0      	ldr	r3, [pc, #704]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4baf      	ldr	r3, [pc, #700]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0249      	lsls	r1, r1, #9
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e020      	b.n	80010fe <HAL_RCC_OscConfig+0xba>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d10e      	bne.n	80010e6 <HAL_RCC_OscConfig+0xa2>
 80010c8:	4ba9      	ldr	r3, [pc, #676]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	02c9      	lsls	r1, r1, #11
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4ba6      	ldr	r3, [pc, #664]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0249      	lsls	r1, r1, #9
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <HAL_RCC_OscConfig+0xba>
 80010e6:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4ba1      	ldr	r3, [pc, #644]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	49a1      	ldr	r1, [pc, #644]	; (8001374 <HAL_RCC_OscConfig+0x330>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b9e      	ldr	r3, [pc, #632]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	499f      	ldr	r1, [pc, #636]	; (8001378 <HAL_RCC_OscConfig+0x334>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d014      	beq.n	8001130 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fc97 	bl	8000a38 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc92 	bl	8000a38 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e28d      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001122:	4b93      	ldr	r3, [pc, #588]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xcc>
 800112e:	e015      	b.n	800115c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fc82 	bl	8000a38 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113a:	f7ff fc7d 	bl	8000a38 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e278      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114c:	4b88      	ldr	r3, [pc, #544]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	029b      	lsls	r3, r3, #10
 8001154:	4013      	ands	r3, r2
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0xf6>
 8001158:	e000      	b.n	800115c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_RCC_OscConfig+0x124>
 8001166:	e099      	b.n	800129c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2238      	movs	r2, #56	; 0x38
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d102      	bne.n	8001188 <HAL_RCC_OscConfig+0x144>
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d002      	beq.n	800118e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d135      	bne.n	80011fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118e:	4b78      	ldr	r3, [pc, #480]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4013      	ands	r3, r2
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x162>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e24b      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b72      	ldr	r3, [pc, #456]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a74      	ldr	r2, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	021a      	lsls	r2, r3, #8
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0adb      	lsrs	r3, r3, #11
 80011dc:	2207      	movs	r2, #7
 80011de:	4013      	ands	r3, r2
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x340>)
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 80011e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x348>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff fbc7 	bl	8000980 <HAL_InitTick>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d051      	beq.n	800129a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e221      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d030      	beq.n	8001264 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001202:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0049      	lsls	r1, r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc08 	bl	8000a38 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fc03 	bl	8000a38 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1fe      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4013      	ands	r3, r2
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001252:	4013      	ands	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	021a      	lsls	r2, r3, #8
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800125e:	430a      	orrs	r2, r1
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	e01b      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800126a:	4949      	ldr	r1, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x34c>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fbe2 	bl	8000a38 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fbdd 	bl	8000a38 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1d8      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4013      	ands	r3, r2
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x236>
 8001298:	e000      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	d047      	beq.n	8001336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2238      	movs	r2, #56	; 0x38
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b18      	cmp	r3, #24
 80012b0:	d10a      	bne.n	80012c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d03c      	beq.n	8001336 <HAL_RCC_OscConfig+0x2f2>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d138      	bne.n	8001336 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e1ba      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbac 	bl	8000a38 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fba7 	bl	8000a38 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1a2      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f1      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2a2>
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb92 	bl	8000a38 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fb8d 	bl	8000a38 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e188      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d1f1      	bne.n	800131a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x2fe>
 8001340:	e0c6      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	231f      	movs	r3, #31
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2238      	movs	r2, #56	; 0x38
 8001350:	4013      	ands	r3, r2
 8001352:	2b20      	cmp	r3, #32
 8001354:	d11e      	bne.n	8001394 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x31e>
 8001360:	e0b6      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d000      	beq.n	800136c <HAL_RCC_OscConfig+0x328>
 800136a:	e0b1      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e166      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
 8001370:	40021000 	.word	0x40021000
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	fffbffff 	.word	0xfffbffff
 800137c:	ffff80ff 	.word	0xffff80ff
 8001380:	ffffc7ff 	.word	0xffffc7ff
 8001384:	00f42400 	.word	0x00f42400
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004
 8001390:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001394:	4bac      	ldr	r3, [pc, #688]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4013      	ands	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_OscConfig+0x360>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x362>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d011      	beq.n	80013ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4ba7      	ldr	r3, [pc, #668]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	4ba6      	ldr	r3, [pc, #664]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0549      	lsls	r1, r1, #21
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	055b      	lsls	r3, r3, #21
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013c6:	231f      	movs	r3, #31
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ce:	4b9f      	ldr	r3, [pc, #636]	; (800164c <HAL_RCC_OscConfig+0x608>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	d11a      	bne.n	8001410 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013da:	4b9c      	ldr	r3, [pc, #624]	; (800164c <HAL_RCC_OscConfig+0x608>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b9b      	ldr	r3, [pc, #620]	; (800164c <HAL_RCC_OscConfig+0x608>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0049      	lsls	r1, r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb26 	bl	8000a38 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f2:	f7ff fb21 	bl	8000a38 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e11c      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	4b91      	ldr	r3, [pc, #580]	; (800164c <HAL_RCC_OscConfig+0x608>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x3e2>
 8001418:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800141a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800141c:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c
 8001424:	e01c      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x404>
 800142e:	4b86      	ldr	r3, [pc, #536]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	65da      	str	r2, [r3, #92]	; 0x5c
 800143a:	4b83      	ldr	r3, [pc, #524]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800143c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	65da      	str	r2, [r3, #92]	; 0x5c
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
 8001448:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800144a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800144c:	4b7e      	ldr	r3, [pc, #504]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800144e:	2101      	movs	r1, #1
 8001450:	438a      	bics	r2, r1
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001458:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800145a:	2104      	movs	r1, #4
 800145c:	438a      	bics	r2, r1
 800145e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d014      	beq.n	8001492 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fae6 	bl	8000a38 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fae1 	bl	8000a38 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a74      	ldr	r2, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x60c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0db      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001486:	4b70      	ldr	r3, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x42e>
 8001490:	e013      	b.n	80014ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fad1 	bl	8000a38 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800149a:	e009      	b.n	80014b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff facc 	bl	8000a38 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a6a      	ldr	r2, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x60c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0c6      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b0:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014ba:	231f      	movs	r3, #31
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014c8:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014ca:	4962      	ldr	r1, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x610>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x496>
 80014d8:	e0b0      	b.n	800163c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014da:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4a4>
 80014e6:	e078      	b.n	80015da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d153      	bne.n	8001598 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80014f6:	4958      	ldr	r1, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x614>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa9c 	bl	8000a38 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fa97 	bl	8000a38 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e092      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001518:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	049b      	lsls	r3, r3, #18
 8001520:	4013      	ands	r3, r2
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x618>)
 800152a:	4013      	ands	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1a      	ldr	r2, [r3, #32]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	431a      	orrs	r2, r3
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800154e:	430a      	orrs	r2, r1
 8001550:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0449      	lsls	r1, r1, #17
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	0549      	lsls	r1, r1, #21
 800156a:	430a      	orrs	r2, r1
 800156c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fa63 	bl	8000a38 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fa5e 	bl	8000a38 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e059      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	049b      	lsls	r3, r3, #18
 8001592:	4013      	ands	r3, r2
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x534>
 8001596:	e051      	b.n	800163c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 800159e:	492e      	ldr	r1, [pc, #184]	; (8001658 <HAL_RCC_OscConfig+0x614>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fa48 	bl	8000a38 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fa43 	bl	8000a38 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e03e      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	049b      	lsls	r3, r3, #18
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80015d2:	4923      	ldr	r1, [pc, #140]	; (8001660 <HAL_RCC_OscConfig+0x61c>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	e030      	b.n	800163c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e02b      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x604>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2203      	movs	r2, #3
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d11e      	bne.n	8001638 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2270      	movs	r2, #112	; 0x70
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d117      	bne.n	8001638 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	23fe      	movs	r3, #254	; 0xfe
 800160c:	01db      	lsls	r3, r3, #7
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	23f8      	movs	r3, #248	; 0xf8
 800161e:	039b      	lsls	r3, r3, #14
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	0f5b      	lsrs	r3, r3, #29
 800162e:	075a      	lsls	r2, r3, #29
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b008      	add	sp, #32
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	40007000 	.word	0x40007000
 8001650:	00001388 	.word	0x00001388
 8001654:	efffffff 	.word	0xefffffff
 8001658:	feffffff 	.word	0xfeffffff
 800165c:	1fc1808c 	.word	0x1fc1808c
 8001660:	effefffc 	.word	0xeffefffc

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0e9      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2207      	movs	r2, #7
 800167e:	4013      	ands	r3, r2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d91e      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2207      	movs	r2, #7
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001698:	f7ff f9ce 	bl	8000a38 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f9c9 	bl	8000a38 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a6a      	ldr	r2, [pc, #424]	; (8001858 <HAL_RCC_ClockConfig+0x1f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0ca      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b6:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2207      	movs	r2, #7
 80016bc:	4013      	ands	r3, r2
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	d006      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016d8:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	21e0      	movs	r1, #224	; 0xe0
 80016e0:	01c9      	lsls	r1, r1, #7
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_RCC_ClockConfig+0x1fc>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	4b59      	ldr	r3, [pc, #356]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	d057      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	d12b      	bne.n	8001770 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e097      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d107      	bne.n	8001734 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	049b      	lsls	r3, r3, #18
 800172c:	4013      	ands	r3, r2
 800172e:	d11f      	bne.n	8001770 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e08b      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4013      	ands	r3, r2
 8001746:	d113      	bne.n	8001770 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e07f      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d106      	bne.n	8001762 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d108      	bne.n	8001770 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e074      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2202      	movs	r2, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e06d      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2207      	movs	r2, #7
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001784:	f7ff f958 	bl	8000a38 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7ff f953 	bl	8000a38 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <HAL_RCC_ClockConfig+0x1f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e054      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2238      	movs	r2, #56	; 0x38
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1ec      	bne.n	800178e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2207      	movs	r2, #7
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d21e      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2207      	movs	r2, #7
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d4:	f7ff f930 	bl	8000a38 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f92b 	bl	8000a38 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_RCC_ClockConfig+0x1f4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e02c      	b.n	800184c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2207      	movs	r2, #7
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2204      	movs	r2, #4
 8001806:	4013      	ands	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a15      	ldr	r2, [pc, #84]	; (8001864 <HAL_RCC_ClockConfig+0x200>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800181e:	f000 f829 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001822:	0001      	movs	r1, r0
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	220f      	movs	r2, #15
 800182c:	401a      	ands	r2, r3
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x204>)
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	58d3      	ldr	r3, [r2, r3]
 8001834:	221f      	movs	r2, #31
 8001836:	4013      	ands	r3, r2
 8001838:	000a      	movs	r2, r1
 800183a:	40da      	lsrs	r2, r3
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 800183e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff f89b 	bl	8000980 <HAL_InitTick>
 800184a:	0003      	movs	r3, r0
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40022000 	.word	0x40022000
 8001858:	00001388 	.word	0x00001388
 800185c:	40021000 	.word	0x40021000
 8001860:	fffff0ff 	.word	0xfffff0ff
 8001864:	ffff8fff 	.word	0xffff8fff
 8001868:	080036ec 	.word	0x080036ec
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2238      	movs	r2, #56	; 0x38
 8001880:	4013      	ands	r3, r2
 8001882:	d10f      	bne.n	80018a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0adb      	lsrs	r3, r3, #11
 800188a:	2207      	movs	r2, #7
 800188c:	4013      	ands	r3, r2
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	0013      	movs	r3, r2
 8001894:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	4835      	ldr	r0, [pc, #212]	; (8001970 <HAL_RCC_GetSysClockFreq+0xfc>)
 800189a:	f7fe fc3b 	bl	8000114 <__udivsi3>
 800189e:	0003      	movs	r3, r0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e05d      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2238      	movs	r2, #56	; 0x38
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_GetSysClockFreq+0x100>)
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e054      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2238      	movs	r2, #56	; 0x38
 80018bc:	4013      	ands	r3, r2
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d138      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2203      	movs	r2, #3
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	2207      	movs	r2, #7
 80018d4:	4013      	ands	r3, r2
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d10d      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	4824      	ldr	r0, [pc, #144]	; (8001974 <HAL_RCC_GetSysClockFreq+0x100>)
 80018e4:	f7fe fc16 	bl	8000114 <__udivsi3>
 80018e8:	0003      	movs	r3, r0
 80018ea:	0019      	movs	r1, r3
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	227f      	movs	r2, #127	; 0x7f
 80018f4:	4013      	ands	r3, r2
 80018f6:	434b      	muls	r3, r1
 80018f8:	617b      	str	r3, [r7, #20]
        break;
 80018fa:	e00d      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	481c      	ldr	r0, [pc, #112]	; (8001970 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001900:	f7fe fc08 	bl	8000114 <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	0019      	movs	r1, r3
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	227f      	movs	r2, #127	; 0x7f
 8001910:	4013      	ands	r3, r2
 8001912:	434b      	muls	r3, r1
 8001914:	617b      	str	r3, [r7, #20]
        break;
 8001916:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0f5b      	lsrs	r3, r3, #29
 800191e:	2207      	movs	r2, #7
 8001920:	4013      	ands	r3, r2
 8001922:	3301      	adds	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	6978      	ldr	r0, [r7, #20]
 800192a:	f7fe fbf3 	bl	8000114 <__udivsi3>
 800192e:	0003      	movs	r3, r0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e015      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2238      	movs	r2, #56	; 0x38
 800193a:	4013      	ands	r3, r2
 800193c:	2b20      	cmp	r3, #32
 800193e:	d103      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_RCC_GetSysClockFreq+0xf8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2238      	movs	r2, #56	; 0x38
 800194e:	4013      	ands	r3, r2
 8001950:	2b18      	cmp	r3, #24
 8001952:	d103      	bne.n	800195c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001954:	23fa      	movs	r3, #250	; 0xfa
 8001956:	01db      	lsls	r3, r3, #7
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e001      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001960:	693b      	ldr	r3, [r7, #16]
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b006      	add	sp, #24
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200

08001978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	0004      	movs	r4, r0
 8001996:	f7ff fb49 	bl	800102c <LL_RCC_GetAPB1Prescaler>
 800199a:	0003      	movs	r3, r0
 800199c:	0b1a      	lsrs	r2, r3, #12
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	58d3      	ldr	r3, [r2, r3]
 80019a4:	221f      	movs	r2, #31
 80019a6:	4013      	ands	r3, r2
 80019a8:	40dc      	lsrs	r4, r3
 80019aa:	0023      	movs	r3, r4
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	0800372c 	.word	0x0800372c

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019c0:	2313      	movs	r3, #19
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019c8:	2312      	movs	r3, #18
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x26>
 80019dc:	e0a3      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2011      	movs	r0, #17
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b86      	ldr	r3, [pc, #536]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	4013      	ands	r3, r2
 80019f0:	d110      	bne.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f6:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a00:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	183b      	adds	r3, r7, r0
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	0049      	lsls	r1, r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a22:	f7ff f809 	bl	8000a38 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7ff f804 	bl	8000a38 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d904      	bls.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a3a:	2313      	movs	r3, #19
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2203      	movs	r2, #3
 8001a40:	701a      	strb	r2, [r3, #0]
        break;
 8001a42:	e005      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a44:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0ed      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a50:	2313      	movs	r3, #19
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d154      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a5a:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d019      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d014      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	4a63      	ldr	r2, [pc, #396]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a80:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a84:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0249      	lsls	r1, r1, #9
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a8e:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a94:	495d      	ldr	r1, [pc, #372]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a9a:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7fe ffc6 	bl	8000a38 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab0:	e00c      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7fe ffc1 	bl	8000a38 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d904      	bls.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ac2:	2313      	movs	r3, #19
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	701a      	strb	r2, [r3, #0]
            break;
 8001aca:	e004      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0ed      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001ad6:	2313      	movs	r3, #19
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ae0:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001af4:	e00c      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001af6:	2312      	movs	r3, #18
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	2213      	movs	r2, #19
 8001afc:	18ba      	adds	r2, r7, r2
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e005      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b04:	2312      	movs	r3, #18
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2213      	movs	r2, #19
 8001b0a:	18ba      	adds	r2, r7, r2
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b10:	2311      	movs	r3, #17
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b20:	493c      	ldr	r1, [pc, #240]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	2203      	movs	r2, #3
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	220c      	movs	r2, #12
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	0899      	lsrs	r1, r3, #2
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	05db      	lsls	r3, r3, #23
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0249      	lsls	r1, r1, #9
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d016      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	01db      	lsls	r3, r3, #7
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	0249      	lsls	r1, r1, #9
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001bf2:	2312      	movs	r3, #18
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	fffffcff 	.word	0xfffffcff
 8001c0c:	fffeffff 	.word	0xfffeffff
 8001c10:	00001388 	.word	0x00001388
 8001c14:	efffffff 	.word	0xefffffff
 8001c18:	ffffcfff 	.word	0xffffcfff
 8001c1c:	ffff3fff 	.word	0xffff3fff

08001c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e046      	b.n	8001cc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2288      	movs	r2, #136	; 0x88
 8001c36:	589b      	ldr	r3, [r3, r2]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2284      	movs	r2, #132	; 0x84
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7fe fd4c 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2288      	movs	r2, #136	; 0x88
 8001c50:	2124      	movs	r1, #36	; 0x24
 8001c52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	438a      	bics	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 fa74 	bl	800215c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 f8cc 	bl	8001e14 <UART_SetConfig>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01c      	b.n	8001cc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <HAL_UART_Init+0xa8>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	212a      	movs	r1, #42	; 0x2a
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fb03 	bl	80022c4 <UART_CheckIdleState>
 8001cbe:	0003      	movs	r3, r0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	ffffb7ff 	.word	0xffffb7ff

08001ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2288      	movs	r2, #136	; 0x88
 8001ce0:	589b      	ldr	r3, [r3, r2]
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d000      	beq.n	8001ce8 <HAL_UART_Transmit+0x1c>
 8001ce6:	e090      	b.n	8001e0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_Transmit+0x2a>
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e088      	b.n	8001e0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d109      	bne.n	8001d1a <HAL_UART_Transmit+0x4e>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d001      	beq.n	8001d1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e078      	b.n	8001e0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2290      	movs	r2, #144	; 0x90
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2288      	movs	r2, #136	; 0x88
 8001d26:	2121      	movs	r1, #33	; 0x21
 8001d28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d2a:	f7fe fe85 	bl	8000a38 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1dba      	adds	r2, r7, #6
 8001d36:	2154      	movs	r1, #84	; 0x54
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1dba      	adds	r2, r7, #6
 8001d40:	2156      	movs	r1, #86	; 0x56
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	015b      	lsls	r3, r3, #5
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d108      	bne.n	8001d64 <HAL_UART_Transmit+0x98>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e003      	b.n	8001d6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d6c:	e030      	b.n	8001dd0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	0013      	movs	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	f000 fb4c 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2288      	movs	r2, #136	; 0x88
 8001d88:	2120      	movs	r1, #32
 8001d8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e03d      	b.n	8001e0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	05d2      	lsls	r2, r2, #23
 8001da2:	0dd2      	lsrs	r2, r2, #23
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e007      	b.n	8001dbe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2256      	movs	r2, #86	; 0x56
 8001dc2:	5a9b      	ldrh	r3, [r3, r2]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b299      	uxth	r1, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2256      	movs	r2, #86	; 0x56
 8001dce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2256      	movs	r2, #86	; 0x56
 8001dd4:	5a9b      	ldrh	r3, [r3, r2]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1c8      	bne.n	8001d6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	0013      	movs	r3, r2
 8001de6:	2200      	movs	r2, #0
 8001de8:	2140      	movs	r1, #64	; 0x40
 8001dea:	f000 fb15 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2288      	movs	r2, #136	; 0x88
 8001df6:	2120      	movs	r1, #32
 8001df8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e006      	b.n	8001e0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2288      	movs	r2, #136	; 0x88
 8001e02:	2120      	movs	r1, #32
 8001e04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
  }
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b008      	add	sp, #32
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e1c:	231a      	movs	r3, #26
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4abc      	ldr	r2, [pc, #752]	; (8002134 <UART_SetConfig+0x320>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4ab7      	ldr	r2, [pc, #732]	; (8002138 <UART_SetConfig+0x324>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4aae      	ldr	r2, [pc, #696]	; (800213c <UART_SetConfig+0x328>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	220f      	movs	r2, #15
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4aa4      	ldr	r2, [pc, #656]	; (8002140 <UART_SetConfig+0x32c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d127      	bne.n	8001f02 <UART_SetConfig+0xee>
 8001eb2:	4ba4      	ldr	r3, [pc, #656]	; (8002144 <UART_SetConfig+0x330>)
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d017      	beq.n	8001eee <UART_SetConfig+0xda>
 8001ebe:	d81b      	bhi.n	8001ef8 <UART_SetConfig+0xe4>
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d00a      	beq.n	8001eda <UART_SetConfig+0xc6>
 8001ec4:	d818      	bhi.n	8001ef8 <UART_SetConfig+0xe4>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <UART_SetConfig+0xbc>
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d00a      	beq.n	8001ee4 <UART_SetConfig+0xd0>
 8001ece:	e013      	b.n	8001ef8 <UART_SetConfig+0xe4>
 8001ed0:	231b      	movs	r3, #27
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e058      	b.n	8001f8c <UART_SetConfig+0x178>
 8001eda:	231b      	movs	r3, #27
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2202      	movs	r2, #2
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e053      	b.n	8001f8c <UART_SetConfig+0x178>
 8001ee4:	231b      	movs	r3, #27
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2204      	movs	r2, #4
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e04e      	b.n	8001f8c <UART_SetConfig+0x178>
 8001eee:	231b      	movs	r3, #27
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e049      	b.n	8001f8c <UART_SetConfig+0x178>
 8001ef8:	231b      	movs	r3, #27
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2210      	movs	r2, #16
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e044      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a90      	ldr	r2, [pc, #576]	; (8002148 <UART_SetConfig+0x334>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d127      	bne.n	8001f5c <UART_SetConfig+0x148>
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <UART_SetConfig+0x330>)
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d017      	beq.n	8001f48 <UART_SetConfig+0x134>
 8001f18:	d81b      	bhi.n	8001f52 <UART_SetConfig+0x13e>
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d00a      	beq.n	8001f34 <UART_SetConfig+0x120>
 8001f1e:	d818      	bhi.n	8001f52 <UART_SetConfig+0x13e>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <UART_SetConfig+0x116>
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d00a      	beq.n	8001f3e <UART_SetConfig+0x12a>
 8001f28:	e013      	b.n	8001f52 <UART_SetConfig+0x13e>
 8001f2a:	231b      	movs	r3, #27
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e02b      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f34:	231b      	movs	r3, #27
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2202      	movs	r2, #2
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e026      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f3e:	231b      	movs	r3, #27
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2204      	movs	r2, #4
 8001f44:	701a      	strb	r2, [r3, #0]
 8001f46:	e021      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f48:	231b      	movs	r3, #27
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e01c      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f52:	231b      	movs	r3, #27
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2210      	movs	r2, #16
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e017      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7a      	ldr	r2, [pc, #488]	; (800214c <UART_SetConfig+0x338>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d104      	bne.n	8001f70 <UART_SetConfig+0x15c>
 8001f66:	231b      	movs	r3, #27
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	e00d      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a76      	ldr	r2, [pc, #472]	; (8002150 <UART_SetConfig+0x33c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d104      	bne.n	8001f84 <UART_SetConfig+0x170>
 8001f7a:	231b      	movs	r3, #27
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <UART_SetConfig+0x178>
 8001f84:	231b      	movs	r3, #27
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2210      	movs	r2, #16
 8001f8a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d000      	beq.n	8001f9a <UART_SetConfig+0x186>
 8001f98:	e065      	b.n	8002066 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8001f9a:	231b      	movs	r3, #27
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d015      	beq.n	8001fd0 <UART_SetConfig+0x1bc>
 8001fa4:	dc18      	bgt.n	8001fd8 <UART_SetConfig+0x1c4>
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d00d      	beq.n	8001fc6 <UART_SetConfig+0x1b2>
 8001faa:	dc15      	bgt.n	8001fd8 <UART_SetConfig+0x1c4>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <UART_SetConfig+0x1a2>
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d005      	beq.n	8001fc0 <UART_SetConfig+0x1ac>
 8001fb4:	e010      	b.n	8001fd8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fb6:	f7ff fce9 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	617b      	str	r3, [r7, #20]
        break;
 8001fbe:	e012      	b.n	8001fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fc0:	4b64      	ldr	r3, [pc, #400]	; (8002154 <UART_SetConfig+0x340>)
 8001fc2:	617b      	str	r3, [r7, #20]
        break;
 8001fc4:	e00f      	b.n	8001fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fc6:	f7ff fc55 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	617b      	str	r3, [r7, #20]
        break;
 8001fce:	e00a      	b.n	8001fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	617b      	str	r3, [r7, #20]
        break;
 8001fd6:	e006      	b.n	8001fe6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001fdc:	231a      	movs	r3, #26
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
        break;
 8001fe4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <UART_SetConfig+0x1da>
 8001fec:	e08d      	b.n	800210a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <UART_SetConfig+0x344>)
 8001ff4:	0052      	lsls	r2, r2, #1
 8001ff6:	5ad3      	ldrh	r3, [r2, r3]
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7fe f88a 	bl	8000114 <__udivsi3>
 8002000:	0003      	movs	r3, r0
 8002002:	005a      	lsls	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	18d2      	adds	r2, r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	0019      	movs	r1, r3
 8002012:	0010      	movs	r0, r2
 8002014:	f7fe f87e 	bl	8000114 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	d91c      	bls.n	800205c <UART_SetConfig+0x248>
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	429a      	cmp	r2, r3
 800202a:	d217      	bcs.n	800205c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	b29a      	uxth	r2, r3
 8002030:	200e      	movs	r0, #14
 8002032:	183b      	adds	r3, r7, r0
 8002034:	210f      	movs	r1, #15
 8002036:	438a      	bics	r2, r1
 8002038:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	2207      	movs	r2, #7
 8002042:	4013      	ands	r3, r2
 8002044:	b299      	uxth	r1, r3
 8002046:	183b      	adds	r3, r7, r0
 8002048:	183a      	adds	r2, r7, r0
 800204a:	8812      	ldrh	r2, [r2, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	183a      	adds	r2, r7, r0
 8002056:	8812      	ldrh	r2, [r2, #0]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	e056      	b.n	800210a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800205c:	231a      	movs	r3, #26
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e051      	b.n	800210a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002066:	231b      	movs	r3, #27
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d015      	beq.n	800209c <UART_SetConfig+0x288>
 8002070:	dc18      	bgt.n	80020a4 <UART_SetConfig+0x290>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00d      	beq.n	8002092 <UART_SetConfig+0x27e>
 8002076:	dc15      	bgt.n	80020a4 <UART_SetConfig+0x290>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <UART_SetConfig+0x26e>
 800207c:	2b02      	cmp	r3, #2
 800207e:	d005      	beq.n	800208c <UART_SetConfig+0x278>
 8002080:	e010      	b.n	80020a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002082:	f7ff fc83 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8002086:	0003      	movs	r3, r0
 8002088:	617b      	str	r3, [r7, #20]
        break;
 800208a:	e012      	b.n	80020b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <UART_SetConfig+0x340>)
 800208e:	617b      	str	r3, [r7, #20]
        break;
 8002090:	e00f      	b.n	80020b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002092:	f7ff fbef 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8002096:	0003      	movs	r3, r0
 8002098:	617b      	str	r3, [r7, #20]
        break;
 800209a:	e00a      	b.n	80020b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	617b      	str	r3, [r7, #20]
        break;
 80020a2:	e006      	b.n	80020b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80020a8:	231a      	movs	r3, #26
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
        break;
 80020b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d028      	beq.n	800210a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <UART_SetConfig+0x344>)
 80020be:	0052      	lsls	r2, r2, #1
 80020c0:	5ad3      	ldrh	r3, [r2, r3]
 80020c2:	0019      	movs	r1, r3
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7fe f825 	bl	8000114 <__udivsi3>
 80020ca:	0003      	movs	r3, r0
 80020cc:	001a      	movs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	18d2      	adds	r2, r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f7fe f819 	bl	8000114 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d90a      	bls.n	8002102 <UART_SetConfig+0x2ee>
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	025b      	lsls	r3, r3, #9
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d205      	bcs.n	8002102 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e003      	b.n	800210a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002102:	231a      	movs	r3, #26
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	226a      	movs	r2, #106	; 0x6a
 800210e:	2101      	movs	r1, #1
 8002110:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2268      	movs	r2, #104	; 0x68
 8002116:	2101      	movs	r1, #1
 8002118:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002126:	231a      	movs	r3, #26
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b008      	add	sp, #32
 8002132:	bd80      	pop	{r7, pc}
 8002134:	cfff69f3 	.word	0xcfff69f3
 8002138:	ffffcfff 	.word	0xffffcfff
 800213c:	11fff4ff 	.word	0x11fff4ff
 8002140:	40013800 	.word	0x40013800
 8002144:	40021000 	.word	0x40021000
 8002148:	40004400 	.word	0x40004400
 800214c:	40004800 	.word	0x40004800
 8002150:	40004c00 	.word	0x40004c00
 8002154:	00f42400 	.word	0x00f42400
 8002158:	0800374c 	.word	0x0800374c

0800215c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	2208      	movs	r2, #8
 800216a:	4013      	ands	r3, r2
 800216c:	d00b      	beq.n	8002186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <UART_AdvFeatureConfig+0x144>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	2201      	movs	r2, #1
 800218c:	4013      	ands	r3, r2
 800218e:	d00b      	beq.n	80021a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <UART_AdvFeatureConfig+0x148>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00b      	beq.n	80021ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <UART_AdvFeatureConfig+0x14c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	d00b      	beq.n	80021ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <UART_AdvFeatureConfig+0x150>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2210      	movs	r2, #16
 80021f2:	4013      	ands	r3, r2
 80021f4:	d00b      	beq.n	800220e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <UART_AdvFeatureConfig+0x154>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	2220      	movs	r2, #32
 8002214:	4013      	ands	r3, r2
 8002216:	d00b      	beq.n	8002230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <UART_AdvFeatureConfig+0x158>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	4013      	ands	r3, r2
 8002238:	d01d      	beq.n	8002276 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <UART_AdvFeatureConfig+0x15c>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	035b      	lsls	r3, r3, #13
 800225a:	429a      	cmp	r2, r3
 800225c:	d10b      	bne.n	8002276 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <UART_AdvFeatureConfig+0x160>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	4013      	ands	r3, r2
 800227e:	d00b      	beq.n	8002298 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <UART_AdvFeatureConfig+0x164>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  }
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	ffff7fff 	.word	0xffff7fff
 80022a4:	fffdffff 	.word	0xfffdffff
 80022a8:	fffeffff 	.word	0xfffeffff
 80022ac:	fffbffff 	.word	0xfffbffff
 80022b0:	ffffefff 	.word	0xffffefff
 80022b4:	ffffdfff 	.word	0xffffdfff
 80022b8:	ffefffff 	.word	0xffefffff
 80022bc:	ff9fffff 	.word	0xff9fffff
 80022c0:	fff7ffff 	.word	0xfff7ffff

080022c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2290      	movs	r2, #144	; 0x90
 80022d0:	2100      	movs	r1, #0
 80022d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022d4:	f7fe fbb0 	bl	8000a38 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2208      	movs	r2, #8
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d12d      	bne.n	8002346 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0391      	lsls	r1, r2, #14
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4a47      	ldr	r2, [pc, #284]	; (8002410 <UART_CheckIdleState+0x14c>)
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f000 f88e 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d022      	beq.n	8002346 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
 800230a:	2301      	movs	r3, #1
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	f383 8810 	msr	PRIMASK, r3
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	438a      	bics	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2288      	movs	r2, #136	; 0x88
 8002336:	2120      	movs	r1, #32
 8002338:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2284      	movs	r2, #132	; 0x84
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e060      	b.n	8002408 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2204      	movs	r2, #4
 800234e:	4013      	ands	r3, r2
 8002350:	2b04      	cmp	r3, #4
 8002352:	d146      	bne.n	80023e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	03d1      	lsls	r1, r2, #15
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	4a2c      	ldr	r2, [pc, #176]	; (8002410 <UART_CheckIdleState+0x14c>)
 800235e:	9200      	str	r2, [sp, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	f000 f859 	bl	8002418 <UART_WaitOnFlagUntilTimeout>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d03b      	beq.n	80023e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236a:	f3ef 8310 	mrs	r3, PRIMASK
 800236e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002370:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f383 8810 	msr	PRIMASK, r3
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4922      	ldr	r1, [pc, #136]	; (8002414 <UART_CheckIdleState+0x150>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f383 8810 	msr	PRIMASK, r3
}
 800239a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800239c:	f3ef 8310 	mrs	r3, PRIMASK
 80023a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80023a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f383 8810 	msr	PRIMASK, r3
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	438a      	bics	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	228c      	movs	r2, #140	; 0x8c
 80023d2:	2120      	movs	r1, #32
 80023d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2284      	movs	r2, #132	; 0x84
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e012      	b.n	8002408 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2288      	movs	r2, #136	; 0x88
 80023e6:	2120      	movs	r1, #32
 80023e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	228c      	movs	r2, #140	; 0x8c
 80023ee:	2120      	movs	r1, #32
 80023f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2284      	movs	r2, #132	; 0x84
 8002402:	2100      	movs	r1, #0
 8002404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b010      	add	sp, #64	; 0x40
 800240e:	bd80      	pop	{r7, pc}
 8002410:	01ffffff 	.word	0x01ffffff
 8002414:	fffffedf 	.word	0xfffffedf

08002418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002428:	e051      	b.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	3301      	adds	r3, #1
 800242e:	d04e      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002430:	f7fe fb02 	bl	8000a38 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	429a      	cmp	r2, r3
 800243e:	d302      	bcc.n	8002446 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e051      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	4013      	ands	r3, r2
 8002454:	d03b      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d038      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d035      	beq.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2208      	movs	r2, #8
 800246a:	4013      	ands	r3, r2
 800246c:	2b08      	cmp	r3, #8
 800246e:	d111      	bne.n	8002494 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2208      	movs	r2, #8
 8002476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 f83c 	bl	80024f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2290      	movs	r2, #144	; 0x90
 8002484:	2108      	movs	r1, #8
 8002486:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2284      	movs	r2, #132	; 0x84
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e02c      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	401a      	ands	r2, r3
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d112      	bne.n	80024ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f81f 	bl	80024f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2290      	movs	r2, #144	; 0x90
 80024be:	2120      	movs	r1, #32
 80024c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2284      	movs	r2, #132	; 0x84
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e00f      	b.n	80024ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	425a      	negs	r2, r3
 80024de:	4153      	adcs	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	001a      	movs	r2, r3
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d09e      	beq.n	800242a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08e      	sub	sp, #56	; 0x38
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002500:	f3ef 8310 	mrs	r3, PRIMASK
 8002504:	617b      	str	r3, [r7, #20]
  return(result);
 8002506:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f383 8810 	msr	PRIMASK, r3
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4926      	ldr	r1, [pc, #152]	; (80025bc <UART_EndRxTransfer+0xc4>)
 8002522:	400a      	ands	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002532:	f3ef 8310 	mrs	r3, PRIMASK
 8002536:	623b      	str	r3, [r7, #32]
  return(result);
 8002538:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f383 8810 	msr	PRIMASK, r3
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	491b      	ldr	r1, [pc, #108]	; (80025c0 <UART_EndRxTransfer+0xc8>)
 8002554:	400a      	ands	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d118      	bne.n	800259e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256c:	f3ef 8310 	mrs	r3, PRIMASK
 8002570:	60bb      	str	r3, [r7, #8]
  return(result);
 8002572:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002576:	2301      	movs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f383 8810 	msr	PRIMASK, r3
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2110      	movs	r1, #16
 800258e:	438a      	bics	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f383 8810 	msr	PRIMASK, r3
}
 800259c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	228c      	movs	r2, #140	; 0x8c
 80025a2:	2120      	movs	r1, #32
 80025a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b00e      	add	sp, #56	; 0x38
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	fffffedf 	.word	0xfffffedf
 80025c0:	effffffe 	.word	0xeffffffe

080025c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2284      	movs	r2, #132	; 0x84
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_UARTEx_DisableFifoMode+0x16>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e027      	b.n	800262a <HAL_UARTEx_DisableFifoMode+0x66>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2284      	movs	r2, #132	; 0x84
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2288      	movs	r2, #136	; 0x88
 80025e6:	2124      	movs	r1, #36	; 0x24
 80025e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2288      	movs	r2, #136	; 0x88
 800261c:	2120      	movs	r1, #32
 800261e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2284      	movs	r2, #132	; 0x84
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	dfffffff 	.word	0xdfffffff

08002638 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2284      	movs	r2, #132	; 0x84
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e02e      	b.n	80026ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2284      	movs	r2, #132	; 0x84
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2288      	movs	r2, #136	; 0x88
 800265c:	2124      	movs	r1, #36	; 0x24
 800265e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	08d9      	lsrs	r1, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f854 	bl	800273c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2288      	movs	r2, #136	; 0x88
 80026a0:	2120      	movs	r1, #32
 80026a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2284      	movs	r2, #132	; 0x84
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b004      	add	sp, #16
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2284      	movs	r2, #132	; 0x84
 80026c6:	5c9b      	ldrb	r3, [r3, r2]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e02f      	b.n	8002730 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2284      	movs	r2, #132	; 0x84
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2288      	movs	r2, #136	; 0x88
 80026dc:	2124      	movs	r1, #36	; 0x24
 80026de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	438a      	bics	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f813 	bl	800273c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2288      	movs	r2, #136	; 0x88
 8002722:	2120      	movs	r1, #32
 8002724:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2284      	movs	r2, #132	; 0x84
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}
 8002738:	f1ffffff 	.word	0xf1ffffff

0800273c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	226a      	movs	r2, #106	; 0x6a
 8002750:	2101      	movs	r1, #1
 8002752:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2268      	movs	r2, #104	; 0x68
 8002758:	2101      	movs	r1, #1
 800275a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800275c:	e043      	b.n	80027e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800275e:	260f      	movs	r6, #15
 8002760:	19bb      	adds	r3, r7, r6
 8002762:	2208      	movs	r2, #8
 8002764:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002766:	200e      	movs	r0, #14
 8002768:	183b      	adds	r3, r7, r0
 800276a:	2208      	movs	r2, #8
 800276c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	0e5b      	lsrs	r3, r3, #25
 8002776:	b2da      	uxtb	r2, r3
 8002778:	240d      	movs	r4, #13
 800277a:	193b      	adds	r3, r7, r4
 800277c:	2107      	movs	r1, #7
 800277e:	400a      	ands	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	0f5b      	lsrs	r3, r3, #29
 800278a:	b2da      	uxtb	r2, r3
 800278c:	250c      	movs	r5, #12
 800278e:	197b      	adds	r3, r7, r5
 8002790:	2107      	movs	r1, #7
 8002792:	400a      	ands	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002796:	183b      	adds	r3, r7, r0
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	197a      	adds	r2, r7, r5
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	4914      	ldr	r1, [pc, #80]	; (80027f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80027a0:	5c8a      	ldrb	r2, [r1, r2]
 80027a2:	435a      	muls	r2, r3
 80027a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80027a6:	197b      	adds	r3, r7, r5
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80027ae:	0019      	movs	r1, r3
 80027b0:	f7fd fd3a 	bl	8000228 <__divsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	b299      	uxth	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	226a      	movs	r2, #106	; 0x6a
 80027bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80027be:	19bb      	adds	r3, r7, r6
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	193a      	adds	r2, r7, r4
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80027c8:	5c8a      	ldrb	r2, [r1, r2]
 80027ca:	435a      	muls	r2, r3
 80027cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80027d6:	0019      	movs	r1, r3
 80027d8:	f7fd fd26 	bl	8000228 <__divsi3>
 80027dc:	0003      	movs	r3, r0
 80027de:	b299      	uxth	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2268      	movs	r2, #104	; 0x68
 80027e4:	5299      	strh	r1, [r3, r2]
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b005      	add	sp, #20
 80027ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	08003764 	.word	0x08003764
 80027f4:	0800376c 	.word	0x0800376c

080027f8 <std>:
 80027f8:	2300      	movs	r3, #0
 80027fa:	b510      	push	{r4, lr}
 80027fc:	0004      	movs	r4, r0
 80027fe:	6003      	str	r3, [r0, #0]
 8002800:	6043      	str	r3, [r0, #4]
 8002802:	6083      	str	r3, [r0, #8]
 8002804:	8181      	strh	r1, [r0, #12]
 8002806:	6643      	str	r3, [r0, #100]	; 0x64
 8002808:	81c2      	strh	r2, [r0, #14]
 800280a:	6103      	str	r3, [r0, #16]
 800280c:	6143      	str	r3, [r0, #20]
 800280e:	6183      	str	r3, [r0, #24]
 8002810:	0019      	movs	r1, r3
 8002812:	2208      	movs	r2, #8
 8002814:	305c      	adds	r0, #92	; 0x5c
 8002816:	f000 f90f 	bl	8002a38 <memset>
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <std+0x50>)
 800281c:	6224      	str	r4, [r4, #32]
 800281e:	6263      	str	r3, [r4, #36]	; 0x24
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <std+0x54>)
 8002822:	62a3      	str	r3, [r4, #40]	; 0x28
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <std+0x58>)
 8002826:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <std+0x5c>)
 800282a:	6323      	str	r3, [r4, #48]	; 0x30
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <std+0x60>)
 800282e:	429c      	cmp	r4, r3
 8002830:	d005      	beq.n	800283e <std+0x46>
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <std+0x64>)
 8002834:	429c      	cmp	r4, r3
 8002836:	d002      	beq.n	800283e <std+0x46>
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <std+0x68>)
 800283a:	429c      	cmp	r4, r3
 800283c:	d103      	bne.n	8002846 <std+0x4e>
 800283e:	0020      	movs	r0, r4
 8002840:	3058      	adds	r0, #88	; 0x58
 8002842:	f000 f979 	bl	8002b38 <__retarget_lock_init_recursive>
 8002846:	bd10      	pop	{r4, pc}
 8002848:	080029a1 	.word	0x080029a1
 800284c:	080029c9 	.word	0x080029c9
 8002850:	08002a01 	.word	0x08002a01
 8002854:	08002a2d 	.word	0x08002a2d
 8002858:	20000124 	.word	0x20000124
 800285c:	2000018c 	.word	0x2000018c
 8002860:	200001f4 	.word	0x200001f4

08002864 <stdio_exit_handler>:
 8002864:	b510      	push	{r4, lr}
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <stdio_exit_handler+0x10>)
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <stdio_exit_handler+0x14>)
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <stdio_exit_handler+0x18>)
 800286c:	f000 f86c 	bl	8002948 <_fwalk_sglue>
 8002870:	bd10      	pop	{r4, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	2000000c 	.word	0x2000000c
 8002878:	080033d9 	.word	0x080033d9
 800287c:	20000018 	.word	0x20000018

08002880 <cleanup_stdio>:
 8002880:	6841      	ldr	r1, [r0, #4]
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <cleanup_stdio+0x30>)
 8002884:	b510      	push	{r4, lr}
 8002886:	0004      	movs	r4, r0
 8002888:	4299      	cmp	r1, r3
 800288a:	d001      	beq.n	8002890 <cleanup_stdio+0x10>
 800288c:	f000 fda4 	bl	80033d8 <_fflush_r>
 8002890:	68a1      	ldr	r1, [r4, #8]
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <cleanup_stdio+0x34>)
 8002894:	4299      	cmp	r1, r3
 8002896:	d002      	beq.n	800289e <cleanup_stdio+0x1e>
 8002898:	0020      	movs	r0, r4
 800289a:	f000 fd9d 	bl	80033d8 <_fflush_r>
 800289e:	68e1      	ldr	r1, [r4, #12]
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <cleanup_stdio+0x38>)
 80028a2:	4299      	cmp	r1, r3
 80028a4:	d002      	beq.n	80028ac <cleanup_stdio+0x2c>
 80028a6:	0020      	movs	r0, r4
 80028a8:	f000 fd96 	bl	80033d8 <_fflush_r>
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	20000124 	.word	0x20000124
 80028b4:	2000018c 	.word	0x2000018c
 80028b8:	200001f4 	.word	0x200001f4

080028bc <global_stdio_init.part.0>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <global_stdio_init.part.0+0x28>)
 80028c0:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <global_stdio_init.part.0+0x2c>)
 80028c2:	2104      	movs	r1, #4
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	4809      	ldr	r0, [pc, #36]	; (80028ec <global_stdio_init.part.0+0x30>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	f7ff ff95 	bl	80027f8 <std>
 80028ce:	2201      	movs	r2, #1
 80028d0:	2109      	movs	r1, #9
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <global_stdio_init.part.0+0x34>)
 80028d4:	f7ff ff90 	bl	80027f8 <std>
 80028d8:	2202      	movs	r2, #2
 80028da:	2112      	movs	r1, #18
 80028dc:	4805      	ldr	r0, [pc, #20]	; (80028f4 <global_stdio_init.part.0+0x38>)
 80028de:	f7ff ff8b 	bl	80027f8 <std>
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	2000025c 	.word	0x2000025c
 80028e8:	08002865 	.word	0x08002865
 80028ec:	20000124 	.word	0x20000124
 80028f0:	2000018c 	.word	0x2000018c
 80028f4:	200001f4 	.word	0x200001f4

080028f8 <__sfp_lock_acquire>:
 80028f8:	b510      	push	{r4, lr}
 80028fa:	4802      	ldr	r0, [pc, #8]	; (8002904 <__sfp_lock_acquire+0xc>)
 80028fc:	f000 f91d 	bl	8002b3a <__retarget_lock_acquire_recursive>
 8002900:	bd10      	pop	{r4, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	20000265 	.word	0x20000265

08002908 <__sfp_lock_release>:
 8002908:	b510      	push	{r4, lr}
 800290a:	4802      	ldr	r0, [pc, #8]	; (8002914 <__sfp_lock_release+0xc>)
 800290c:	f000 f916 	bl	8002b3c <__retarget_lock_release_recursive>
 8002910:	bd10      	pop	{r4, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	20000265 	.word	0x20000265

08002918 <__sinit>:
 8002918:	b510      	push	{r4, lr}
 800291a:	0004      	movs	r4, r0
 800291c:	f7ff ffec 	bl	80028f8 <__sfp_lock_acquire>
 8002920:	6a23      	ldr	r3, [r4, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <__sinit+0x14>
 8002926:	f7ff ffef 	bl	8002908 <__sfp_lock_release>
 800292a:	bd10      	pop	{r4, pc}
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__sinit+0x28>)
 800292e:	6223      	str	r3, [r4, #32]
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__sinit+0x2c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f6      	bne.n	8002926 <__sinit+0xe>
 8002938:	f7ff ffc0 	bl	80028bc <global_stdio_init.part.0>
 800293c:	e7f3      	b.n	8002926 <__sinit+0xe>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	08002881 	.word	0x08002881
 8002944:	2000025c 	.word	0x2000025c

08002948 <_fwalk_sglue>:
 8002948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800294a:	0014      	movs	r4, r2
 800294c:	2600      	movs	r6, #0
 800294e:	9000      	str	r0, [sp, #0]
 8002950:	9101      	str	r1, [sp, #4]
 8002952:	68a5      	ldr	r5, [r4, #8]
 8002954:	6867      	ldr	r7, [r4, #4]
 8002956:	3f01      	subs	r7, #1
 8002958:	d504      	bpl.n	8002964 <_fwalk_sglue+0x1c>
 800295a:	6824      	ldr	r4, [r4, #0]
 800295c:	2c00      	cmp	r4, #0
 800295e:	d1f8      	bne.n	8002952 <_fwalk_sglue+0xa>
 8002960:	0030      	movs	r0, r6
 8002962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002964:	89ab      	ldrh	r3, [r5, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d908      	bls.n	800297c <_fwalk_sglue+0x34>
 800296a:	220e      	movs	r2, #14
 800296c:	5eab      	ldrsh	r3, [r5, r2]
 800296e:	3301      	adds	r3, #1
 8002970:	d004      	beq.n	800297c <_fwalk_sglue+0x34>
 8002972:	0029      	movs	r1, r5
 8002974:	9800      	ldr	r0, [sp, #0]
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	4798      	blx	r3
 800297a:	4306      	orrs	r6, r0
 800297c:	3568      	adds	r5, #104	; 0x68
 800297e:	e7ea      	b.n	8002956 <_fwalk_sglue+0xe>

08002980 <iprintf>:
 8002980:	b40f      	push	{r0, r1, r2, r3}
 8002982:	b507      	push	{r0, r1, r2, lr}
 8002984:	4905      	ldr	r1, [pc, #20]	; (800299c <iprintf+0x1c>)
 8002986:	ab04      	add	r3, sp, #16
 8002988:	6808      	ldr	r0, [r1, #0]
 800298a:	cb04      	ldmia	r3!, {r2}
 800298c:	6881      	ldr	r1, [r0, #8]
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	f000 f9fc 	bl	8002d8c <_vfiprintf_r>
 8002994:	b003      	add	sp, #12
 8002996:	bc08      	pop	{r3}
 8002998:	b004      	add	sp, #16
 800299a:	4718      	bx	r3
 800299c:	20000064 	.word	0x20000064

080029a0 <__sread>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	000c      	movs	r4, r1
 80029a4:	250e      	movs	r5, #14
 80029a6:	5f49      	ldrsh	r1, [r1, r5]
 80029a8:	f000 f874 	bl	8002a94 <_read_r>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	db03      	blt.n	80029b8 <__sread+0x18>
 80029b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029b2:	181b      	adds	r3, r3, r0
 80029b4:	6563      	str	r3, [r4, #84]	; 0x54
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	4a02      	ldr	r2, [pc, #8]	; (80029c4 <__sread+0x24>)
 80029bc:	4013      	ands	r3, r2
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	e7f9      	b.n	80029b6 <__sread+0x16>
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	ffffefff 	.word	0xffffefff

080029c8 <__swrite>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	001f      	movs	r7, r3
 80029cc:	898b      	ldrh	r3, [r1, #12]
 80029ce:	0005      	movs	r5, r0
 80029d0:	000c      	movs	r4, r1
 80029d2:	0016      	movs	r6, r2
 80029d4:	05db      	lsls	r3, r3, #23
 80029d6:	d505      	bpl.n	80029e4 <__swrite+0x1c>
 80029d8:	230e      	movs	r3, #14
 80029da:	5ec9      	ldrsh	r1, [r1, r3]
 80029dc:	2200      	movs	r2, #0
 80029de:	2302      	movs	r3, #2
 80029e0:	f000 f844 	bl	8002a6c <_lseek_r>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <__swrite+0x34>)
 80029e8:	0028      	movs	r0, r5
 80029ea:	4013      	ands	r3, r2
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	0032      	movs	r2, r6
 80029f0:	230e      	movs	r3, #14
 80029f2:	5ee1      	ldrsh	r1, [r4, r3]
 80029f4:	003b      	movs	r3, r7
 80029f6:	f000 f861 	bl	8002abc <_write_r>
 80029fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fc:	ffffefff 	.word	0xffffefff

08002a00 <__sseek>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	000c      	movs	r4, r1
 8002a04:	250e      	movs	r5, #14
 8002a06:	5f49      	ldrsh	r1, [r1, r5]
 8002a08:	f000 f830 	bl	8002a6c <_lseek_r>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	1c42      	adds	r2, r0, #1
 8002a10:	d103      	bne.n	8002a1a <__sseek+0x1a>
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <__sseek+0x28>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0152      	lsls	r2, r2, #5
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	6560      	str	r0, [r4, #84]	; 0x54
 8002a24:	e7f8      	b.n	8002a18 <__sseek+0x18>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	ffffefff 	.word	0xffffefff

08002a2c <__sclose>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	230e      	movs	r3, #14
 8002a30:	5ec9      	ldrsh	r1, [r1, r3]
 8002a32:	f000 f809 	bl	8002a48 <_close_r>
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <memset>:
 8002a38:	0003      	movs	r3, r0
 8002a3a:	1882      	adds	r2, r0, r2
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	7019      	strb	r1, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <_close_r>:
 8002a48:	2300      	movs	r3, #0
 8002a4a:	b570      	push	{r4, r5, r6, lr}
 8002a4c:	4d06      	ldr	r5, [pc, #24]	; (8002a68 <_close_r+0x20>)
 8002a4e:	0004      	movs	r4, r0
 8002a50:	0008      	movs	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7fd fee2 	bl	800081c <_close>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d103      	bne.n	8002a64 <_close_r+0x1c>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d000      	beq.n	8002a64 <_close_r+0x1c>
 8002a62:	6023      	str	r3, [r4, #0]
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	20000260 	.word	0x20000260

08002a6c <_lseek_r>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	0004      	movs	r4, r0
 8002a70:	0008      	movs	r0, r1
 8002a72:	0011      	movs	r1, r2
 8002a74:	001a      	movs	r2, r3
 8002a76:	2300      	movs	r3, #0
 8002a78:	4d05      	ldr	r5, [pc, #20]	; (8002a90 <_lseek_r+0x24>)
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fd feef 	bl	800085e <_lseek>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d103      	bne.n	8002a8c <_lseek_r+0x20>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d000      	beq.n	8002a8c <_lseek_r+0x20>
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	20000260 	.word	0x20000260

08002a94 <_read_r>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	0004      	movs	r4, r0
 8002a98:	0008      	movs	r0, r1
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	4d05      	ldr	r5, [pc, #20]	; (8002ab8 <_read_r+0x24>)
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	f7fd fe9d 	bl	80007e2 <_read>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d103      	bne.n	8002ab4 <_read_r+0x20>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d000      	beq.n	8002ab4 <_read_r+0x20>
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000260 	.word	0x20000260

08002abc <_write_r>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	0004      	movs	r4, r0
 8002ac0:	0008      	movs	r0, r1
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4d05      	ldr	r5, [pc, #20]	; (8002ae0 <_write_r+0x24>)
 8002aca:	602b      	str	r3, [r5, #0]
 8002acc:	f7fd fc98 	bl	8000400 <_write>
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d103      	bne.n	8002adc <_write_r+0x20>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d000      	beq.n	8002adc <_write_r+0x20>
 8002ada:	6023      	str	r3, [r4, #0]
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000260 	.word	0x20000260

08002ae4 <__errno>:
 8002ae4:	4b01      	ldr	r3, [pc, #4]	; (8002aec <__errno+0x8>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	4770      	bx	lr
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	20000064 	.word	0x20000064

08002af0 <__libc_init_array>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	2600      	movs	r6, #0
 8002af4:	4c0c      	ldr	r4, [pc, #48]	; (8002b28 <__libc_init_array+0x38>)
 8002af6:	4d0d      	ldr	r5, [pc, #52]	; (8002b2c <__libc_init_array+0x3c>)
 8002af8:	1b64      	subs	r4, r4, r5
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	42a6      	cmp	r6, r4
 8002afe:	d109      	bne.n	8002b14 <__libc_init_array+0x24>
 8002b00:	2600      	movs	r6, #0
 8002b02:	f000 fde3 	bl	80036cc <_init>
 8002b06:	4c0a      	ldr	r4, [pc, #40]	; (8002b30 <__libc_init_array+0x40>)
 8002b08:	4d0a      	ldr	r5, [pc, #40]	; (8002b34 <__libc_init_array+0x44>)
 8002b0a:	1b64      	subs	r4, r4, r5
 8002b0c:	10a4      	asrs	r4, r4, #2
 8002b0e:	42a6      	cmp	r6, r4
 8002b10:	d105      	bne.n	8002b1e <__libc_init_array+0x2e>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	00b3      	lsls	r3, r6, #2
 8002b16:	58eb      	ldr	r3, [r5, r3]
 8002b18:	4798      	blx	r3
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7ee      	b.n	8002afc <__libc_init_array+0xc>
 8002b1e:	00b3      	lsls	r3, r6, #2
 8002b20:	58eb      	ldr	r3, [r5, r3]
 8002b22:	4798      	blx	r3
 8002b24:	3601      	adds	r6, #1
 8002b26:	e7f2      	b.n	8002b0e <__libc_init_array+0x1e>
 8002b28:	080037a8 	.word	0x080037a8
 8002b2c:	080037a8 	.word	0x080037a8
 8002b30:	080037ac 	.word	0x080037ac
 8002b34:	080037a8 	.word	0x080037a8

08002b38 <__retarget_lock_init_recursive>:
 8002b38:	4770      	bx	lr

08002b3a <__retarget_lock_acquire_recursive>:
 8002b3a:	4770      	bx	lr

08002b3c <__retarget_lock_release_recursive>:
 8002b3c:	4770      	bx	lr
	...

08002b40 <_free_r>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	0005      	movs	r5, r0
 8002b44:	2900      	cmp	r1, #0
 8002b46:	d010      	beq.n	8002b6a <_free_r+0x2a>
 8002b48:	1f0c      	subs	r4, r1, #4
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da00      	bge.n	8002b52 <_free_r+0x12>
 8002b50:	18e4      	adds	r4, r4, r3
 8002b52:	0028      	movs	r0, r5
 8002b54:	f000 f8e2 	bl	8002d1c <__malloc_lock>
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <_free_r+0x90>)
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <_free_r+0x2c>
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	6014      	str	r4, [r2, #0]
 8002b64:	0028      	movs	r0, r5
 8002b66:	f000 f8e1 	bl	8002d2c <__malloc_unlock>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	d908      	bls.n	8002b82 <_free_r+0x42>
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	1821      	adds	r1, r4, r0
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d1f3      	bne.n	8002b60 <_free_r+0x20>
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	1809      	adds	r1, r1, r0
 8002b7e:	6021      	str	r1, [r4, #0]
 8002b80:	e7ee      	b.n	8002b60 <_free_r+0x20>
 8002b82:	001a      	movs	r2, r3
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <_free_r+0x4e>
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	d9f9      	bls.n	8002b82 <_free_r+0x42>
 8002b8e:	6811      	ldr	r1, [r2, #0]
 8002b90:	1850      	adds	r0, r2, r1
 8002b92:	42a0      	cmp	r0, r4
 8002b94:	d10b      	bne.n	8002bae <_free_r+0x6e>
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	1809      	adds	r1, r1, r0
 8002b9a:	1850      	adds	r0, r2, r1
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	4283      	cmp	r3, r0
 8002ba0:	d1e0      	bne.n	8002b64 <_free_r+0x24>
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	1841      	adds	r1, r0, r1
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	6053      	str	r3, [r2, #4]
 8002bac:	e7da      	b.n	8002b64 <_free_r+0x24>
 8002bae:	42a0      	cmp	r0, r4
 8002bb0:	d902      	bls.n	8002bb8 <_free_r+0x78>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	e7d5      	b.n	8002b64 <_free_r+0x24>
 8002bb8:	6820      	ldr	r0, [r4, #0]
 8002bba:	1821      	adds	r1, r4, r0
 8002bbc:	428b      	cmp	r3, r1
 8002bbe:	d103      	bne.n	8002bc8 <_free_r+0x88>
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	1809      	adds	r1, r1, r0
 8002bc6:	6021      	str	r1, [r4, #0]
 8002bc8:	6063      	str	r3, [r4, #4]
 8002bca:	6054      	str	r4, [r2, #4]
 8002bcc:	e7ca      	b.n	8002b64 <_free_r+0x24>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	20000268 	.word	0x20000268

08002bd4 <sbrk_aligned>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	4e0f      	ldr	r6, [pc, #60]	; (8002c14 <sbrk_aligned+0x40>)
 8002bd8:	000d      	movs	r5, r1
 8002bda:	6831      	ldr	r1, [r6, #0]
 8002bdc:	0004      	movs	r4, r0
 8002bde:	2900      	cmp	r1, #0
 8002be0:	d102      	bne.n	8002be8 <sbrk_aligned+0x14>
 8002be2:	f000 fccb 	bl	800357c <_sbrk_r>
 8002be6:	6030      	str	r0, [r6, #0]
 8002be8:	0029      	movs	r1, r5
 8002bea:	0020      	movs	r0, r4
 8002bec:	f000 fcc6 	bl	800357c <_sbrk_r>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d00a      	beq.n	8002c0a <sbrk_aligned+0x36>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	1cc5      	adds	r5, r0, #3
 8002bf8:	439d      	bics	r5, r3
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d007      	beq.n	8002c0e <sbrk_aligned+0x3a>
 8002bfe:	1a29      	subs	r1, r5, r0
 8002c00:	0020      	movs	r0, r4
 8002c02:	f000 fcbb 	bl	800357c <_sbrk_r>
 8002c06:	3001      	adds	r0, #1
 8002c08:	d101      	bne.n	8002c0e <sbrk_aligned+0x3a>
 8002c0a:	2501      	movs	r5, #1
 8002c0c:	426d      	negs	r5, r5
 8002c0e:	0028      	movs	r0, r5
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	2000026c 	.word	0x2000026c

08002c18 <_malloc_r>:
 8002c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	1ccb      	adds	r3, r1, #3
 8002c1e:	4393      	bics	r3, r2
 8002c20:	3308      	adds	r3, #8
 8002c22:	0006      	movs	r6, r0
 8002c24:	001f      	movs	r7, r3
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d238      	bcs.n	8002c9c <_malloc_r+0x84>
 8002c2a:	270c      	movs	r7, #12
 8002c2c:	42b9      	cmp	r1, r7
 8002c2e:	d837      	bhi.n	8002ca0 <_malloc_r+0x88>
 8002c30:	0030      	movs	r0, r6
 8002c32:	f000 f873 	bl	8002d1c <__malloc_lock>
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <_malloc_r+0x100>)
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	001c      	movs	r4, r3
 8002c3e:	2c00      	cmp	r4, #0
 8002c40:	d133      	bne.n	8002caa <_malloc_r+0x92>
 8002c42:	0039      	movs	r1, r7
 8002c44:	0030      	movs	r0, r6
 8002c46:	f7ff ffc5 	bl	8002bd4 <sbrk_aligned>
 8002c4a:	0004      	movs	r4, r0
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d15e      	bne.n	8002d0e <_malloc_r+0xf6>
 8002c50:	9b00      	ldr	r3, [sp, #0]
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	0025      	movs	r5, r4
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d14e      	bne.n	8002cf8 <_malloc_r+0xe0>
 8002c5a:	2c00      	cmp	r4, #0
 8002c5c:	d051      	beq.n	8002d02 <_malloc_r+0xea>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	0029      	movs	r1, r5
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	0030      	movs	r0, r6
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	f000 fc88 	bl	800357c <_sbrk_r>
 8002c6c:	9b01      	ldr	r3, [sp, #4]
 8002c6e:	4283      	cmp	r3, r0
 8002c70:	d147      	bne.n	8002d02 <_malloc_r+0xea>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	0030      	movs	r0, r6
 8002c76:	1aff      	subs	r7, r7, r3
 8002c78:	0039      	movs	r1, r7
 8002c7a:	f7ff ffab 	bl	8002bd4 <sbrk_aligned>
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d03f      	beq.n	8002d02 <_malloc_r+0xea>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	6023      	str	r3, [r4, #0]
 8002c88:	9b00      	ldr	r3, [sp, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d040      	beq.n	8002d12 <_malloc_r+0xfa>
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	42a2      	cmp	r2, r4
 8002c94:	d133      	bne.n	8002cfe <_malloc_r+0xe6>
 8002c96:	2200      	movs	r2, #0
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	e014      	b.n	8002cc6 <_malloc_r+0xae>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	dac5      	bge.n	8002c2c <_malloc_r+0x14>
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	6033      	str	r3, [r6, #0]
 8002ca6:	0028      	movs	r0, r5
 8002ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002caa:	6821      	ldr	r1, [r4, #0]
 8002cac:	1bc9      	subs	r1, r1, r7
 8002cae:	d420      	bmi.n	8002cf2 <_malloc_r+0xda>
 8002cb0:	290b      	cmp	r1, #11
 8002cb2:	d918      	bls.n	8002ce6 <_malloc_r+0xce>
 8002cb4:	19e2      	adds	r2, r4, r7
 8002cb6:	6027      	str	r7, [r4, #0]
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	d112      	bne.n	8002ce2 <_malloc_r+0xca>
 8002cbc:	9b00      	ldr	r3, [sp, #0]
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	6863      	ldr	r3, [r4, #4]
 8002cc2:	6011      	str	r1, [r2, #0]
 8002cc4:	6053      	str	r3, [r2, #4]
 8002cc6:	0030      	movs	r0, r6
 8002cc8:	0025      	movs	r5, r4
 8002cca:	f000 f82f 	bl	8002d2c <__malloc_unlock>
 8002cce:	2207      	movs	r2, #7
 8002cd0:	350b      	adds	r5, #11
 8002cd2:	1d23      	adds	r3, r4, #4
 8002cd4:	4395      	bics	r5, r2
 8002cd6:	1aea      	subs	r2, r5, r3
 8002cd8:	429d      	cmp	r5, r3
 8002cda:	d0e4      	beq.n	8002ca6 <_malloc_r+0x8e>
 8002cdc:	1b5b      	subs	r3, r3, r5
 8002cde:	50a3      	str	r3, [r4, r2]
 8002ce0:	e7e1      	b.n	8002ca6 <_malloc_r+0x8e>
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	e7ec      	b.n	8002cc0 <_malloc_r+0xa8>
 8002ce6:	6862      	ldr	r2, [r4, #4]
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d1d5      	bne.n	8002c98 <_malloc_r+0x80>
 8002cec:	9b00      	ldr	r3, [sp, #0]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e7e9      	b.n	8002cc6 <_malloc_r+0xae>
 8002cf2:	0023      	movs	r3, r4
 8002cf4:	6864      	ldr	r4, [r4, #4]
 8002cf6:	e7a2      	b.n	8002c3e <_malloc_r+0x26>
 8002cf8:	002c      	movs	r4, r5
 8002cfa:	686d      	ldr	r5, [r5, #4]
 8002cfc:	e7ab      	b.n	8002c56 <_malloc_r+0x3e>
 8002cfe:	0013      	movs	r3, r2
 8002d00:	e7c4      	b.n	8002c8c <_malloc_r+0x74>
 8002d02:	230c      	movs	r3, #12
 8002d04:	0030      	movs	r0, r6
 8002d06:	6033      	str	r3, [r6, #0]
 8002d08:	f000 f810 	bl	8002d2c <__malloc_unlock>
 8002d0c:	e7cb      	b.n	8002ca6 <_malloc_r+0x8e>
 8002d0e:	6027      	str	r7, [r4, #0]
 8002d10:	e7d9      	b.n	8002cc6 <_malloc_r+0xae>
 8002d12:	605b      	str	r3, [r3, #4]
 8002d14:	deff      	udf	#255	; 0xff
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	20000268 	.word	0x20000268

08002d1c <__malloc_lock>:
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	4802      	ldr	r0, [pc, #8]	; (8002d28 <__malloc_lock+0xc>)
 8002d20:	f7ff ff0b 	bl	8002b3a <__retarget_lock_acquire_recursive>
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000264 	.word	0x20000264

08002d2c <__malloc_unlock>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	4802      	ldr	r0, [pc, #8]	; (8002d38 <__malloc_unlock+0xc>)
 8002d30:	f7ff ff04 	bl	8002b3c <__retarget_lock_release_recursive>
 8002d34:	bd10      	pop	{r4, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	20000264 	.word	0x20000264

08002d3c <__sfputc_r>:
 8002d3c:	6893      	ldr	r3, [r2, #8]
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	3b01      	subs	r3, #1
 8002d42:	6093      	str	r3, [r2, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da04      	bge.n	8002d52 <__sfputc_r+0x16>
 8002d48:	6994      	ldr	r4, [r2, #24]
 8002d4a:	42a3      	cmp	r3, r4
 8002d4c:	db07      	blt.n	8002d5e <__sfputc_r+0x22>
 8002d4e:	290a      	cmp	r1, #10
 8002d50:	d005      	beq.n	8002d5e <__sfputc_r+0x22>
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	1c58      	adds	r0, r3, #1
 8002d56:	6010      	str	r0, [r2, #0]
 8002d58:	7019      	strb	r1, [r3, #0]
 8002d5a:	0008      	movs	r0, r1
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	f000 fb66 	bl	800342e <__swbuf_r>
 8002d62:	0001      	movs	r1, r0
 8002d64:	e7f9      	b.n	8002d5a <__sfputc_r+0x1e>

08002d66 <__sfputs_r>:
 8002d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d68:	0006      	movs	r6, r0
 8002d6a:	000f      	movs	r7, r1
 8002d6c:	0014      	movs	r4, r2
 8002d6e:	18d5      	adds	r5, r2, r3
 8002d70:	42ac      	cmp	r4, r5
 8002d72:	d101      	bne.n	8002d78 <__sfputs_r+0x12>
 8002d74:	2000      	movs	r0, #0
 8002d76:	e007      	b.n	8002d88 <__sfputs_r+0x22>
 8002d78:	7821      	ldrb	r1, [r4, #0]
 8002d7a:	003a      	movs	r2, r7
 8002d7c:	0030      	movs	r0, r6
 8002d7e:	f7ff ffdd 	bl	8002d3c <__sfputc_r>
 8002d82:	3401      	adds	r4, #1
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d1f3      	bne.n	8002d70 <__sfputs_r+0xa>
 8002d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d8c <_vfiprintf_r>:
 8002d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8e:	b0a1      	sub	sp, #132	; 0x84
 8002d90:	000f      	movs	r7, r1
 8002d92:	0015      	movs	r5, r2
 8002d94:	001e      	movs	r6, r3
 8002d96:	9003      	str	r0, [sp, #12]
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d004      	beq.n	8002da6 <_vfiprintf_r+0x1a>
 8002d9c:	6a03      	ldr	r3, [r0, #32]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <_vfiprintf_r+0x1a>
 8002da2:	f7ff fdb9 	bl	8002918 <__sinit>
 8002da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da8:	07db      	lsls	r3, r3, #31
 8002daa:	d405      	bmi.n	8002db8 <_vfiprintf_r+0x2c>
 8002dac:	89bb      	ldrh	r3, [r7, #12]
 8002dae:	059b      	lsls	r3, r3, #22
 8002db0:	d402      	bmi.n	8002db8 <_vfiprintf_r+0x2c>
 8002db2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002db4:	f7ff fec1 	bl	8002b3a <__retarget_lock_acquire_recursive>
 8002db8:	89bb      	ldrh	r3, [r7, #12]
 8002dba:	071b      	lsls	r3, r3, #28
 8002dbc:	d502      	bpl.n	8002dc4 <_vfiprintf_r+0x38>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d113      	bne.n	8002dec <_vfiprintf_r+0x60>
 8002dc4:	0039      	movs	r1, r7
 8002dc6:	9803      	ldr	r0, [sp, #12]
 8002dc8:	f000 fb74 	bl	80034b4 <__swsetup_r>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d00d      	beq.n	8002dec <_vfiprintf_r+0x60>
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd2:	07db      	lsls	r3, r3, #31
 8002dd4:	d503      	bpl.n	8002dde <_vfiprintf_r+0x52>
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	4240      	negs	r0, r0
 8002dda:	b021      	add	sp, #132	; 0x84
 8002ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dde:	89bb      	ldrh	r3, [r7, #12]
 8002de0:	059b      	lsls	r3, r3, #22
 8002de2:	d4f8      	bmi.n	8002dd6 <_vfiprintf_r+0x4a>
 8002de4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002de6:	f7ff fea9 	bl	8002b3c <__retarget_lock_release_recursive>
 8002dea:	e7f4      	b.n	8002dd6 <_vfiprintf_r+0x4a>
 8002dec:	2300      	movs	r3, #0
 8002dee:	ac08      	add	r4, sp, #32
 8002df0:	6163      	str	r3, [r4, #20]
 8002df2:	3320      	adds	r3, #32
 8002df4:	7663      	strb	r3, [r4, #25]
 8002df6:	3310      	adds	r3, #16
 8002df8:	76a3      	strb	r3, [r4, #26]
 8002dfa:	9607      	str	r6, [sp, #28]
 8002dfc:	002e      	movs	r6, r5
 8002dfe:	7833      	ldrb	r3, [r6, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <_vfiprintf_r+0x7c>
 8002e04:	2b25      	cmp	r3, #37	; 0x25
 8002e06:	d148      	bne.n	8002e9a <_vfiprintf_r+0x10e>
 8002e08:	1b73      	subs	r3, r6, r5
 8002e0a:	9305      	str	r3, [sp, #20]
 8002e0c:	42ae      	cmp	r6, r5
 8002e0e:	d00b      	beq.n	8002e28 <_vfiprintf_r+0x9c>
 8002e10:	002a      	movs	r2, r5
 8002e12:	0039      	movs	r1, r7
 8002e14:	9803      	ldr	r0, [sp, #12]
 8002e16:	f7ff ffa6 	bl	8002d66 <__sfputs_r>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d100      	bne.n	8002e20 <_vfiprintf_r+0x94>
 8002e1e:	e0af      	b.n	8002f80 <_vfiprintf_r+0x1f4>
 8002e20:	6963      	ldr	r3, [r4, #20]
 8002e22:	9a05      	ldr	r2, [sp, #20]
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	6163      	str	r3, [r4, #20]
 8002e28:	7833      	ldrb	r3, [r6, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d100      	bne.n	8002e30 <_vfiprintf_r+0xa4>
 8002e2e:	e0a7      	b.n	8002f80 <_vfiprintf_r+0x1f4>
 8002e30:	2201      	movs	r2, #1
 8002e32:	2300      	movs	r3, #0
 8002e34:	4252      	negs	r2, r2
 8002e36:	6062      	str	r2, [r4, #4]
 8002e38:	a904      	add	r1, sp, #16
 8002e3a:	3254      	adds	r2, #84	; 0x54
 8002e3c:	1852      	adds	r2, r2, r1
 8002e3e:	1c75      	adds	r5, r6, #1
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	60e3      	str	r3, [r4, #12]
 8002e44:	60a3      	str	r3, [r4, #8]
 8002e46:	7013      	strb	r3, [r2, #0]
 8002e48:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e4a:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <_vfiprintf_r+0x224>)
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	0018      	movs	r0, r3
 8002e50:	7829      	ldrb	r1, [r5, #0]
 8002e52:	9305      	str	r3, [sp, #20]
 8002e54:	f000 fba4 	bl	80035a0 <memchr>
 8002e58:	1c6e      	adds	r6, r5, #1
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d11f      	bne.n	8002e9e <_vfiprintf_r+0x112>
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	06d3      	lsls	r3, r2, #27
 8002e62:	d504      	bpl.n	8002e6e <_vfiprintf_r+0xe2>
 8002e64:	2353      	movs	r3, #83	; 0x53
 8002e66:	a904      	add	r1, sp, #16
 8002e68:	185b      	adds	r3, r3, r1
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	7019      	strb	r1, [r3, #0]
 8002e6e:	0713      	lsls	r3, r2, #28
 8002e70:	d504      	bpl.n	8002e7c <_vfiprintf_r+0xf0>
 8002e72:	2353      	movs	r3, #83	; 0x53
 8002e74:	a904      	add	r1, sp, #16
 8002e76:	185b      	adds	r3, r3, r1
 8002e78:	212b      	movs	r1, #43	; 0x2b
 8002e7a:	7019      	strb	r1, [r3, #0]
 8002e7c:	782b      	ldrb	r3, [r5, #0]
 8002e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e80:	d016      	beq.n	8002eb0 <_vfiprintf_r+0x124>
 8002e82:	002e      	movs	r6, r5
 8002e84:	2100      	movs	r1, #0
 8002e86:	200a      	movs	r0, #10
 8002e88:	68e3      	ldr	r3, [r4, #12]
 8002e8a:	7832      	ldrb	r2, [r6, #0]
 8002e8c:	1c75      	adds	r5, r6, #1
 8002e8e:	3a30      	subs	r2, #48	; 0x30
 8002e90:	2a09      	cmp	r2, #9
 8002e92:	d94e      	bls.n	8002f32 <_vfiprintf_r+0x1a6>
 8002e94:	2900      	cmp	r1, #0
 8002e96:	d111      	bne.n	8002ebc <_vfiprintf_r+0x130>
 8002e98:	e017      	b.n	8002eca <_vfiprintf_r+0x13e>
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7af      	b.n	8002dfe <_vfiprintf_r+0x72>
 8002e9e:	9b05      	ldr	r3, [sp, #20]
 8002ea0:	6822      	ldr	r2, [r4, #0]
 8002ea2:	1ac0      	subs	r0, r0, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4083      	lsls	r3, r0
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	0035      	movs	r5, r6
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	e7cc      	b.n	8002e4a <_vfiprintf_r+0xbe>
 8002eb0:	9b07      	ldr	r3, [sp, #28]
 8002eb2:	1d19      	adds	r1, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	9107      	str	r1, [sp, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db01      	blt.n	8002ec0 <_vfiprintf_r+0x134>
 8002ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ebe:	e004      	b.n	8002eca <_vfiprintf_r+0x13e>
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	60e3      	str	r3, [r4, #12]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	6023      	str	r3, [r4, #0]
 8002eca:	7833      	ldrb	r3, [r6, #0]
 8002ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8002ece:	d10a      	bne.n	8002ee6 <_vfiprintf_r+0x15a>
 8002ed0:	7873      	ldrb	r3, [r6, #1]
 8002ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed4:	d135      	bne.n	8002f42 <_vfiprintf_r+0x1b6>
 8002ed6:	9b07      	ldr	r3, [sp, #28]
 8002ed8:	3602      	adds	r6, #2
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9207      	str	r2, [sp, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db2b      	blt.n	8002f3c <_vfiprintf_r+0x1b0>
 8002ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee6:	4d33      	ldr	r5, [pc, #204]	; (8002fb4 <_vfiprintf_r+0x228>)
 8002ee8:	2203      	movs	r2, #3
 8002eea:	0028      	movs	r0, r5
 8002eec:	7831      	ldrb	r1, [r6, #0]
 8002eee:	f000 fb57 	bl	80035a0 <memchr>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d006      	beq.n	8002f04 <_vfiprintf_r+0x178>
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	1b40      	subs	r0, r0, r5
 8002efa:	4083      	lsls	r3, r0
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	3601      	adds	r6, #1
 8002f00:	4313      	orrs	r3, r2
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	7831      	ldrb	r1, [r6, #0]
 8002f06:	2206      	movs	r2, #6
 8002f08:	482b      	ldr	r0, [pc, #172]	; (8002fb8 <_vfiprintf_r+0x22c>)
 8002f0a:	1c75      	adds	r5, r6, #1
 8002f0c:	7621      	strb	r1, [r4, #24]
 8002f0e:	f000 fb47 	bl	80035a0 <memchr>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d043      	beq.n	8002f9e <_vfiprintf_r+0x212>
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <_vfiprintf_r+0x230>)
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d125      	bne.n	8002f68 <_vfiprintf_r+0x1dc>
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	9b07      	ldr	r3, [sp, #28]
 8002f20:	3307      	adds	r3, #7
 8002f22:	4393      	bics	r3, r2
 8002f24:	3308      	adds	r3, #8
 8002f26:	9307      	str	r3, [sp, #28]
 8002f28:	6963      	ldr	r3, [r4, #20]
 8002f2a:	9a04      	ldr	r2, [sp, #16]
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	6163      	str	r3, [r4, #20]
 8002f30:	e764      	b.n	8002dfc <_vfiprintf_r+0x70>
 8002f32:	4343      	muls	r3, r0
 8002f34:	002e      	movs	r6, r5
 8002f36:	2101      	movs	r1, #1
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	e7a6      	b.n	8002e8a <_vfiprintf_r+0xfe>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	425b      	negs	r3, r3
 8002f40:	e7d0      	b.n	8002ee4 <_vfiprintf_r+0x158>
 8002f42:	2300      	movs	r3, #0
 8002f44:	200a      	movs	r0, #10
 8002f46:	001a      	movs	r2, r3
 8002f48:	3601      	adds	r6, #1
 8002f4a:	6063      	str	r3, [r4, #4]
 8002f4c:	7831      	ldrb	r1, [r6, #0]
 8002f4e:	1c75      	adds	r5, r6, #1
 8002f50:	3930      	subs	r1, #48	; 0x30
 8002f52:	2909      	cmp	r1, #9
 8002f54:	d903      	bls.n	8002f5e <_vfiprintf_r+0x1d2>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0c5      	beq.n	8002ee6 <_vfiprintf_r+0x15a>
 8002f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8002f5c:	e7c3      	b.n	8002ee6 <_vfiprintf_r+0x15a>
 8002f5e:	4342      	muls	r2, r0
 8002f60:	002e      	movs	r6, r5
 8002f62:	2301      	movs	r3, #1
 8002f64:	1852      	adds	r2, r2, r1
 8002f66:	e7f1      	b.n	8002f4c <_vfiprintf_r+0x1c0>
 8002f68:	aa07      	add	r2, sp, #28
 8002f6a:	9200      	str	r2, [sp, #0]
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	003a      	movs	r2, r7
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <_vfiprintf_r+0x234>)
 8002f72:	9803      	ldr	r0, [sp, #12]
 8002f74:	e000      	b.n	8002f78 <_vfiprintf_r+0x1ec>
 8002f76:	bf00      	nop
 8002f78:	9004      	str	r0, [sp, #16]
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	d1d3      	bne.n	8002f28 <_vfiprintf_r+0x19c>
 8002f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f82:	07db      	lsls	r3, r3, #31
 8002f84:	d405      	bmi.n	8002f92 <_vfiprintf_r+0x206>
 8002f86:	89bb      	ldrh	r3, [r7, #12]
 8002f88:	059b      	lsls	r3, r3, #22
 8002f8a:	d402      	bmi.n	8002f92 <_vfiprintf_r+0x206>
 8002f8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f8e:	f7ff fdd5 	bl	8002b3c <__retarget_lock_release_recursive>
 8002f92:	89bb      	ldrh	r3, [r7, #12]
 8002f94:	065b      	lsls	r3, r3, #25
 8002f96:	d500      	bpl.n	8002f9a <_vfiprintf_r+0x20e>
 8002f98:	e71d      	b.n	8002dd6 <_vfiprintf_r+0x4a>
 8002f9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f9c:	e71d      	b.n	8002dda <_vfiprintf_r+0x4e>
 8002f9e:	aa07      	add	r2, sp, #28
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	003a      	movs	r2, r7
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <_vfiprintf_r+0x234>)
 8002fa8:	9803      	ldr	r0, [sp, #12]
 8002faa:	f000 f87b 	bl	80030a4 <_printf_i>
 8002fae:	e7e3      	b.n	8002f78 <_vfiprintf_r+0x1ec>
 8002fb0:	08003774 	.word	0x08003774
 8002fb4:	0800377a 	.word	0x0800377a
 8002fb8:	0800377e 	.word	0x0800377e
 8002fbc:	00000000 	.word	0x00000000
 8002fc0:	08002d67 	.word	0x08002d67

08002fc4 <_printf_common>:
 8002fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fc6:	0016      	movs	r6, r2
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	688a      	ldr	r2, [r1, #8]
 8002fcc:	690b      	ldr	r3, [r1, #16]
 8002fce:	000c      	movs	r4, r1
 8002fd0:	9000      	str	r0, [sp, #0]
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	da00      	bge.n	8002fd8 <_printf_common+0x14>
 8002fd6:	0013      	movs	r3, r2
 8002fd8:	0022      	movs	r2, r4
 8002fda:	6033      	str	r3, [r6, #0]
 8002fdc:	3243      	adds	r2, #67	; 0x43
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d001      	beq.n	8002fe8 <_printf_common+0x24>
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	6033      	str	r3, [r6, #0]
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	d502      	bpl.n	8002ff4 <_printf_common+0x30>
 8002fee:	6833      	ldr	r3, [r6, #0]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	6033      	str	r3, [r6, #0]
 8002ff4:	6822      	ldr	r2, [r4, #0]
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	0015      	movs	r5, r2
 8002ffa:	401d      	ands	r5, r3
 8002ffc:	421a      	tst	r2, r3
 8002ffe:	d027      	beq.n	8003050 <_printf_common+0x8c>
 8003000:	0023      	movs	r3, r4
 8003002:	3343      	adds	r3, #67	; 0x43
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	4193      	sbcs	r3, r2
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	0692      	lsls	r2, r2, #26
 800300e:	d430      	bmi.n	8003072 <_printf_common+0xae>
 8003010:	0022      	movs	r2, r4
 8003012:	9901      	ldr	r1, [sp, #4]
 8003014:	9800      	ldr	r0, [sp, #0]
 8003016:	9d08      	ldr	r5, [sp, #32]
 8003018:	3243      	adds	r2, #67	; 0x43
 800301a:	47a8      	blx	r5
 800301c:	3001      	adds	r0, #1
 800301e:	d025      	beq.n	800306c <_printf_common+0xa8>
 8003020:	2206      	movs	r2, #6
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	2500      	movs	r5, #0
 8003026:	4013      	ands	r3, r2
 8003028:	2b04      	cmp	r3, #4
 800302a:	d105      	bne.n	8003038 <_printf_common+0x74>
 800302c:	6833      	ldr	r3, [r6, #0]
 800302e:	68e5      	ldr	r5, [r4, #12]
 8003030:	1aed      	subs	r5, r5, r3
 8003032:	43eb      	mvns	r3, r5
 8003034:	17db      	asrs	r3, r3, #31
 8003036:	401d      	ands	r5, r3
 8003038:	68a3      	ldr	r3, [r4, #8]
 800303a:	6922      	ldr	r2, [r4, #16]
 800303c:	4293      	cmp	r3, r2
 800303e:	dd01      	ble.n	8003044 <_printf_common+0x80>
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	18ed      	adds	r5, r5, r3
 8003044:	2600      	movs	r6, #0
 8003046:	42b5      	cmp	r5, r6
 8003048:	d120      	bne.n	800308c <_printf_common+0xc8>
 800304a:	2000      	movs	r0, #0
 800304c:	e010      	b.n	8003070 <_printf_common+0xac>
 800304e:	3501      	adds	r5, #1
 8003050:	68e3      	ldr	r3, [r4, #12]
 8003052:	6832      	ldr	r2, [r6, #0]
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	42ab      	cmp	r3, r5
 8003058:	ddd2      	ble.n	8003000 <_printf_common+0x3c>
 800305a:	0022      	movs	r2, r4
 800305c:	2301      	movs	r3, #1
 800305e:	9901      	ldr	r1, [sp, #4]
 8003060:	9800      	ldr	r0, [sp, #0]
 8003062:	9f08      	ldr	r7, [sp, #32]
 8003064:	3219      	adds	r2, #25
 8003066:	47b8      	blx	r7
 8003068:	3001      	adds	r0, #1
 800306a:	d1f0      	bne.n	800304e <_printf_common+0x8a>
 800306c:	2001      	movs	r0, #1
 800306e:	4240      	negs	r0, r0
 8003070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003072:	2030      	movs	r0, #48	; 0x30
 8003074:	18e1      	adds	r1, r4, r3
 8003076:	3143      	adds	r1, #67	; 0x43
 8003078:	7008      	strb	r0, [r1, #0]
 800307a:	0021      	movs	r1, r4
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	3145      	adds	r1, #69	; 0x45
 8003080:	7809      	ldrb	r1, [r1, #0]
 8003082:	18a2      	adds	r2, r4, r2
 8003084:	3243      	adds	r2, #67	; 0x43
 8003086:	3302      	adds	r3, #2
 8003088:	7011      	strb	r1, [r2, #0]
 800308a:	e7c1      	b.n	8003010 <_printf_common+0x4c>
 800308c:	0022      	movs	r2, r4
 800308e:	2301      	movs	r3, #1
 8003090:	9901      	ldr	r1, [sp, #4]
 8003092:	9800      	ldr	r0, [sp, #0]
 8003094:	9f08      	ldr	r7, [sp, #32]
 8003096:	321a      	adds	r2, #26
 8003098:	47b8      	blx	r7
 800309a:	3001      	adds	r0, #1
 800309c:	d0e6      	beq.n	800306c <_printf_common+0xa8>
 800309e:	3601      	adds	r6, #1
 80030a0:	e7d1      	b.n	8003046 <_printf_common+0x82>
	...

080030a4 <_printf_i>:
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	9206      	str	r2, [sp, #24]
 80030aa:	000a      	movs	r2, r1
 80030ac:	3243      	adds	r2, #67	; 0x43
 80030ae:	9307      	str	r3, [sp, #28]
 80030b0:	9005      	str	r0, [sp, #20]
 80030b2:	9204      	str	r2, [sp, #16]
 80030b4:	7e0a      	ldrb	r2, [r1, #24]
 80030b6:	000c      	movs	r4, r1
 80030b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030ba:	2a78      	cmp	r2, #120	; 0x78
 80030bc:	d809      	bhi.n	80030d2 <_printf_i+0x2e>
 80030be:	2a62      	cmp	r2, #98	; 0x62
 80030c0:	d80b      	bhi.n	80030da <_printf_i+0x36>
 80030c2:	2a00      	cmp	r2, #0
 80030c4:	d100      	bne.n	80030c8 <_printf_i+0x24>
 80030c6:	e0be      	b.n	8003246 <_printf_i+0x1a2>
 80030c8:	497c      	ldr	r1, [pc, #496]	; (80032bc <_printf_i+0x218>)
 80030ca:	9103      	str	r1, [sp, #12]
 80030cc:	2a58      	cmp	r2, #88	; 0x58
 80030ce:	d100      	bne.n	80030d2 <_printf_i+0x2e>
 80030d0:	e093      	b.n	80031fa <_printf_i+0x156>
 80030d2:	0026      	movs	r6, r4
 80030d4:	3642      	adds	r6, #66	; 0x42
 80030d6:	7032      	strb	r2, [r6, #0]
 80030d8:	e022      	b.n	8003120 <_printf_i+0x7c>
 80030da:	0010      	movs	r0, r2
 80030dc:	3863      	subs	r0, #99	; 0x63
 80030de:	2815      	cmp	r0, #21
 80030e0:	d8f7      	bhi.n	80030d2 <_printf_i+0x2e>
 80030e2:	f7fd f80d 	bl	8000100 <__gnu_thumb1_case_shi>
 80030e6:	0016      	.short	0x0016
 80030e8:	fff6001f 	.word	0xfff6001f
 80030ec:	fff6fff6 	.word	0xfff6fff6
 80030f0:	001ffff6 	.word	0x001ffff6
 80030f4:	fff6fff6 	.word	0xfff6fff6
 80030f8:	fff6fff6 	.word	0xfff6fff6
 80030fc:	003600a3 	.word	0x003600a3
 8003100:	fff60083 	.word	0xfff60083
 8003104:	00b4fff6 	.word	0x00b4fff6
 8003108:	0036fff6 	.word	0x0036fff6
 800310c:	fff6fff6 	.word	0xfff6fff6
 8003110:	0087      	.short	0x0087
 8003112:	0026      	movs	r6, r4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	3642      	adds	r6, #66	; 0x42
 8003118:	1d11      	adds	r1, r2, #4
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	7033      	strb	r3, [r6, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	e0a2      	b.n	800326a <_printf_i+0x1c6>
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	1d02      	adds	r2, r0, #4
 800312a:	060d      	lsls	r5, r1, #24
 800312c:	d50b      	bpl.n	8003146 <_printf_i+0xa2>
 800312e:	6805      	ldr	r5, [r0, #0]
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	2d00      	cmp	r5, #0
 8003134:	da03      	bge.n	800313e <_printf_i+0x9a>
 8003136:	232d      	movs	r3, #45	; 0x2d
 8003138:	9a04      	ldr	r2, [sp, #16]
 800313a:	426d      	negs	r5, r5
 800313c:	7013      	strb	r3, [r2, #0]
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <_printf_i+0x218>)
 8003140:	270a      	movs	r7, #10
 8003142:	9303      	str	r3, [sp, #12]
 8003144:	e01b      	b.n	800317e <_printf_i+0xda>
 8003146:	6805      	ldr	r5, [r0, #0]
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	0649      	lsls	r1, r1, #25
 800314c:	d5f1      	bpl.n	8003132 <_printf_i+0x8e>
 800314e:	b22d      	sxth	r5, r5
 8003150:	e7ef      	b.n	8003132 <_printf_i+0x8e>
 8003152:	680d      	ldr	r5, [r1, #0]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	1d08      	adds	r0, r1, #4
 8003158:	6018      	str	r0, [r3, #0]
 800315a:	062e      	lsls	r6, r5, #24
 800315c:	d501      	bpl.n	8003162 <_printf_i+0xbe>
 800315e:	680d      	ldr	r5, [r1, #0]
 8003160:	e003      	b.n	800316a <_printf_i+0xc6>
 8003162:	066d      	lsls	r5, r5, #25
 8003164:	d5fb      	bpl.n	800315e <_printf_i+0xba>
 8003166:	680d      	ldr	r5, [r1, #0]
 8003168:	b2ad      	uxth	r5, r5
 800316a:	4b54      	ldr	r3, [pc, #336]	; (80032bc <_printf_i+0x218>)
 800316c:	2708      	movs	r7, #8
 800316e:	9303      	str	r3, [sp, #12]
 8003170:	2a6f      	cmp	r2, #111	; 0x6f
 8003172:	d000      	beq.n	8003176 <_printf_i+0xd2>
 8003174:	3702      	adds	r7, #2
 8003176:	0023      	movs	r3, r4
 8003178:	2200      	movs	r2, #0
 800317a:	3343      	adds	r3, #67	; 0x43
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	6863      	ldr	r3, [r4, #4]
 8003180:	60a3      	str	r3, [r4, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db03      	blt.n	800318e <_printf_i+0xea>
 8003186:	2104      	movs	r1, #4
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	438a      	bics	r2, r1
 800318c:	6022      	str	r2, [r4, #0]
 800318e:	2d00      	cmp	r5, #0
 8003190:	d102      	bne.n	8003198 <_printf_i+0xf4>
 8003192:	9e04      	ldr	r6, [sp, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <_printf_i+0x10e>
 8003198:	9e04      	ldr	r6, [sp, #16]
 800319a:	0028      	movs	r0, r5
 800319c:	0039      	movs	r1, r7
 800319e:	f7fd f83f 	bl	8000220 <__aeabi_uidivmod>
 80031a2:	9b03      	ldr	r3, [sp, #12]
 80031a4:	3e01      	subs	r6, #1
 80031a6:	5c5b      	ldrb	r3, [r3, r1]
 80031a8:	7033      	strb	r3, [r6, #0]
 80031aa:	002b      	movs	r3, r5
 80031ac:	0005      	movs	r5, r0
 80031ae:	429f      	cmp	r7, r3
 80031b0:	d9f3      	bls.n	800319a <_printf_i+0xf6>
 80031b2:	2f08      	cmp	r7, #8
 80031b4:	d109      	bne.n	80031ca <_printf_i+0x126>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	07db      	lsls	r3, r3, #31
 80031ba:	d506      	bpl.n	80031ca <_printf_i+0x126>
 80031bc:	6862      	ldr	r2, [r4, #4]
 80031be:	6923      	ldr	r3, [r4, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dc02      	bgt.n	80031ca <_printf_i+0x126>
 80031c4:	2330      	movs	r3, #48	; 0x30
 80031c6:	3e01      	subs	r6, #1
 80031c8:	7033      	strb	r3, [r6, #0]
 80031ca:	9b04      	ldr	r3, [sp, #16]
 80031cc:	1b9b      	subs	r3, r3, r6
 80031ce:	6123      	str	r3, [r4, #16]
 80031d0:	9b07      	ldr	r3, [sp, #28]
 80031d2:	0021      	movs	r1, r4
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	9805      	ldr	r0, [sp, #20]
 80031d8:	9b06      	ldr	r3, [sp, #24]
 80031da:	aa09      	add	r2, sp, #36	; 0x24
 80031dc:	f7ff fef2 	bl	8002fc4 <_printf_common>
 80031e0:	3001      	adds	r0, #1
 80031e2:	d147      	bne.n	8003274 <_printf_i+0x1d0>
 80031e4:	2001      	movs	r0, #1
 80031e6:	4240      	negs	r0, r0
 80031e8:	b00b      	add	sp, #44	; 0x2c
 80031ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ec:	2220      	movs	r2, #32
 80031ee:	6809      	ldr	r1, [r1, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	6022      	str	r2, [r4, #0]
 80031f4:	2278      	movs	r2, #120	; 0x78
 80031f6:	4932      	ldr	r1, [pc, #200]	; (80032c0 <_printf_i+0x21c>)
 80031f8:	9103      	str	r1, [sp, #12]
 80031fa:	0021      	movs	r1, r4
 80031fc:	3145      	adds	r1, #69	; 0x45
 80031fe:	700a      	strb	r2, [r1, #0]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	c920      	ldmia	r1!, {r5}
 8003206:	0610      	lsls	r0, r2, #24
 8003208:	d402      	bmi.n	8003210 <_printf_i+0x16c>
 800320a:	0650      	lsls	r0, r2, #25
 800320c:	d500      	bpl.n	8003210 <_printf_i+0x16c>
 800320e:	b2ad      	uxth	r5, r5
 8003210:	6019      	str	r1, [r3, #0]
 8003212:	07d3      	lsls	r3, r2, #31
 8003214:	d502      	bpl.n	800321c <_printf_i+0x178>
 8003216:	2320      	movs	r3, #32
 8003218:	4313      	orrs	r3, r2
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	2710      	movs	r7, #16
 800321e:	2d00      	cmp	r5, #0
 8003220:	d1a9      	bne.n	8003176 <_printf_i+0xd2>
 8003222:	2220      	movs	r2, #32
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	4393      	bics	r3, r2
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	e7a4      	b.n	8003176 <_printf_i+0xd2>
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	680d      	ldr	r5, [r1, #0]
 8003230:	1d10      	adds	r0, r2, #4
 8003232:	6949      	ldr	r1, [r1, #20]
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	062e      	lsls	r6, r5, #24
 800323a:	d501      	bpl.n	8003240 <_printf_i+0x19c>
 800323c:	6019      	str	r1, [r3, #0]
 800323e:	e002      	b.n	8003246 <_printf_i+0x1a2>
 8003240:	066d      	lsls	r5, r5, #25
 8003242:	d5fb      	bpl.n	800323c <_printf_i+0x198>
 8003244:	8019      	strh	r1, [r3, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	9e04      	ldr	r6, [sp, #16]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	e7c0      	b.n	80031d0 <_printf_i+0x12c>
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	1d11      	adds	r1, r2, #4
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	6816      	ldr	r6, [r2, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	0030      	movs	r0, r6
 800325a:	6862      	ldr	r2, [r4, #4]
 800325c:	f000 f9a0 	bl	80035a0 <memchr>
 8003260:	2800      	cmp	r0, #0
 8003262:	d001      	beq.n	8003268 <_printf_i+0x1c4>
 8003264:	1b80      	subs	r0, r0, r6
 8003266:	6060      	str	r0, [r4, #4]
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	9a04      	ldr	r2, [sp, #16]
 8003270:	7013      	strb	r3, [r2, #0]
 8003272:	e7ad      	b.n	80031d0 <_printf_i+0x12c>
 8003274:	0032      	movs	r2, r6
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	9906      	ldr	r1, [sp, #24]
 800327a:	9805      	ldr	r0, [sp, #20]
 800327c:	9d07      	ldr	r5, [sp, #28]
 800327e:	47a8      	blx	r5
 8003280:	3001      	adds	r0, #1
 8003282:	d0af      	beq.n	80031e4 <_printf_i+0x140>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	079b      	lsls	r3, r3, #30
 8003288:	d415      	bmi.n	80032b6 <_printf_i+0x212>
 800328a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800328c:	68e0      	ldr	r0, [r4, #12]
 800328e:	4298      	cmp	r0, r3
 8003290:	daaa      	bge.n	80031e8 <_printf_i+0x144>
 8003292:	0018      	movs	r0, r3
 8003294:	e7a8      	b.n	80031e8 <_printf_i+0x144>
 8003296:	0022      	movs	r2, r4
 8003298:	2301      	movs	r3, #1
 800329a:	9906      	ldr	r1, [sp, #24]
 800329c:	9805      	ldr	r0, [sp, #20]
 800329e:	9e07      	ldr	r6, [sp, #28]
 80032a0:	3219      	adds	r2, #25
 80032a2:	47b0      	blx	r6
 80032a4:	3001      	adds	r0, #1
 80032a6:	d09d      	beq.n	80031e4 <_printf_i+0x140>
 80032a8:	3501      	adds	r5, #1
 80032aa:	68e3      	ldr	r3, [r4, #12]
 80032ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	dcf0      	bgt.n	8003296 <_printf_i+0x1f2>
 80032b4:	e7e9      	b.n	800328a <_printf_i+0x1e6>
 80032b6:	2500      	movs	r5, #0
 80032b8:	e7f7      	b.n	80032aa <_printf_i+0x206>
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	08003785 	.word	0x08003785
 80032c0:	08003796 	.word	0x08003796

080032c4 <__sflush_r>:
 80032c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032c6:	898b      	ldrh	r3, [r1, #12]
 80032c8:	0005      	movs	r5, r0
 80032ca:	000c      	movs	r4, r1
 80032cc:	071a      	lsls	r2, r3, #28
 80032ce:	d45c      	bmi.n	800338a <__sflush_r+0xc6>
 80032d0:	684a      	ldr	r2, [r1, #4]
 80032d2:	2a00      	cmp	r2, #0
 80032d4:	dc04      	bgt.n	80032e0 <__sflush_r+0x1c>
 80032d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80032d8:	2a00      	cmp	r2, #0
 80032da:	dc01      	bgt.n	80032e0 <__sflush_r+0x1c>
 80032dc:	2000      	movs	r0, #0
 80032de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80032e2:	2f00      	cmp	r7, #0
 80032e4:	d0fa      	beq.n	80032dc <__sflush_r+0x18>
 80032e6:	2200      	movs	r2, #0
 80032e8:	2080      	movs	r0, #128	; 0x80
 80032ea:	682e      	ldr	r6, [r5, #0]
 80032ec:	602a      	str	r2, [r5, #0]
 80032ee:	001a      	movs	r2, r3
 80032f0:	0140      	lsls	r0, r0, #5
 80032f2:	6a21      	ldr	r1, [r4, #32]
 80032f4:	4002      	ands	r2, r0
 80032f6:	4203      	tst	r3, r0
 80032f8:	d034      	beq.n	8003364 <__sflush_r+0xa0>
 80032fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	075b      	lsls	r3, r3, #29
 8003300:	d506      	bpl.n	8003310 <__sflush_r+0x4c>
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	1ac0      	subs	r0, r0, r3
 8003306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <__sflush_r+0x4c>
 800330c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800330e:	1ac0      	subs	r0, r0, r3
 8003310:	0002      	movs	r2, r0
 8003312:	2300      	movs	r3, #0
 8003314:	0028      	movs	r0, r5
 8003316:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003318:	6a21      	ldr	r1, [r4, #32]
 800331a:	47b8      	blx	r7
 800331c:	89a2      	ldrh	r2, [r4, #12]
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	d106      	bne.n	8003330 <__sflush_r+0x6c>
 8003322:	6829      	ldr	r1, [r5, #0]
 8003324:	291d      	cmp	r1, #29
 8003326:	d82c      	bhi.n	8003382 <__sflush_r+0xbe>
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <__sflush_r+0x110>)
 800332a:	410b      	asrs	r3, r1
 800332c:	07db      	lsls	r3, r3, #31
 800332e:	d428      	bmi.n	8003382 <__sflush_r+0xbe>
 8003330:	2300      	movs	r3, #0
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	04d2      	lsls	r2, r2, #19
 800333a:	d505      	bpl.n	8003348 <__sflush_r+0x84>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <__sflush_r+0x82>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d100      	bne.n	8003348 <__sflush_r+0x84>
 8003346:	6560      	str	r0, [r4, #84]	; 0x54
 8003348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334a:	602e      	str	r6, [r5, #0]
 800334c:	2900      	cmp	r1, #0
 800334e:	d0c5      	beq.n	80032dc <__sflush_r+0x18>
 8003350:	0023      	movs	r3, r4
 8003352:	3344      	adds	r3, #68	; 0x44
 8003354:	4299      	cmp	r1, r3
 8003356:	d002      	beq.n	800335e <__sflush_r+0x9a>
 8003358:	0028      	movs	r0, r5
 800335a:	f7ff fbf1 	bl	8002b40 <_free_r>
 800335e:	2000      	movs	r0, #0
 8003360:	6360      	str	r0, [r4, #52]	; 0x34
 8003362:	e7bc      	b.n	80032de <__sflush_r+0x1a>
 8003364:	2301      	movs	r3, #1
 8003366:	0028      	movs	r0, r5
 8003368:	47b8      	blx	r7
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d1c6      	bne.n	80032fc <__sflush_r+0x38>
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0c3      	beq.n	80032fc <__sflush_r+0x38>
 8003374:	2b1d      	cmp	r3, #29
 8003376:	d001      	beq.n	800337c <__sflush_r+0xb8>
 8003378:	2b16      	cmp	r3, #22
 800337a:	d101      	bne.n	8003380 <__sflush_r+0xbc>
 800337c:	602e      	str	r6, [r5, #0]
 800337e:	e7ad      	b.n	80032dc <__sflush_r+0x18>
 8003380:	89a2      	ldrh	r2, [r4, #12]
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	4313      	orrs	r3, r2
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	e7a9      	b.n	80032de <__sflush_r+0x1a>
 800338a:	690e      	ldr	r6, [r1, #16]
 800338c:	2e00      	cmp	r6, #0
 800338e:	d0a5      	beq.n	80032dc <__sflush_r+0x18>
 8003390:	680f      	ldr	r7, [r1, #0]
 8003392:	600e      	str	r6, [r1, #0]
 8003394:	1bba      	subs	r2, r7, r6
 8003396:	9201      	str	r2, [sp, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	079b      	lsls	r3, r3, #30
 800339c:	d100      	bne.n	80033a0 <__sflush_r+0xdc>
 800339e:	694a      	ldr	r2, [r1, #20]
 80033a0:	60a2      	str	r2, [r4, #8]
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dd99      	ble.n	80032dc <__sflush_r+0x18>
 80033a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033aa:	0032      	movs	r2, r6
 80033ac:	001f      	movs	r7, r3
 80033ae:	0028      	movs	r0, r5
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	6a21      	ldr	r1, [r4, #32]
 80033b4:	47b8      	blx	r7
 80033b6:	2800      	cmp	r0, #0
 80033b8:	dc06      	bgt.n	80033c8 <__sflush_r+0x104>
 80033ba:	2340      	movs	r3, #64	; 0x40
 80033bc:	2001      	movs	r0, #1
 80033be:	89a2      	ldrh	r2, [r4, #12]
 80033c0:	4240      	negs	r0, r0
 80033c2:	4313      	orrs	r3, r2
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	e78a      	b.n	80032de <__sflush_r+0x1a>
 80033c8:	9b01      	ldr	r3, [sp, #4]
 80033ca:	1836      	adds	r6, r6, r0
 80033cc:	1a1b      	subs	r3, r3, r0
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	e7e7      	b.n	80033a2 <__sflush_r+0xde>
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	dfbffffe 	.word	0xdfbffffe

080033d8 <_fflush_r>:
 80033d8:	690b      	ldr	r3, [r1, #16]
 80033da:	b570      	push	{r4, r5, r6, lr}
 80033dc:	0005      	movs	r5, r0
 80033de:	000c      	movs	r4, r1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <_fflush_r+0x12>
 80033e4:	2500      	movs	r5, #0
 80033e6:	0028      	movs	r0, r5
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d004      	beq.n	80033f8 <_fflush_r+0x20>
 80033ee:	6a03      	ldr	r3, [r0, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <_fflush_r+0x20>
 80033f4:	f7ff fa90 	bl	8002918 <__sinit>
 80033f8:	220c      	movs	r2, #12
 80033fa:	5ea3      	ldrsh	r3, [r4, r2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f1      	beq.n	80033e4 <_fflush_r+0xc>
 8003400:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003402:	07d2      	lsls	r2, r2, #31
 8003404:	d404      	bmi.n	8003410 <_fflush_r+0x38>
 8003406:	059b      	lsls	r3, r3, #22
 8003408:	d402      	bmi.n	8003410 <_fflush_r+0x38>
 800340a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340c:	f7ff fb95 	bl	8002b3a <__retarget_lock_acquire_recursive>
 8003410:	0028      	movs	r0, r5
 8003412:	0021      	movs	r1, r4
 8003414:	f7ff ff56 	bl	80032c4 <__sflush_r>
 8003418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800341a:	0005      	movs	r5, r0
 800341c:	07db      	lsls	r3, r3, #31
 800341e:	d4e2      	bmi.n	80033e6 <_fflush_r+0xe>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	059b      	lsls	r3, r3, #22
 8003424:	d4df      	bmi.n	80033e6 <_fflush_r+0xe>
 8003426:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003428:	f7ff fb88 	bl	8002b3c <__retarget_lock_release_recursive>
 800342c:	e7db      	b.n	80033e6 <_fflush_r+0xe>

0800342e <__swbuf_r>:
 800342e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003430:	0006      	movs	r6, r0
 8003432:	000d      	movs	r5, r1
 8003434:	0014      	movs	r4, r2
 8003436:	2800      	cmp	r0, #0
 8003438:	d004      	beq.n	8003444 <__swbuf_r+0x16>
 800343a:	6a03      	ldr	r3, [r0, #32]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <__swbuf_r+0x16>
 8003440:	f7ff fa6a 	bl	8002918 <__sinit>
 8003444:	69a3      	ldr	r3, [r4, #24]
 8003446:	60a3      	str	r3, [r4, #8]
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	071b      	lsls	r3, r3, #28
 800344c:	d528      	bpl.n	80034a0 <__swbuf_r+0x72>
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d025      	beq.n	80034a0 <__swbuf_r+0x72>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	6820      	ldr	r0, [r4, #0]
 8003458:	b2ef      	uxtb	r7, r5
 800345a:	1ac0      	subs	r0, r0, r3
 800345c:	6963      	ldr	r3, [r4, #20]
 800345e:	b2ed      	uxtb	r5, r5
 8003460:	4283      	cmp	r3, r0
 8003462:	dc05      	bgt.n	8003470 <__swbuf_r+0x42>
 8003464:	0021      	movs	r1, r4
 8003466:	0030      	movs	r0, r6
 8003468:	f7ff ffb6 	bl	80033d8 <_fflush_r>
 800346c:	2800      	cmp	r0, #0
 800346e:	d11d      	bne.n	80034ac <__swbuf_r+0x7e>
 8003470:	68a3      	ldr	r3, [r4, #8]
 8003472:	3001      	adds	r0, #1
 8003474:	3b01      	subs	r3, #1
 8003476:	60a3      	str	r3, [r4, #8]
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	6022      	str	r2, [r4, #0]
 800347e:	701f      	strb	r7, [r3, #0]
 8003480:	6963      	ldr	r3, [r4, #20]
 8003482:	4283      	cmp	r3, r0
 8003484:	d004      	beq.n	8003490 <__swbuf_r+0x62>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	07db      	lsls	r3, r3, #31
 800348a:	d507      	bpl.n	800349c <__swbuf_r+0x6e>
 800348c:	2d0a      	cmp	r5, #10
 800348e:	d105      	bne.n	800349c <__swbuf_r+0x6e>
 8003490:	0021      	movs	r1, r4
 8003492:	0030      	movs	r0, r6
 8003494:	f7ff ffa0 	bl	80033d8 <_fflush_r>
 8003498:	2800      	cmp	r0, #0
 800349a:	d107      	bne.n	80034ac <__swbuf_r+0x7e>
 800349c:	0028      	movs	r0, r5
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a0:	0021      	movs	r1, r4
 80034a2:	0030      	movs	r0, r6
 80034a4:	f000 f806 	bl	80034b4 <__swsetup_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d0d3      	beq.n	8003454 <__swbuf_r+0x26>
 80034ac:	2501      	movs	r5, #1
 80034ae:	426d      	negs	r5, r5
 80034b0:	e7f4      	b.n	800349c <__swbuf_r+0x6e>
	...

080034b4 <__swsetup_r>:
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <__swsetup_r+0xc4>)
 80034b6:	b570      	push	{r4, r5, r6, lr}
 80034b8:	0005      	movs	r5, r0
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	000c      	movs	r4, r1
 80034be:	2800      	cmp	r0, #0
 80034c0:	d004      	beq.n	80034cc <__swsetup_r+0x18>
 80034c2:	6a03      	ldr	r3, [r0, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <__swsetup_r+0x18>
 80034c8:	f7ff fa26 	bl	8002918 <__sinit>
 80034cc:	230c      	movs	r3, #12
 80034ce:	5ee2      	ldrsh	r2, [r4, r3]
 80034d0:	b293      	uxth	r3, r2
 80034d2:	0711      	lsls	r1, r2, #28
 80034d4:	d423      	bmi.n	800351e <__swsetup_r+0x6a>
 80034d6:	06d9      	lsls	r1, r3, #27
 80034d8:	d407      	bmi.n	80034ea <__swsetup_r+0x36>
 80034da:	2309      	movs	r3, #9
 80034dc:	2001      	movs	r0, #1
 80034de:	602b      	str	r3, [r5, #0]
 80034e0:	3337      	adds	r3, #55	; 0x37
 80034e2:	4313      	orrs	r3, r2
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	4240      	negs	r0, r0
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	075b      	lsls	r3, r3, #29
 80034ec:	d513      	bpl.n	8003516 <__swsetup_r+0x62>
 80034ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034f0:	2900      	cmp	r1, #0
 80034f2:	d008      	beq.n	8003506 <__swsetup_r+0x52>
 80034f4:	0023      	movs	r3, r4
 80034f6:	3344      	adds	r3, #68	; 0x44
 80034f8:	4299      	cmp	r1, r3
 80034fa:	d002      	beq.n	8003502 <__swsetup_r+0x4e>
 80034fc:	0028      	movs	r0, r5
 80034fe:	f7ff fb1f 	bl	8002b40 <_free_r>
 8003502:	2300      	movs	r3, #0
 8003504:	6363      	str	r3, [r4, #52]	; 0x34
 8003506:	2224      	movs	r2, #36	; 0x24
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	4393      	bics	r3, r2
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	2300      	movs	r3, #0
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	2308      	movs	r3, #8
 8003518:	89a2      	ldrh	r2, [r4, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <__swsetup_r+0x88>
 8003524:	21a0      	movs	r1, #160	; 0xa0
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	0089      	lsls	r1, r1, #2
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	400b      	ands	r3, r1
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <__swsetup_r+0x88>
 8003534:	0021      	movs	r1, r4
 8003536:	0028      	movs	r0, r5
 8003538:	f000 f866 	bl	8003608 <__smakebuf_r>
 800353c:	220c      	movs	r2, #12
 800353e:	5ea3      	ldrsh	r3, [r4, r2]
 8003540:	2001      	movs	r0, #1
 8003542:	001a      	movs	r2, r3
 8003544:	b299      	uxth	r1, r3
 8003546:	4002      	ands	r2, r0
 8003548:	4203      	tst	r3, r0
 800354a:	d00f      	beq.n	800356c <__swsetup_r+0xb8>
 800354c:	2200      	movs	r2, #0
 800354e:	60a2      	str	r2, [r4, #8]
 8003550:	6962      	ldr	r2, [r4, #20]
 8003552:	4252      	negs	r2, r2
 8003554:	61a2      	str	r2, [r4, #24]
 8003556:	2000      	movs	r0, #0
 8003558:	6922      	ldr	r2, [r4, #16]
 800355a:	4282      	cmp	r2, r0
 800355c:	d1c4      	bne.n	80034e8 <__swsetup_r+0x34>
 800355e:	0609      	lsls	r1, r1, #24
 8003560:	d5c2      	bpl.n	80034e8 <__swsetup_r+0x34>
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	4313      	orrs	r3, r2
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	3801      	subs	r0, #1
 800356a:	e7bd      	b.n	80034e8 <__swsetup_r+0x34>
 800356c:	0788      	lsls	r0, r1, #30
 800356e:	d400      	bmi.n	8003572 <__swsetup_r+0xbe>
 8003570:	6962      	ldr	r2, [r4, #20]
 8003572:	60a2      	str	r2, [r4, #8]
 8003574:	e7ef      	b.n	8003556 <__swsetup_r+0xa2>
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	20000064 	.word	0x20000064

0800357c <_sbrk_r>:
 800357c:	2300      	movs	r3, #0
 800357e:	b570      	push	{r4, r5, r6, lr}
 8003580:	4d06      	ldr	r5, [pc, #24]	; (800359c <_sbrk_r+0x20>)
 8003582:	0004      	movs	r4, r0
 8003584:	0008      	movs	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd f974 	bl	8000874 <_sbrk>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d103      	bne.n	8003598 <_sbrk_r+0x1c>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d000      	beq.n	8003598 <_sbrk_r+0x1c>
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	bd70      	pop	{r4, r5, r6, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	20000260 	.word	0x20000260

080035a0 <memchr>:
 80035a0:	b2c9      	uxtb	r1, r1
 80035a2:	1882      	adds	r2, r0, r2
 80035a4:	4290      	cmp	r0, r2
 80035a6:	d101      	bne.n	80035ac <memchr+0xc>
 80035a8:	2000      	movs	r0, #0
 80035aa:	4770      	bx	lr
 80035ac:	7803      	ldrb	r3, [r0, #0]
 80035ae:	428b      	cmp	r3, r1
 80035b0:	d0fb      	beq.n	80035aa <memchr+0xa>
 80035b2:	3001      	adds	r0, #1
 80035b4:	e7f6      	b.n	80035a4 <memchr+0x4>
	...

080035b8 <__swhatbuf_r>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	000e      	movs	r6, r1
 80035bc:	001d      	movs	r5, r3
 80035be:	230e      	movs	r3, #14
 80035c0:	5ec9      	ldrsh	r1, [r1, r3]
 80035c2:	0014      	movs	r4, r2
 80035c4:	b096      	sub	sp, #88	; 0x58
 80035c6:	2900      	cmp	r1, #0
 80035c8:	da0c      	bge.n	80035e4 <__swhatbuf_r+0x2c>
 80035ca:	89b2      	ldrh	r2, [r6, #12]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	0011      	movs	r1, r2
 80035d0:	4019      	ands	r1, r3
 80035d2:	421a      	tst	r2, r3
 80035d4:	d013      	beq.n	80035fe <__swhatbuf_r+0x46>
 80035d6:	2100      	movs	r1, #0
 80035d8:	3b40      	subs	r3, #64	; 0x40
 80035da:	2000      	movs	r0, #0
 80035dc:	6029      	str	r1, [r5, #0]
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	b016      	add	sp, #88	; 0x58
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	466a      	mov	r2, sp
 80035e6:	f000 f84d 	bl	8003684 <_fstat_r>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	dbed      	blt.n	80035ca <__swhatbuf_r+0x12>
 80035ee:	23f0      	movs	r3, #240	; 0xf0
 80035f0:	9901      	ldr	r1, [sp, #4]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4019      	ands	r1, r3
 80035f6:	4b03      	ldr	r3, [pc, #12]	; (8003604 <__swhatbuf_r+0x4c>)
 80035f8:	18c9      	adds	r1, r1, r3
 80035fa:	424b      	negs	r3, r1
 80035fc:	4159      	adcs	r1, r3
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	e7ea      	b.n	80035da <__swhatbuf_r+0x22>
 8003604:	ffffe000 	.word	0xffffe000

08003608 <__smakebuf_r>:
 8003608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800360a:	2602      	movs	r6, #2
 800360c:	898b      	ldrh	r3, [r1, #12]
 800360e:	0005      	movs	r5, r0
 8003610:	000c      	movs	r4, r1
 8003612:	4233      	tst	r3, r6
 8003614:	d006      	beq.n	8003624 <__smakebuf_r+0x1c>
 8003616:	0023      	movs	r3, r4
 8003618:	3347      	adds	r3, #71	; 0x47
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	6123      	str	r3, [r4, #16]
 800361e:	2301      	movs	r3, #1
 8003620:	6163      	str	r3, [r4, #20]
 8003622:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003624:	466a      	mov	r2, sp
 8003626:	ab01      	add	r3, sp, #4
 8003628:	f7ff ffc6 	bl	80035b8 <__swhatbuf_r>
 800362c:	9900      	ldr	r1, [sp, #0]
 800362e:	0007      	movs	r7, r0
 8003630:	0028      	movs	r0, r5
 8003632:	f7ff faf1 	bl	8002c18 <_malloc_r>
 8003636:	2800      	cmp	r0, #0
 8003638:	d108      	bne.n	800364c <__smakebuf_r+0x44>
 800363a:	220c      	movs	r2, #12
 800363c:	5ea3      	ldrsh	r3, [r4, r2]
 800363e:	059a      	lsls	r2, r3, #22
 8003640:	d4ef      	bmi.n	8003622 <__smakebuf_r+0x1a>
 8003642:	2203      	movs	r2, #3
 8003644:	4393      	bics	r3, r2
 8003646:	431e      	orrs	r6, r3
 8003648:	81a6      	strh	r6, [r4, #12]
 800364a:	e7e4      	b.n	8003616 <__smakebuf_r+0xe>
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	89a2      	ldrh	r2, [r4, #12]
 8003650:	6020      	str	r0, [r4, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	9b00      	ldr	r3, [sp, #0]
 8003658:	6120      	str	r0, [r4, #16]
 800365a:	6163      	str	r3, [r4, #20]
 800365c:	9b01      	ldr	r3, [sp, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <__smakebuf_r+0x74>
 8003662:	0028      	movs	r0, r5
 8003664:	230e      	movs	r3, #14
 8003666:	5ee1      	ldrsh	r1, [r4, r3]
 8003668:	f000 f81e 	bl	80036a8 <_isatty_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	d005      	beq.n	800367c <__smakebuf_r+0x74>
 8003670:	2303      	movs	r3, #3
 8003672:	89a2      	ldrh	r2, [r4, #12]
 8003674:	439a      	bics	r2, r3
 8003676:	3b02      	subs	r3, #2
 8003678:	4313      	orrs	r3, r2
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	433b      	orrs	r3, r7
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7ce      	b.n	8003622 <__smakebuf_r+0x1a>

08003684 <_fstat_r>:
 8003684:	2300      	movs	r3, #0
 8003686:	b570      	push	{r4, r5, r6, lr}
 8003688:	4d06      	ldr	r5, [pc, #24]	; (80036a4 <_fstat_r+0x20>)
 800368a:	0004      	movs	r4, r0
 800368c:	0008      	movs	r0, r1
 800368e:	0011      	movs	r1, r2
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	f7fd f8cd 	bl	8000830 <_fstat>
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	d103      	bne.n	80036a2 <_fstat_r+0x1e>
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d000      	beq.n	80036a2 <_fstat_r+0x1e>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	20000260 	.word	0x20000260

080036a8 <_isatty_r>:
 80036a8:	2300      	movs	r3, #0
 80036aa:	b570      	push	{r4, r5, r6, lr}
 80036ac:	4d06      	ldr	r5, [pc, #24]	; (80036c8 <_isatty_r+0x20>)
 80036ae:	0004      	movs	r4, r0
 80036b0:	0008      	movs	r0, r1
 80036b2:	602b      	str	r3, [r5, #0]
 80036b4:	f7fd f8ca 	bl	800084c <_isatty>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d103      	bne.n	80036c4 <_isatty_r+0x1c>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d000      	beq.n	80036c4 <_isatty_r+0x1c>
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	20000260 	.word	0x20000260

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
