
nucleo-g070rb-ir-sensor-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004278  08004278  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004278  08004278  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004278  08004278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  0800428c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800428c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223b  00000000  00000000  00030f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000331a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0a  00000000  00000000  000340f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167c9  00000000  00000000  00034cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123b0  00000000  00000000  0004b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094a51  00000000  00000000  0005d873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037e8  00000000  00000000  000f22c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000f5aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004184 	.word	0x08004184

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004184 	.word	0x08004184

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fbc3 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f837 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f000 f9b3 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fe:	f000 f963 	bl	80006c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000402:	f000 f879 	bl	80004f8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000406:	f000 f8df 	bl	80005c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //PA7 TIM2 CH2
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <main+0x74>)
 800040c:	2104      	movs	r1, #4
 800040e:	0018      	movs	r0, r3
 8000410:	f002 fa1a 	bl	8002848 <HAL_TIM_PWM_Start>
	int speed;
	HAL_GPIO_WritePin(MOTOR_DRIVER_IN_3_GPIO_Port, MOTOR_DRIVER_IN_3_Pin, 0);
 8000414:	23a0      	movs	r3, #160	; 0xa0
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2200      	movs	r2, #0
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fb03 	bl	8001a28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_DRIVER_IN_4_GPIO_Port, MOTOR_DRIVER_IN_4_Pin, 0);
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <main+0x78>)
 8000424:	2200      	movs	r2, #0
 8000426:	2101      	movs	r1, #1
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fafd 	bl	8001a28 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
//	} else {
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//	}

	  HAL_GPIO_WritePin(MOTOR_DRIVER_IN_3_GPIO_Port, MOTOR_DRIVER_IN_3_Pin, 1);
 800042e:	23a0      	movs	r3, #160	; 0xa0
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2201      	movs	r2, #1
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f001 faf6 	bl	8001a28 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(MOTOR_DRIVER_IN_4_GPIO_Port, MOTOR_DRIVER_IN_4_Pin, 0);
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <main+0x78>)
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f001 faf0 	bl	8001a28 <HAL_GPIO_WritePin>
	  speed = 1000;
 8000448:	23fa      	movs	r3, #250	; 0xfa
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	607b      	str	r3, [r7, #4]

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, speed);
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <main+0x74>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(50);
 8000456:	2032      	movs	r0, #50	; 0x32
 8000458:	f000 fc16 	bl	8000c88 <HAL_Delay>
	  HAL_GPIO_WritePin(MOTOR_DRIVER_IN_3_GPIO_Port, MOTOR_DRIVER_IN_3_Pin, 1);
 800045c:	e7e7      	b.n	800042e <main+0x42>
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	2000008c 	.word	0x2000008c
 8000464:	50000400 	.word	0x50000400

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b093      	sub	sp, #76	; 0x4c
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	2414      	movs	r4, #20
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2334      	movs	r3, #52	; 0x34
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 fe57 	bl	800412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	2310      	movs	r3, #16
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f003 fe50 	bl	800412c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fae7 	bl	8001a64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2202      	movs	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0052      	lsls	r2, r2, #1
 80004a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2240      	movs	r2, #64	; 0x40
 80004ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fb1f 	bl	8001afc <HAL_RCC_OscConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004c2:	f000 f9e9 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fe1a 	bl	800211c <HAL_RCC_ClockConfig>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004ec:	f000 f9d4 	bl	8000898 <Error_Handler>
  }
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b013      	add	sp, #76	; 0x4c
 80004f6:	bd90      	pop	{r4, r7, pc}

080004f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	230c      	movs	r3, #12
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f003 fe10 	bl	800412c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <MX_ADC1_Init+0xc4>)
 800050e:	4a2c      	ldr	r2, [pc, #176]	; (80005c0 <MX_ADC1_Init+0xc8>)
 8000510:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	05d2      	lsls	r2, r2, #23
 8000518:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800051a:	4b28      	ldr	r3, [pc, #160]	; (80005bc <MX_ADC1_Init+0xc4>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b25      	ldr	r3, [pc, #148]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_ADC1_Init+0xc4>)
 800052e:	2204      	movs	r2, #4
 8000530:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000534:	2200      	movs	r2, #0
 8000536:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <MX_ADC1_Init+0xc4>)
 800053a:	2200      	movs	r2, #0
 800053c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000540:	2201      	movs	r2, #1
 8000542:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000546:	2201      	movs	r2, #1
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <MX_ADC1_Init+0xc4>)
 800054c:	2200      	movs	r2, #0
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000558:	222c      	movs	r2, #44	; 0x2c
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000560:	2200      	movs	r2, #0
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_ADC1_Init+0xc4>)
 800056c:	2200      	movs	r2, #0
 800056e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000572:	223c      	movs	r2, #60	; 0x3c
 8000574:	2100      	movs	r1, #0
 8000576:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_ADC1_Init+0xc4>)
 800057a:	2200      	movs	r2, #0
 800057c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_ADC1_Init+0xc4>)
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fcb9 	bl	8000ef8 <HAL_ADC_Init>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800058a:	f000 f985 	bl	8000898 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <MX_ADC1_Init+0xcc>)
 8000592:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_ADC1_Init+0xc4>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe4e 	bl	8001248 <HAL_ADC_ConfigChannel>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80005b0:	f000 f972 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b004      	add	sp, #16
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40012400 	.word	0x40012400
 80005c4:	24000200 	.word	0x24000200

080005c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08e      	sub	sp, #56	; 0x38
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ce:	2328      	movs	r3, #40	; 0x28
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	0018      	movs	r0, r3
 80005d4:	2310      	movs	r3, #16
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f003 fda7 	bl	800412c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005de:	231c      	movs	r3, #28
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	0018      	movs	r0, r3
 80005e4:	230c      	movs	r3, #12
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f003 fd9f 	bl	800412c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	231c      	movs	r3, #28
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 fd98 	bl	800412c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_TIM3_Init+0xf4>)
 80005fe:	4a30      	ldr	r2, [pc, #192]	; (80006c0 <MX_TIM3_Init+0xf8>)
 8000600:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000604:	227f      	movs	r2, #127	; 0x7f
 8000606:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_TIM3_Init+0xf4>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625;
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000610:	4a2c      	ldr	r2, [pc, #176]	; (80006c4 <MX_TIM3_Init+0xfc>)
 8000612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_TIM3_Init+0xf4>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f858 	bl	80026d8 <HAL_TIM_Base_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800062c:	f000 f934 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000630:	2128      	movs	r1, #40	; 0x28
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0152      	lsls	r2, r2, #5
 8000638:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800063a:	187a      	adds	r2, r7, r1
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_TIM3_Init+0xf4>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fae5 	bl	8002c10 <HAL_TIM_ConfigClockSource>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800064a:	f000 f925 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000650:	0018      	movs	r0, r3
 8000652:	f002 f899 	bl	8002788 <HAL_TIM_PWM_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800065a:	f000 f91d 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	211c      	movs	r1, #28
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800066c:	187a      	adds	r2, r7, r1
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_TIM3_Init+0xf4>)
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f002 ffaa 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800067c:	f000 f90c 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000680:	003b      	movs	r3, r7
 8000682:	2260      	movs	r2, #96	; 0x60
 8000684:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000698:	0039      	movs	r1, r7
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_TIM3_Init+0xf4>)
 800069c:	2204      	movs	r2, #4
 800069e:	0018      	movs	r0, r3
 80006a0:	f002 f9b6 	bl	8002a10 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006a8:	f000 f8f6 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <MX_TIM3_Init+0xf4>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f982 	bl	80009b8 <HAL_TIM_MspPostInit>

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b00e      	add	sp, #56	; 0x38
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	40000400 	.word	0x40000400
 80006c4:	00000271 	.word	0x00000271

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <MX_USART2_UART_Init+0x98>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006d4:	22e1      	movs	r2, #225	; 0xe1
 80006d6:	0252      	lsls	r2, r2, #9
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0552      	lsls	r2, r2, #21
 80006e0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006f0:	220c      	movs	r2, #12
 80006f2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_USART2_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART2_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 ffc1 	bl	800369c <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800071e:	f000 f8bb 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fc20 	bl	8003f6c <HAL_UARTEx_SetTxFifoThreshold>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000730:	f000 f8b2 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f003 fc57 	bl	8003fec <HAL_UARTEx_SetRxFifoThreshold>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000742:	f000 f8a9 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x94>)
 8000748:	0018      	movs	r0, r3
 800074a:	f003 fbd5 	bl	8003ef8 <HAL_UARTEx_DisableFifoMode>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000752:	f000 f8a1 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000d8 	.word	0x200000d8
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	2414      	movs	r4, #20
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2314      	movs	r3, #20
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f003 fcd9 	bl	800412c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x128>)
 800077c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077e:	4b43      	ldr	r3, [pc, #268]	; (800088c <MX_GPIO_Init+0x128>)
 8000780:	2104      	movs	r1, #4
 8000782:	430a      	orrs	r2, r1
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x128>)
 8000788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078a:	2204      	movs	r2, #4
 800078c:	4013      	ands	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x128>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_GPIO_Init+0x128>)
 8000798:	2120      	movs	r1, #32
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_GPIO_Init+0x128>)
 80007a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a2:	2220      	movs	r2, #32
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_GPIO_Init+0x128>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0x128>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_GPIO_Init+0x128>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_GPIO_Init+0x128>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_GPIO_Init+0x128>)
 80007c8:	2102      	movs	r1, #2
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0x128>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2202      	movs	r2, #2
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|MOTOR_DRIVER_IN_3_Pin, GPIO_PIN_RESET);
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	2160      	movs	r1, #96	; 0x60
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f920 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DRIVER_IN_4_GPIO_Port, MOTOR_DRIVER_IN_4_Pin, GPIO_PIN_RESET);
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_GPIO_Init+0x12c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	2101      	movs	r1, #1
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 f91a 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2220      	movs	r2, #32
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2202      	movs	r2, #2
 800080a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800080c:	193a      	adds	r2, r7, r4
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 ffa3 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DRIVER_IN_3_Pin */
  GPIO_InitStruct.Pin = MOTOR_DRIVER_IN_3_Pin;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2240      	movs	r2, #64	; 0x40
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_DRIVER_IN_3_GPIO_Port, &GPIO_InitStruct);
 8000832:	193a      	adds	r2, r7, r4
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	0011      	movs	r1, r2
 800083a:	0018      	movs	r0, r3
 800083c:	f000 ff90 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2220      	movs	r2, #32
 8000844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000852:	193b      	adds	r3, r7, r4
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_GPIO_Init+0x130>)
 8000856:	0019      	movs	r1, r3
 8000858:	0010      	movs	r0, r2
 800085a:	f000 ff81 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DRIVER_IN_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_DRIVER_IN_4_Pin;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2201      	movs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_DRIVER_IN_4_GPIO_Port, &GPIO_InitStruct);
 8000878:	187b      	adds	r3, r7, r1
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <MX_GPIO_Init+0x12c>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 ff6e 	bl	8001760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b00b      	add	sp, #44	; 0x2c
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	50000400 	.word	0x50000400
 8000894:	50000800 	.word	0x50000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_MspInit+0x4c>)
 80008ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_MspInit+0x4c>)
 80008c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x4c>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0549      	lsls	r1, r1, #21
 80008cc:	430a      	orrs	r2, r1
 80008ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_MspInit+0x4c>)
 80008d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	055b      	lsls	r3, r3, #21
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f9f4 	bl	8000cd0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	2414      	movs	r4, #20
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	2314      	movs	r3, #20
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 fc10 	bl	800412c <memset>
  if(hadc->Instance==ADC1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_ADC_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d128      	bne.n	8000968 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0x80>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0x80>)
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0349      	lsls	r1, r1, #13
 8000920:	430a      	orrs	r2, r1
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0x80>)
 8000926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	035b      	lsls	r3, r3, #13
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_ADC_MspInit+0x80>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0x80>)
 8000938:	2102      	movs	r1, #2
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0x80>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000942:	2202      	movs	r2, #2
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2202      	movs	r2, #2
 800094e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2203      	movs	r2, #3
 8000954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	193b      	adds	r3, r7, r4
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_ADC_MspInit+0x84>)
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f000 fefc 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b00b      	add	sp, #44	; 0x2c
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	50000400 	.word	0x50000400

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10b      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_Base_MspInit+0x38>)
 8000990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_TIM_Base_MspInit+0x38>)
 8000994:	2102      	movs	r1, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_Base_MspInit+0x38>)
 800099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	240c      	movs	r4, #12
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f003 fbae 	bl	800412c <memset>
  if(htim->Instance==TIM3)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_TIM_MspPostInit+0x70>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d122      	bne.n	8000a20 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_TIM_MspPostInit+0x74>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_TIM_MspPostInit+0x74>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_TIM_MspPostInit+0x74>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fea0 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b009      	add	sp, #36	; 0x24
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b091      	sub	sp, #68	; 0x44
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	232c      	movs	r3, #44	; 0x2c
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 fb72 	bl	800412c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	2410      	movs	r4, #16
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	231c      	movs	r3, #28
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f003 fb6a 	bl	800412c <memset>
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_UART_MspInit+0xb8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d13e      	bne.n	8000ae0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2202      	movs	r2, #2
 8000a66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fcfd 	bl	8002470 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff ff0d 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0xbc>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	212c      	movs	r1, #44	; 0x2c
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fe40 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b011      	add	sp, #68	; 0x44
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f89c 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f7ff fff7 	bl	8000b1e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f003 faf1 	bl	800413c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b5a:	f7ff fc47 	bl	80003ec <main>

08000b5e <LoopForever>:

LoopForever:
  b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b6c:	08004280 	.word	0x08004280
  ldr r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b74:	20000170 	.word	0x20000170

08000b78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x3c>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Init+0x3c>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0049      	lsls	r1, r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f810 	bl	8000bbc <HAL_InitTick>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fe7c 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_InitTick+0x88>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d02b      	beq.n	8000c2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0x8c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <HAL_InitTick+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	; 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff fa8d 	bl	8000100 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa88 	bl	8000100 <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fda7 	bl	8001746 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d112      	bne.n	8000c22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80a      	bhi.n	8000c18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fd86 	bl	800171c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_InitTick+0x90>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e00d      	b.n	8000c34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e008      	b.n	8000c34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e003      	b.n	8000c34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b005      	add	sp, #20
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	18d2      	adds	r2, r2, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000016c 	.word	0x2000016c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	2000016c 	.word	0x2000016c

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	0003      	movs	r3, r0
 8000c96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	f7ff ffe0 	bl	8000c74 <HAL_GetTick>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	fffff9ff 	.word	0xfffff9ff

08000cfc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	fe3fffff 	.word	0xfe3fffff

08000d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	23e0      	movs	r3, #224	; 0xe0
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	4013      	ands	r3, r2
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	2104      	movs	r1, #4
 8000d52:	400a      	ands	r2, r1
 8000d54:	2107      	movs	r1, #7
 8000d56:	4091      	lsls	r1, r2
 8000d58:	000a      	movs	r2, r1
 8000d5a:	43d2      	mvns	r2, r2
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2104      	movs	r1, #4
 8000d62:	400b      	ands	r3, r1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4099      	lsls	r1, r3
 8000d68:	000b      	movs	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2104      	movs	r1, #4
 8000d98:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	0013      	movs	r3, r2
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	211f      	movs	r1, #31
 8000dba:	400a      	ands	r2, r1
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	4091      	lsls	r1, r2
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	0e9b      	lsrs	r3, r3, #26
 8000dca:	210f      	movs	r1, #15
 8000dcc:	4019      	ands	r1, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	201f      	movs	r0, #31
 8000dd2:	4003      	ands	r3, r0
 8000dd4:	4099      	lsls	r1, r3
 8000dd6:	000b      	movs	r3, r1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	035b      	lsls	r3, r3, #13
 8000df8:	0b5b      	lsrs	r3, r3, #13
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	0352      	lsls	r2, r2, #13
 8000e1a:	0b52      	lsrs	r2, r2, #13
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	401a      	ands	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	0212      	lsls	r2, r2, #8
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	4904      	ldr	r1, [pc, #16]	; (8000e60 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	431a      	orrs	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	07ffff00 	.word	0x07ffff00

08000e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0552      	lsls	r2, r2, #21
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	6fffffe8 	.word	0x6fffffe8

08000e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	055b      	lsls	r3, r3, #21
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	055b      	lsls	r3, r3, #21
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d101      	bne.n	8000eaa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d101      	bne.n	8000ecc <LL_ADC_IsEnabled+0x18>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_ADC_IsEnabled+0x1a>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	0018      	movs	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d101      	bne.n	8000eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f00:	231f      	movs	r3, #31
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e17f      	b.n	800121e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10a      	bne.n	8000f3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff fce3 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2254      	movs	r2, #84	; 0x54
 8000f38:	2100      	movs	r1, #0
 8000f3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ffa3 	bl	8000e8c <LL_ADC_IsInternalRegulatorEnabled>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d115      	bne.n	8000f76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff ff88 	bl	8000e64 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f54:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <HAL_ADC_Init+0x330>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	49b4      	ldr	r1, [pc, #720]	; (800122c <HAL_ADC_Init+0x334>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff f8d0 	bl	8000100 <__udivsi3>
 8000f60:	0003      	movs	r3, r0
 8000f62:	3301      	adds	r3, #1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff ff86 	bl	8000e8c <LL_ADC_IsInternalRegulatorEnabled>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d10f      	bne.n	8000fa4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f88:	2210      	movs	r2, #16
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	2201      	movs	r2, #1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f9c:	231f      	movs	r3, #31
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff94 	bl	8000ed6 <LL_ADC_REG_IsConversionOngoing>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d000      	beq.n	8000fbe <HAL_ADC_Init+0xc6>
 8000fbc:	e122      	b.n	8001204 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d000      	beq.n	8000fc6 <HAL_ADC_Init+0xce>
 8000fc4:	e11e      	b.n	8001204 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a99      	ldr	r2, [pc, #612]	; (8001230 <HAL_ADC_Init+0x338>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2202      	movs	r2, #2
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ff6a 	bl	8000eb4 <LL_ADC_IsEnabled>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d000      	beq.n	8000fe6 <HAL_ADC_Init+0xee>
 8000fe4:	e0ad      	b.n	8001142 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7e1b      	ldrb	r3, [r3, #24]
 8000fee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000ff0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7e5b      	ldrb	r3, [r3, #25]
 8000ff6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ff8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7e9b      	ldrb	r3, [r3, #26]
 8000ffe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001000:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <HAL_ADC_Init+0x118>
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	e000      	b.n	8001012 <HAL_ADC_Init+0x11a>
 8001010:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001012:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001018:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da04      	bge.n	800102c <HAL_ADC_Init+0x134>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	085b      	lsrs	r3, r3, #1
 800102a:	e001      	b.n	8001030 <HAL_ADC_Init+0x138>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001030:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	212c      	movs	r1, #44	; 0x2c
 8001036:	5c5b      	ldrb	r3, [r3, r1]
 8001038:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800103a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2220      	movs	r2, #32
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e9b      	ldrb	r3, [r3, #26]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	0252      	lsls	r2, r2, #9
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	e00b      	b.n	8001078 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	2220      	movs	r2, #32
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	2201      	movs	r2, #1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00a      	beq.n	8001096 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001084:	23e0      	movs	r3, #224	; 0xe0
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800108e:	4313      	orrs	r3, r2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a65      	ldr	r2, [pc, #404]	; (8001234 <HAL_ADC_Init+0x33c>)
 800109e:	4013      	ands	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	0f9b      	lsrs	r3, r3, #30
 80010b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010b8:	4313      	orrs	r3, r2
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	223c      	movs	r2, #60	; 0x3c
 80010c4:	5c9b      	ldrb	r3, [r3, r2]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d111      	bne.n	80010ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	0f9b      	lsrs	r3, r3, #30
 80010d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80010dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80010e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_ADC_Init+0x340>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	0019      	movs	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	430a      	orrs	r2, r1
 8001102:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	23c0      	movs	r3, #192	; 0xc0
 800110a:	061b      	lsls	r3, r3, #24
 800110c:	429a      	cmp	r2, r3
 800110e:	d018      	beq.n	8001142 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	429a      	cmp	r2, r3
 800111a:	d012      	beq.n	8001142 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	061b      	lsls	r3, r3, #24
 8001124:	429a      	cmp	r2, r3
 8001126:	d00c      	beq.n	8001142 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <HAL_ADC_Init+0x344>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_ADC_Init+0x348>)
 800112e:	4013      	ands	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	23f0      	movs	r3, #240	; 0xf0
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	401a      	ands	r2, r3
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_ADC_Init+0x344>)
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f7ff fdf6 	bl	8000d3e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	493a      	ldr	r1, [pc, #232]	; (8001244 <HAL_ADC_Init+0x34c>)
 800115c:	001a      	movs	r2, r3
 800115e:	f7ff fdee 	bl	8000d3e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2110      	movs	r1, #16
 8001176:	4249      	negs	r1, r1
 8001178:	430a      	orrs	r2, r1
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
 800117c:	e018      	b.n	80011b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	039b      	lsls	r3, r3, #14
 8001186:	429a      	cmp	r2, r3
 8001188:	d112      	bne.n	80011b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	3b01      	subs	r3, #1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	221c      	movs	r2, #28
 800119a:	4013      	ands	r3, r2
 800119c:	2210      	movs	r2, #16
 800119e:	4252      	negs	r2, r2
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0011      	movs	r1, r2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2100      	movs	r1, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff fdde 	bl	8000d78 <LL_ADC_GetSamplingTimeCommonChannels>
 80011bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d10b      	bne.n	80011de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	2203      	movs	r2, #3
 80011d2:	4393      	bics	r3, r2
 80011d4:	2201      	movs	r2, #1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011dc:	e01c      	b.n	8001218 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	2212      	movs	r2, #18
 80011e4:	4393      	bics	r3, r2
 80011e6:	2210      	movs	r2, #16
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2201      	movs	r2, #1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011fa:	231f      	movs	r3, #31
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001202:	e009      	b.n	8001218 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	2210      	movs	r2, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001210:	231f      	movs	r3, #31
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001218:	231f      	movs	r3, #31
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	781b      	ldrb	r3, [r3, #0]
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b008      	add	sp, #32
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	20000000 	.word	0x20000000
 800122c:	00030d40 	.word	0x00030d40
 8001230:	fffffefd 	.word	0xfffffefd
 8001234:	ffde0201 	.word	0xffde0201
 8001238:	1ffffc02 	.word	0x1ffffc02
 800123c:	40012708 	.word	0x40012708
 8001240:	ffc3ffff 	.word	0xffc3ffff
 8001244:	07ffff04 	.word	0x07ffff04

08001248 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001252:	2317      	movs	r3, #23
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2254      	movs	r2, #84	; 0x54
 8001262:	5c9b      	ldrb	r3, [r3, r2]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x24>
 8001268:	2302      	movs	r3, #2
 800126a:	e1c0      	b.n	80015ee <HAL_ADC_ConfigChannel+0x3a6>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2254      	movs	r2, #84	; 0x54
 8001270:	2101      	movs	r1, #1
 8001272:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fe2c 	bl	8000ed6 <LL_ADC_REG_IsConversionOngoing>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d000      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x3c>
 8001282:	e1a3      	b.n	80015cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d100      	bne.n	800128e <HAL_ADC_ConfigChannel+0x46>
 800128c:	e143      	b.n	8001516 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	429a      	cmp	r2, r3
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800129e:	4ac1      	ldr	r2, [pc, #772]	; (80015a4 <HAL_ADC_ConfigChannel+0x35c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d108      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0019      	movs	r1, r3
 80012ae:	0010      	movs	r0, r2
 80012b0:	f7ff fd99 	bl	8000de6 <LL_ADC_REG_SetSequencerChAdd>
 80012b4:	e0c9      	b.n	800144a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	211f      	movs	r1, #31
 80012c0:	400b      	ands	r3, r1
 80012c2:	210f      	movs	r1, #15
 80012c4:	4099      	lsls	r1, r3
 80012c6:	000b      	movs	r3, r1
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4013      	ands	r3, r2
 80012cc:	0019      	movs	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	035b      	lsls	r3, r3, #13
 80012d4:	0b5b      	lsrs	r3, r3, #13
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x9c>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	221f      	movs	r2, #31
 80012e0:	4013      	ands	r3, r2
 80012e2:	e098      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4013      	ands	r3, r2
 80012ec:	d000      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0xa8>
 80012ee:	e091      	b.n	8001414 <HAL_ADC_ConfigChannel+0x1cc>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2202      	movs	r2, #2
 80012f6:	4013      	ands	r3, r2
 80012f8:	d000      	beq.n	80012fc <HAL_ADC_ConfigChannel+0xb4>
 80012fa:	e089      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1c8>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	d000      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xc0>
 8001306:	e081      	b.n	800140c <HAL_ADC_ConfigChannel+0x1c4>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2208      	movs	r2, #8
 800130e:	4013      	ands	r3, r2
 8001310:	d000      	beq.n	8001314 <HAL_ADC_ConfigChannel+0xcc>
 8001312:	e079      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1c0>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2210      	movs	r2, #16
 800131a:	4013      	ands	r3, r2
 800131c:	d000      	beq.n	8001320 <HAL_ADC_ConfigChannel+0xd8>
 800131e:	e071      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1bc>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2220      	movs	r2, #32
 8001326:	4013      	ands	r3, r2
 8001328:	d000      	beq.n	800132c <HAL_ADC_ConfigChannel+0xe4>
 800132a:	e069      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1b8>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2240      	movs	r2, #64	; 0x40
 8001332:	4013      	ands	r3, r2
 8001334:	d000      	beq.n	8001338 <HAL_ADC_ConfigChannel+0xf0>
 8001336:	e061      	b.n	80013fc <HAL_ADC_ConfigChannel+0x1b4>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	4013      	ands	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_ADC_ConfigChannel+0xfc>
 8001342:	e059      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1b0>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d151      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1ac>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d149      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1a8>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4013      	ands	r3, r2
 8001366:	d141      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1a4>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4013      	ands	r3, r2
 8001372:	d139      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1a0>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	4013      	ands	r3, r2
 800137e:	d131      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x19c>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	019b      	lsls	r3, r3, #6
 8001388:	4013      	ands	r3, r2
 800138a:	d129      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x198>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4013      	ands	r3, r2
 8001396:	d121      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x194>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4013      	ands	r3, r2
 80013a2:	d119      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x190>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	4013      	ands	r3, r2
 80013ae:	d111      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x18c>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d109      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x188>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	02db      	lsls	r3, r3, #11
 80013c4:	4013      	ands	r3, r2
 80013c6:	d001      	beq.n	80013cc <HAL_ADC_ConfigChannel+0x184>
 80013c8:	2312      	movs	r3, #18
 80013ca:	e024      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013cc:	2300      	movs	r3, #0
 80013ce:	e022      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013d0:	2311      	movs	r3, #17
 80013d2:	e020      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013d4:	2310      	movs	r3, #16
 80013d6:	e01e      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013d8:	230f      	movs	r3, #15
 80013da:	e01c      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013dc:	230e      	movs	r3, #14
 80013de:	e01a      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013e0:	230d      	movs	r3, #13
 80013e2:	e018      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013e4:	230c      	movs	r3, #12
 80013e6:	e016      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013e8:	230b      	movs	r3, #11
 80013ea:	e014      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013ec:	230a      	movs	r3, #10
 80013ee:	e012      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013f0:	2309      	movs	r3, #9
 80013f2:	e010      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013f4:	2308      	movs	r3, #8
 80013f6:	e00e      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013f8:	2307      	movs	r3, #7
 80013fa:	e00c      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 80013fc:	2306      	movs	r3, #6
 80013fe:	e00a      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 8001400:	2305      	movs	r3, #5
 8001402:	e008      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 8001404:	2304      	movs	r3, #4
 8001406:	e006      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 8001408:	2303      	movs	r3, #3
 800140a:	e004      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	2300      	movs	r3, #0
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6852      	ldr	r2, [r2, #4]
 800141a:	201f      	movs	r0, #31
 800141c:	4002      	ands	r2, r0
 800141e:	4093      	lsls	r3, r2
 8001420:	000a      	movs	r2, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	429a      	cmp	r2, r3
 8001436:	d808      	bhi.n	800144a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	001a      	movs	r2, r3
 8001446:	f7ff fcae 	bl	8000da6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	001a      	movs	r2, r3
 8001458:	f7ff fce8 	bl	8000e2c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db00      	blt.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
 8001464:	e0bc      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff fc5b 	bl	8000d24 <LL_ADC_GetCommonPathInternalCh>
 800146e:	0003      	movs	r3, r0
 8001470:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_ADC_ConfigChannel+0x364>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d122      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001484:	d11d      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0412      	lsls	r2, r2, #16
 800148c:	4313      	orrs	r3, r2
 800148e:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 8001490:	0019      	movs	r1, r3
 8001492:	0010      	movs	r0, r2
 8001494:	f7ff fc32 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <HAL_ADC_ConfigChannel+0x368>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4945      	ldr	r1, [pc, #276]	; (80015b4 <HAL_ADC_ConfigChannel+0x36c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f7fe fe2e 	bl	8000100 <__udivsi3>
 80014a4:	0003      	movs	r3, r0
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	0013      	movs	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	189b      	adds	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014b2:	e002      	b.n	80014ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014c0:	e08e      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_ADC_ConfigChannel+0x370>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10e      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	045b      	lsls	r3, r3, #17
 80014d2:	4013      	ands	r3, r2
 80014d4:	d109      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	0452      	lsls	r2, r2, #17
 80014dc:	4313      	orrs	r3, r2
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 80014e0:	0019      	movs	r1, r3
 80014e2:	0010      	movs	r0, r2
 80014e4:	f7ff fc0a 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
 80014e8:	e07a      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_ADC_ConfigChannel+0x374>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d000      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0x2ae>
 80014f4:	e074      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	03db      	lsls	r3, r3, #15
 80014fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014fe:	d000      	beq.n	8001502 <HAL_ADC_ConfigChannel+0x2ba>
 8001500:	e06e      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	03d2      	lsls	r2, r2, #15
 8001508:	4313      	orrs	r3, r2
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 800150c:	0019      	movs	r1, r3
 800150e:	0010      	movs	r0, r2
 8001510:	f7ff fbf4 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
 8001514:	e064      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	061b      	lsls	r3, r3, #24
 800151e:	429a      	cmp	r2, r3
 8001520:	d004      	beq.n	800152c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_ADC_ConfigChannel+0x35c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d107      	bne.n	800153c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0019      	movs	r1, r3
 8001536:	0010      	movs	r0, r2
 8001538:	f7ff fc66 	bl	8000e08 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	da4d      	bge.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff fbec 	bl	8000d24 <LL_ADC_GetCommonPathInternalCh>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_ADC_ConfigChannel+0x364>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d108      	bne.n	800156c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_ADC_ConfigChannel+0x378>)
 800155e:	4013      	ands	r3, r2
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 8001562:	0019      	movs	r1, r3
 8001564:	0010      	movs	r0, r2
 8001566:	f7ff fbc9 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
 800156a:	e039      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_ADC_ConfigChannel+0x370>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d108      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_ADC_ConfigChannel+0x37c>)
 800157a:	4013      	ands	r3, r2
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 800157e:	0019      	movs	r1, r3
 8001580:	0010      	movs	r0, r2
 8001582:	f7ff fbbb 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
 8001586:	e02b      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_ADC_ConfigChannel+0x374>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d126      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <HAL_ADC_ConfigChannel+0x380>)
 8001596:	4013      	ands	r3, r2
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_ADC_ConfigChannel+0x360>)
 800159a:	0019      	movs	r1, r3
 800159c:	0010      	movs	r0, r2
 800159e:	f7ff fbad 	bl	8000cfc <LL_ADC_SetCommonPathInternalCh>
 80015a2:	e01d      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x398>
 80015a4:	80000004 	.word	0x80000004
 80015a8:	40012708 	.word	0x40012708
 80015ac:	b0001000 	.word	0xb0001000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	00030d40 	.word	0x00030d40
 80015b8:	b8004000 	.word	0xb8004000
 80015bc:	b4002000 	.word	0xb4002000
 80015c0:	ff7fffff 	.word	0xff7fffff
 80015c4:	feffffff 	.word	0xfeffffff
 80015c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	2220      	movs	r2, #32
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015d8:	2317      	movs	r3, #23
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2254      	movs	r2, #84	; 0x54
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80015e8:	2317      	movs	r3, #23
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b006      	add	sp, #24
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b7f      	cmp	r3, #127	; 0x7f
 800160c:	d828      	bhi.n	8001660 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160e:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <__NVIC_SetPriority+0xd4>)
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b25b      	sxtb	r3, r3
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	33c0      	adds	r3, #192	; 0xc0
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	589b      	ldr	r3, [r3, r2]
 800161e:	1dfa      	adds	r2, r7, #7
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	0011      	movs	r1, r2
 8001624:	2203      	movs	r2, #3
 8001626:	400a      	ands	r2, r1
 8001628:	00d2      	lsls	r2, r2, #3
 800162a:	21ff      	movs	r1, #255	; 0xff
 800162c:	4091      	lsls	r1, r2
 800162e:	000a      	movs	r2, r1
 8001630:	43d2      	mvns	r2, r2
 8001632:	401a      	ands	r2, r3
 8001634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	22ff      	movs	r2, #255	; 0xff
 800163c:	401a      	ands	r2, r3
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	2303      	movs	r3, #3
 8001646:	4003      	ands	r3, r0
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <__NVIC_SetPriority+0xd4>)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	430a      	orrs	r2, r1
 8001658:	33c0      	adds	r3, #192	; 0xc0
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800165e:	e031      	b.n	80016c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <__NVIC_SetPriority+0xd8>)
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	0019      	movs	r1, r3
 8001668:	230f      	movs	r3, #15
 800166a:	400b      	ands	r3, r1
 800166c:	3b08      	subs	r3, #8
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3306      	adds	r3, #6
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	3304      	adds	r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1dfa      	adds	r2, r7, #7
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	0011      	movs	r1, r2
 8001680:	2203      	movs	r2, #3
 8001682:	400a      	ands	r2, r1
 8001684:	00d2      	lsls	r2, r2, #3
 8001686:	21ff      	movs	r1, #255	; 0xff
 8001688:	4091      	lsls	r1, r2
 800168a:	000a      	movs	r2, r1
 800168c:	43d2      	mvns	r2, r2
 800168e:	401a      	ands	r2, r3
 8001690:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	401a      	ands	r2, r3
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	0018      	movs	r0, r3
 80016a0:	2303      	movs	r3, #3
 80016a2:	4003      	ands	r3, r0
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <__NVIC_SetPriority+0xd8>)
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	001c      	movs	r4, r3
 80016b0:	230f      	movs	r3, #15
 80016b2:	4023      	ands	r3, r4
 80016b4:	3b08      	subs	r3, #8
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	430a      	orrs	r2, r1
 80016ba:	3306      	adds	r3, #6
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	18c3      	adds	r3, r0, r3
 80016c0:	3304      	adds	r3, #4
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b003      	add	sp, #12
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	045b      	lsls	r3, r3, #17
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d301      	bcc.n	80016ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e8:	2301      	movs	r3, #1
 80016ea:	e010      	b.n	800170e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <SysTick_Config+0x44>)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	3a01      	subs	r2, #1
 80016f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f4:	2301      	movs	r3, #1
 80016f6:	425b      	negs	r3, r3
 80016f8:	2103      	movs	r1, #3
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff ff7c 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x44>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x44>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	210f      	movs	r1, #15
 8001728:	187b      	adds	r3, r7, r1
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	187b      	adds	r3, r7, r1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ffbf 	bl	80016d4 <SysTick_Config>
 8001756:	0003      	movs	r3, r0
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e147      	b.n	8001a00 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4091      	lsls	r1, r2
 800177a:	000a      	movs	r2, r1
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d100      	bne.n	8001788 <HAL_GPIO_Init+0x28>
 8001786:	e138      	b.n	80019fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2203      	movs	r2, #3
 800178e:	4013      	ands	r3, r2
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	409a      	lsls	r2, r3
 80017ae:	0013      	movs	r3, r2
 80017b0:	43da      	mvns	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	0013      	movs	r3, r2
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	2201      	movs	r2, #1
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	4013      	ands	r3, r2
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2203      	movs	r2, #3
 8001844:	4013      	ands	r3, r2
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	58d3      	ldr	r3, [r2, r3]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2207      	movs	r2, #7
 800185c:	4013      	ands	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2107      	movs	r1, #7
 8001876:	400b      	ands	r3, r1
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	6939      	ldr	r1, [r7, #16]
 8001890:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2203      	movs	r2, #3
 80018b0:	401a      	ands	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	029b      	lsls	r3, r3, #10
 80018ce:	4013      	ands	r3, r2
 80018d0:	d100      	bne.n	80018d4 <HAL_GPIO_Init+0x174>
 80018d2:	e092      	b.n	80019fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3318      	adds	r3, #24
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	589b      	ldr	r3, [r3, r2]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2203      	movs	r2, #3
 80018e6:	4013      	ands	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	220f      	movs	r2, #15
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	23a0      	movs	r3, #160	; 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	429a      	cmp	r2, r3
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x1ca>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_GPIO_Init+0x2bc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x1c6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a44      	ldr	r2, [pc, #272]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x1c2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x1be>
 800191a:	2303      	movs	r3, #3
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x1cc>
 800191e:	2305      	movs	r3, #5
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x1cc>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x1cc>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x1cc>
 800192a:	2300      	movs	r3, #0
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	2103      	movs	r1, #3
 8001930:	400a      	ands	r2, r1
 8001932:	00d2      	lsls	r2, r2, #3
 8001934:	4093      	lsls	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800193c:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3318      	adds	r3, #24
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	035b      	lsls	r3, r3, #13
 8001962:	4013      	ands	r3, r2
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	039b      	lsls	r3, r3, #14
 800198c:	4013      	ands	r3, r2
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80019a0:	2384      	movs	r3, #132	; 0x84
 80019a2:	58d3      	ldr	r3, [r2, r3]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c4:	4914      	ldr	r1, [pc, #80]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80019c6:	2284      	movs	r2, #132	; 0x84
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	58d3      	ldr	r3, [r2, r3]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43da      	mvns	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	4013      	ands	r3, r2
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f2:	4909      	ldr	r1, [pc, #36]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	40da      	lsrs	r2, r3
 8001a08:	1e13      	subs	r3, r2, #0
 8001a0a:	d000      	beq.n	8001a0e <HAL_GPIO_Init+0x2ae>
 8001a0c:	e6b0      	b.n	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b006      	add	sp, #24
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	50000400 	.word	0x50000400
 8001a20:	50000800 	.word	0x50000800
 8001a24:	50000c00 	.word	0x50000c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	0008      	movs	r0, r1
 8001a32:	0011      	movs	r1, r2
 8001a34:	1cbb      	adds	r3, r7, #2
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	1c7b      	adds	r3, r7, #1
 8001a3c:	1c0a      	adds	r2, r1, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a40:	1c7b      	adds	r3, r7, #1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a48:	1cbb      	adds	r3, r7, #2
 8001a4a:	881a      	ldrh	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d11f      	bne.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	189b      	adds	r3, r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4912      	ldr	r1, [pc, #72]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7fe fb32 	bl	8000100 <__udivsi3>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa2:	e008      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e001      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e009      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	401a      	ands	r2, r3
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d0ed      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	fffff9ff 	.word	0xfffff9ff
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	000f4240 	.word	0x000f4240

08001ae4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	23e0      	movs	r3, #224	; 0xe0
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	4013      	ands	r3, r2
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e2f3      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1e>
 8001b18:	e07c      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4bc3      	ldr	r3, [pc, #780]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b24:	4bc0      	ldr	r3, [pc, #768]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3e>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4bb9      	ldr	r3, [pc, #740]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d062      	beq.n	8001c12 <HAL_RCC_OscConfig+0x116>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d15e      	bne.n	8001c12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e2ce      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x78>
 8001b64:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e020      	b.n	8001bb6 <HAL_RCC_OscConfig+0xba>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	23a0      	movs	r3, #160	; 0xa0
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0xa2>
 8001b80:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	02c9      	lsls	r1, r1, #11
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4ba5      	ldr	r3, [pc, #660]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0249      	lsls	r1, r1, #9
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0xba>
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	49a1      	ldr	r1, [pc, #644]	; (8001e2c <HAL_RCC_OscConfig+0x330>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	499f      	ldr	r1, [pc, #636]	; (8001e30 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f859 	bl	8000c74 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f854 	bl	8000c74 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e28d      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xcc>
 8001be6:	e015      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff f844 	bl	8000c74 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f83f 	bl	8000c74 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e278      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d100      	bne.n	8001c20 <HAL_RCC_OscConfig+0x124>
 8001c1e:	e099      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2238      	movs	r2, #56	; 0x38
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x144>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d002      	beq.n	8001c46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d135      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x162>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e24b      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a74      	ldr	r2, [pc, #464]	; (8001e34 <HAL_RCC_OscConfig+0x338>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c7a:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c8e:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0adb      	lsrs	r3, r3, #11
 8001c94:	2207      	movs	r2, #7
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a68      	ldr	r2, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x344>)
 8001c9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x348>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7fe ff89 	bl	8000bbc <HAL_InitTick>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d051      	beq.n	8001d52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e221      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d030      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <HAL_RCC_OscConfig+0x33c>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0049      	lsls	r1, r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ffca 	bl	8000c74 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7fe ffc5 	bl	8000c74 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1fe      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	021a      	lsls	r2, r3, #8
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e01b      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	4949      	ldr	r1, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x34c>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe ffa4 	bl	8000c74 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7fe ff9f 	bl	8000c74 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1d8      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x236>
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d047      	beq.n	8001dee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2238      	movs	r2, #56	; 0x38
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b18      	cmp	r3, #24
 8001d68:	d10a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d03c      	beq.n	8001dee <HAL_RCC_OscConfig+0x2f2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d138      	bne.n	8001dee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e1ba      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d019      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff6e 	bl	8000c74 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7fe ff69 	bl	8000c74 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1a2      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0f1      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2a2>
 8001dba:	e018      	b.n	8001dee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff54 	bl	8000c74 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7fe ff4f 	bl	8000c74 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e188      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f1      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2fe>
 8001df8:	e0c6      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2238      	movs	r2, #56	; 0x38
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d11e      	bne.n	8001e4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x31e>
 8001e18:	e0b6      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <HAL_RCC_OscConfig+0x328>
 8001e22:	e0b1      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e166      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	fffeffff 	.word	0xfffeffff
 8001e30:	fffbffff 	.word	0xfffbffff
 8001e34:	ffff80ff 	.word	0xffff80ff
 8001e38:	ffffc7ff 	.word	0xffffc7ff
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004
 8001e48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e4c:	4bac      	ldr	r3, [pc, #688]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	4013      	ands	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x360>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x362>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d011      	beq.n	8001e86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4ba7      	ldr	r3, [pc, #668]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	4ba6      	ldr	r3, [pc, #664]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0549      	lsls	r1, r1, #21
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e70:	4ba3      	ldr	r3, [pc, #652]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e86:	4b9f      	ldr	r3, [pc, #636]	; (8002104 <HAL_RCC_OscConfig+0x608>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e92:	4b9c      	ldr	r3, [pc, #624]	; (8002104 <HAL_RCC_OscConfig+0x608>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b9b      	ldr	r3, [pc, #620]	; (8002104 <HAL_RCC_OscConfig+0x608>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0049      	lsls	r1, r1, #1
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fee8 	bl	8000c74 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe fee3 	bl	8000c74 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e11c      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4b91      	ldr	r3, [pc, #580]	; (8002104 <HAL_RCC_OscConfig+0x608>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x3e2>
 8001ed0:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x404>
 8001ee6:	4b86      	ldr	r3, [pc, #536]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001eec:	2104      	movs	r1, #4
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f04:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f10:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f12:	2104      	movs	r1, #4
 8001f14:	438a      	bics	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d014      	beq.n	8001f4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fea8 	bl	8000c74 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fea3 	bl	8000c74 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a74      	ldr	r2, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x60c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0db      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x42e>
 8001f48:	e013      	b.n	8001f72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fe93 	bl	8000c74 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe8e 	bl	8000c74 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x60c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0c6      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f72:	231f      	movs	r3, #31
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f80:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f82:	4962      	ldr	r1, [pc, #392]	; (800210c <HAL_RCC_OscConfig+0x610>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x496>
 8001f90:	e0b0      	b.n	80020f4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2238      	movs	r2, #56	; 0x38
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d100      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4a4>
 8001f9e:	e078      	b.n	8002092 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d153      	bne.n	8002050 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b55      	ldr	r3, [pc, #340]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001fae:	4958      	ldr	r1, [pc, #352]	; (8002110 <HAL_RCC_OscConfig+0x614>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fe5e 	bl	8000c74 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fe59 	bl	8000c74 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e092      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	049b      	lsls	r3, r3, #18
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b48      	ldr	r3, [pc, #288]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	431a      	orrs	r2, r3
 8002004:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002006:	430a      	orrs	r2, r1
 8002008:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0449      	lsls	r1, r1, #17
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0549      	lsls	r1, r1, #21
 8002022:	430a      	orrs	r2, r1
 8002024:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7fe fe25 	bl	8000c74 <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fe20 	bl	8000c74 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e059      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	049b      	lsls	r3, r3, #18
 800204a:	4013      	ands	r3, r2
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x534>
 800204e:	e051      	b.n	80020f4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002056:	492e      	ldr	r1, [pc, #184]	; (8002110 <HAL_RCC_OscConfig+0x614>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fe0a 	bl	8000c74 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7fe fe05 	bl	8000c74 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e03e      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	049b      	lsls	r3, r3, #18
 8002080:	4013      	ands	r3, r2
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 800208a:	4923      	ldr	r1, [pc, #140]	; (8002118 <HAL_RCC_OscConfig+0x61c>)
 800208c:	400a      	ands	r2, r1
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	e030      	b.n	80020f4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e02b      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x604>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2203      	movs	r2, #3
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d11e      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2270      	movs	r2, #112	; 0x70
 80020b6:	401a      	ands	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d117      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	23fe      	movs	r3, #254	; 0xfe
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	401a      	ands	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d10e      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	23f8      	movs	r3, #248	; 0xf8
 80020d6:	039b      	lsls	r3, r3, #14
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	0f5b      	lsrs	r3, r3, #29
 80020e6:	075a      	lsls	r2, r3, #29
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b008      	add	sp, #32
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	00001388 	.word	0x00001388
 800210c:	efffffff 	.word	0xefffffff
 8002110:	feffffff 	.word	0xfeffffff
 8002114:	1fc1808c 	.word	0x1fc1808c
 8002118:	effefffc 	.word	0xeffefffc

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0e9      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2207      	movs	r2, #7
 8002136:	4013      	ands	r3, r2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d91e      	bls.n	800217c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2207      	movs	r2, #7
 8002144:	4393      	bics	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002150:	f7fe fd90 	bl	8000c74 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002158:	e009      	b.n	800216e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7fe fd8b 	bl	8000c74 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_RCC_ClockConfig+0x1f4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0ca      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2207      	movs	r2, #7
 8002174:	4013      	ands	r3, r2
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2202      	movs	r2, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2204      	movs	r2, #4
 800218c:	4013      	ands	r3, r2
 800218e:	d006      	beq.n	800219e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002190:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b5f      	ldr	r3, [pc, #380]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 8002196:	21e0      	movs	r1, #224	; 0xe0
 8002198:	01c9      	lsls	r1, r1, #7
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_RCC_ClockConfig+0x1fc>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d057      	beq.n	800226c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d12b      	bne.n	8002228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e097      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d107      	bne.n	80021ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021dc:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	049b      	lsls	r3, r3, #18
 80021e4:	4013      	ands	r3, r2
 80021e6:	d11f      	bne.n	8002228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e08b      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4013      	ands	r3, r2
 80021fe:	d113      	bne.n	8002228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e07f      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d106      	bne.n	800221a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220c:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002210:	2202      	movs	r2, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d108      	bne.n	8002228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e074      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221a:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e06d      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002228:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2207      	movs	r2, #7
 800222e:	4393      	bics	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223c:	f7fe fd1a 	bl	8000c74 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002244:	e009      	b.n	800225a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002246:	f7fe fd15 	bl	8000c74 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <HAL_RCC_ClockConfig+0x1f4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e054      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	401a      	ands	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	429a      	cmp	r2, r3
 800226a:	d1ec      	bne.n	8002246 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2207      	movs	r2, #7
 8002272:	4013      	ands	r3, r2
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d21e      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2207      	movs	r2, #7
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800228c:	f7fe fcf2 	bl	8000c74 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002294:	e009      	b.n	80022aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f7fe fced 	bl	8000c74 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_RCC_ClockConfig+0x1f4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e02c      	b.n	8002304 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2207      	movs	r2, #7
 80022b0:	4013      	ands	r3, r2
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1ee      	bne.n	8002296 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2204      	movs	r2, #4
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022c2:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_RCC_ClockConfig+0x200>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022d6:	f000 f829 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022da:	0001      	movs	r1, r0
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	220f      	movs	r2, #15
 80022e4:	401a      	ands	r2, r3
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_RCC_ClockConfig+0x204>)
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	58d3      	ldr	r3, [r2, r3]
 80022ec:	221f      	movs	r2, #31
 80022ee:	4013      	ands	r3, r2
 80022f0:	000a      	movs	r2, r1
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x208>)
 80022f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_ClockConfig+0x20c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7fe fc5d 	bl	8000bbc <HAL_InitTick>
 8002302:	0003      	movs	r3, r0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40022000 	.word	0x40022000
 8002310:	00001388 	.word	0x00001388
 8002314:	40021000 	.word	0x40021000
 8002318:	fffff0ff 	.word	0xfffff0ff
 800231c:	ffff8fff 	.word	0xffff8fff
 8002320:	0800419c 	.word	0x0800419c
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2238      	movs	r2, #56	; 0x38
 8002338:	4013      	ands	r3, r2
 800233a:	d10f      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0adb      	lsrs	r3, r3, #11
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	2201      	movs	r2, #1
 8002348:	409a      	lsls	r2, r3
 800234a:	0013      	movs	r3, r2
 800234c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	4835      	ldr	r0, [pc, #212]	; (8002428 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002352:	f7fd fed5 	bl	8000100 <__udivsi3>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e05d      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2238      	movs	r2, #56	; 0x38
 8002362:	4013      	ands	r3, r2
 8002364:	2b08      	cmp	r3, #8
 8002366:	d102      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCC_GetSysClockFreq+0x100>)
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	e054      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2238      	movs	r2, #56	; 0x38
 8002374:	4013      	ands	r3, r2
 8002376:	2b10      	cmp	r3, #16
 8002378:	d138      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	2207      	movs	r2, #7
 800238c:	4013      	ands	r3, r2
 800238e:	3301      	adds	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	4824      	ldr	r0, [pc, #144]	; (800242c <HAL_RCC_GetSysClockFreq+0x100>)
 800239c:	f7fd feb0 	bl	8000100 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	0019      	movs	r1, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	227f      	movs	r2, #127	; 0x7f
 80023ac:	4013      	ands	r3, r2
 80023ae:	434b      	muls	r3, r1
 80023b0:	617b      	str	r3, [r7, #20]
        break;
 80023b2:	e00d      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	481c      	ldr	r0, [pc, #112]	; (8002428 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023b8:	f7fd fea2 	bl	8000100 <__udivsi3>
 80023bc:	0003      	movs	r3, r0
 80023be:	0019      	movs	r1, r3
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	227f      	movs	r2, #127	; 0x7f
 80023c8:	4013      	ands	r3, r2
 80023ca:	434b      	muls	r3, r1
 80023cc:	617b      	str	r3, [r7, #20]
        break;
 80023ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0f5b      	lsrs	r3, r3, #29
 80023d6:	2207      	movs	r2, #7
 80023d8:	4013      	ands	r3, r2
 80023da:	3301      	adds	r3, #1
 80023dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7fd fe8d 	bl	8000100 <__udivsi3>
 80023e6:	0003      	movs	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e015      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2238      	movs	r2, #56	; 0x38
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d103      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	4013      	ands	r3, r2
 8002408:	2b18      	cmp	r3, #24
 800240a:	d103      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800240c:	23fa      	movs	r3, #250	; 0xfa
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e001      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002418:	693b      	ldr	r3, [r7, #16]
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b006      	add	sp, #24
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40021000 	.word	0x40021000
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_RCC_GetHCLKFreq+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002448:	f7ff fff2 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800244c:	0004      	movs	r4, r0
 800244e:	f7ff fb49 	bl	8001ae4 <LL_RCC_GetAPB1Prescaler>
 8002452:	0003      	movs	r3, r0
 8002454:	0b1a      	lsrs	r2, r3, #12
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	58d3      	ldr	r3, [r2, r3]
 800245c:	221f      	movs	r2, #31
 800245e:	4013      	ands	r3, r2
 8002460:	40dc      	lsrs	r4, r3
 8002462:	0023      	movs	r3, r4
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bdb0      	pop	{r4, r5, r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	080041dc 	.word	0x080041dc

08002470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002478:	2313      	movs	r3, #19
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002480:	2312      	movs	r3, #18
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	4013      	ands	r3, r2
 8002492:	d100      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002494:	e0a3      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2011      	movs	r0, #17
 8002498:	183b      	adds	r3, r7, r0
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b86      	ldr	r3, [pc, #536]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	055b      	lsls	r3, r3, #21
 80024a6:	4013      	ands	r3, r2
 80024a8:	d110      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b83      	ldr	r3, [pc, #524]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0549      	lsls	r1, r1, #21
 80024b4:	430a      	orrs	r2, r1
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b8:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b7a      	ldr	r3, [pc, #488]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	0049      	lsls	r1, r1, #1
 80024d6:	430a      	orrs	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024da:	f7fe fbcb 	bl	8000c74 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e2:	e00b      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe fbc6 	bl	8000c74 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d904      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024f2:	2313      	movs	r3, #19
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2203      	movs	r2, #3
 80024f8:	701a      	strb	r2, [r3, #0]
        break;
 80024fa:	e005      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d0ed      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002508:	2313      	movs	r3, #19
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d154      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002512:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002514:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002516:	23c0      	movs	r3, #192	; 0xc0
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4013      	ands	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d019      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	429a      	cmp	r2, r3
 800252c:	d014      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800252e:	4b62      	ldr	r3, [pc, #392]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002534:	4013      	ands	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002538:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800253a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800253c:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	0249      	lsls	r1, r1, #9
 8002542:	430a      	orrs	r2, r1
 8002544:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002548:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800254a:	4b5b      	ldr	r3, [pc, #364]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800254c:	495d      	ldr	r1, [pc, #372]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800254e:	400a      	ands	r2, r1
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002552:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2201      	movs	r2, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d016      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fb88 	bl	8000c74 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	e00c      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fb83 	bl	8000c74 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a54      	ldr	r2, [pc, #336]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d904      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800257a:	2313      	movs	r3, #19
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	2203      	movs	r2, #3
 8002580:	701a      	strb	r2, [r3, #0]
            break;
 8002582:	e004      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002584:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d0ed      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800258e:	2313      	movs	r3, #19
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002598:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800259e:	4013      	ands	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025a8:	430a      	orrs	r2, r1
 80025aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ac:	e00c      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ae:	2312      	movs	r3, #18
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2213      	movs	r2, #19
 80025b4:	18ba      	adds	r2, r7, r2
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e005      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	2312      	movs	r3, #18
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2213      	movs	r2, #19
 80025c2:	18ba      	adds	r2, r7, r2
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025c8:	2311      	movs	r3, #17
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025d8:	493c      	ldr	r1, [pc, #240]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025da:	400a      	ands	r2, r1
 80025dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2203      	movs	r2, #3
 80025ee:	4393      	bics	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	220c      	movs	r2, #12
 800260c:	4393      	bics	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002616:	430a      	orrs	r2, r1
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2220      	movs	r2, #32
 8002620:	4013      	ands	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002634:	430a      	orrs	r2, r1
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4013      	ands	r3, r2
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	0899      	lsrs	r1, r3, #2
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002652:	430a      	orrs	r2, r1
 8002654:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	429a      	cmp	r2, r3
 8002660:	d106      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0249      	lsls	r1, r1, #9
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4013      	ands	r3, r2
 800267a:	d016      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800268c:	430a      	orrs	r2, r1
 800268e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0249      	lsls	r1, r1, #9
 80026a6:	430a      	orrs	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026aa:	2312      	movs	r3, #18
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b006      	add	sp, #24
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	00001388 	.word	0x00001388
 80026cc:	efffffff 	.word	0xefffffff
 80026d0:	ffffcfff 	.word	0xffffcfff
 80026d4:	ffff3fff 	.word	0xffff3fff

080026d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e04a      	b.n	8002780 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223d      	movs	r2, #61	; 0x3d
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223c      	movs	r2, #60	; 0x3c
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7fe f93b 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	223d      	movs	r2, #61	; 0x3d
 800270a:	2102      	movs	r1, #2
 800270c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	0019      	movs	r1, r3
 8002718:	0010      	movs	r0, r2
 800271a:	f000 fb4f 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2248      	movs	r2, #72	; 0x48
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223e      	movs	r2, #62	; 0x3e
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223f      	movs	r2, #63	; 0x3f
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2241      	movs	r2, #65	; 0x41
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2242      	movs	r2, #66	; 0x42
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2243      	movs	r2, #67	; 0x43
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2244      	movs	r2, #68	; 0x44
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2245      	movs	r2, #69	; 0x45
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2246      	movs	r2, #70	; 0x46
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2247      	movs	r2, #71	; 0x47
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223d      	movs	r2, #61	; 0x3d
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e04a      	b.n	8002830 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223d      	movs	r2, #61	; 0x3d
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223c      	movs	r2, #60	; 0x3c
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f841 	bl	8002838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223d      	movs	r2, #61	; 0x3d
 80027ba:	2102      	movs	r1, #2
 80027bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	0019      	movs	r1, r3
 80027c8:	0010      	movs	r0, r2
 80027ca:	f000 faf7 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2248      	movs	r2, #72	; 0x48
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223e      	movs	r2, #62	; 0x3e
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223f      	movs	r2, #63	; 0x3f
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2240      	movs	r2, #64	; 0x40
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	; 0x41
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2242      	movs	r2, #66	; 0x42
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2243      	movs	r2, #67	; 0x43
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2244      	movs	r2, #68	; 0x44
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2245      	movs	r2, #69	; 0x45
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2246      	movs	r2, #70	; 0x46
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2247      	movs	r2, #71	; 0x47
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223d      	movs	r2, #61	; 0x3d
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <HAL_TIM_PWM_Start+0x22>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	223e      	movs	r2, #62	; 0x3e
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4193      	sbcs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e037      	b.n	80028da <HAL_TIM_PWM_Start+0x92>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d108      	bne.n	8002882 <HAL_TIM_PWM_Start+0x3a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	4193      	sbcs	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e02b      	b.n	80028da <HAL_TIM_PWM_Start+0x92>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d108      	bne.n	800289a <HAL_TIM_PWM_Start+0x52>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	5c9b      	ldrb	r3, [r3, r2]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	4193      	sbcs	r3, r2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	e01f      	b.n	80028da <HAL_TIM_PWM_Start+0x92>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d108      	bne.n	80028b2 <HAL_TIM_PWM_Start+0x6a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2241      	movs	r2, #65	; 0x41
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	4193      	sbcs	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e013      	b.n	80028da <HAL_TIM_PWM_Start+0x92>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d108      	bne.n	80028ca <HAL_TIM_PWM_Start+0x82>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2242      	movs	r2, #66	; 0x42
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	4193      	sbcs	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e007      	b.n	80028da <HAL_TIM_PWM_Start+0x92>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2243      	movs	r2, #67	; 0x43
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	4193      	sbcs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e085      	b.n	80029ee <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_PWM_Start+0xaa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223e      	movs	r2, #62	; 0x3e
 80028ec:	2102      	movs	r1, #2
 80028ee:	5499      	strb	r1, [r3, r2]
 80028f0:	e023      	b.n	800293a <HAL_TIM_PWM_Start+0xf2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d104      	bne.n	8002902 <HAL_TIM_PWM_Start+0xba>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	223f      	movs	r2, #63	; 0x3f
 80028fc:	2102      	movs	r1, #2
 80028fe:	5499      	strb	r1, [r3, r2]
 8002900:	e01b      	b.n	800293a <HAL_TIM_PWM_Start+0xf2>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d104      	bne.n	8002912 <HAL_TIM_PWM_Start+0xca>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	2102      	movs	r1, #2
 800290e:	5499      	strb	r1, [r3, r2]
 8002910:	e013      	b.n	800293a <HAL_TIM_PWM_Start+0xf2>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Start+0xda>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2241      	movs	r2, #65	; 0x41
 800291c:	2102      	movs	r1, #2
 800291e:	5499      	strb	r1, [r3, r2]
 8002920:	e00b      	b.n	800293a <HAL_TIM_PWM_Start+0xf2>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b10      	cmp	r3, #16
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0xea>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2242      	movs	r2, #66	; 0x42
 800292c:	2102      	movs	r1, #2
 800292e:	5499      	strb	r1, [r3, r2]
 8002930:	e003      	b.n	800293a <HAL_TIM_PWM_Start+0xf2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2243      	movs	r2, #67	; 0x43
 8002936:	2102      	movs	r1, #2
 8002938:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	0018      	movs	r0, r3
 8002944:	f000 fe1e 	bl	8003584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_TIM_PWM_Start+0x1b0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00e      	beq.n	8002970 <HAL_TIM_PWM_Start+0x128>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_TIM_PWM_Start+0x1b4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_TIM_PWM_Start+0x128>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_TIM_PWM_Start+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_TIM_PWM_Start+0x128>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_TIM_PWM_Start+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_TIM_PWM_Start+0x12c>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_TIM_PWM_Start+0x12e>
 8002974:	2300      	movs	r3, #0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0209      	lsls	r1, r1, #8
 8002988:	430a      	orrs	r2, r1
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_TIM_PWM_Start+0x1b0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_PWM_Start+0x162>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_TIM_PWM_Start+0x1c0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_PWM_Start+0x162>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_TIM_PWM_Start+0x1b4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d116      	bne.n	80029d8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_TIM_PWM_Start+0x1c4>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d016      	beq.n	80029ea <HAL_TIM_PWM_Start+0x1a2>
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	025b      	lsls	r3, r3, #9
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d011      	beq.n	80029ea <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	e008      	b.n	80029ea <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e000      	b.n	80029ec <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	00010007 	.word	0x00010007

08002a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1c:	2317      	movs	r3, #23
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	223c      	movs	r2, #60	; 0x3c
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0e5      	b.n	8002bfe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	223c      	movs	r2, #60	; 0x3c
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b14      	cmp	r3, #20
 8002a3e:	d900      	bls.n	8002a42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a40:	e0d1      	b.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 fa34 	bl	8002ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2108      	movs	r1, #8
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2104      	movs	r1, #4
 8002a78:	438a      	bics	r2, r1
 8002a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6999      	ldr	r1, [r3, #24]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	619a      	str	r2, [r3, #24]
      break;
 8002a8e:	e0af      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	0011      	movs	r1, r2
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 fa9d 	bl	8002fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0109      	lsls	r1, r1, #4
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4954      	ldr	r1, [pc, #336]	; (8002c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6999      	ldr	r1, [r3, #24]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	021a      	lsls	r2, r3, #8
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
      break;
 8002ad4:	e08c      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	0011      	movs	r1, r2
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fafe 	bl	80030e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2108      	movs	r1, #8
 8002af0:	430a      	orrs	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2104      	movs	r1, #4
 8002b00:	438a      	bics	r2, r1
 8002b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69d9      	ldr	r1, [r3, #28]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	61da      	str	r2, [r3, #28]
      break;
 8002b16:	e06b      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	0011      	movs	r1, r2
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fb65 	bl	80031f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	0109      	lsls	r1, r1, #4
 8002b34:	430a      	orrs	r2, r1
 8002b36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4932      	ldr	r1, [pc, #200]	; (8002c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69d9      	ldr	r1, [r3, #28]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
      break;
 8002b5c:	e048      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fbac 	bl	80032c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2108      	movs	r1, #8
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2104      	movs	r1, #4
 8002b88:	438a      	bics	r2, r1
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b9e:	e027      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fbeb 	bl	8003384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	0109      	lsls	r1, r1, #4
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4910      	ldr	r1, [pc, #64]	; (8002c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002be4:	e004      	b.n	8002bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002be6:	2317      	movs	r3, #23
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
      break;
 8002bee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	223c      	movs	r2, #60	; 0x3c
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

  return status;
 8002bf8:	2317      	movs	r3, #23
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b006      	add	sp, #24
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	080041fc 	.word	0x080041fc
 8002c0c:	fffffbff 	.word	0xfffffbff

08002c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	223c      	movs	r2, #60	; 0x3c
 8002c26:	5c9b      	ldrb	r3, [r3, r2]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_TIM_ConfigClockSource+0x20>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0bc      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x19a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	223c      	movs	r2, #60	; 0x3c
 8002c34:	2101      	movs	r1, #1
 8002c36:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	223d      	movs	r2, #61	; 0x3d
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a5a      	ldr	r2, [pc, #360]	; (8002db4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	0192      	lsls	r2, r2, #6
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xde>
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	0192      	lsls	r2, r2, #6
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d900      	bls.n	8002c76 <HAL_TIM_ConfigClockSource+0x66>
 8002c74:	e088      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0152      	lsls	r2, r2, #5
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d100      	bne.n	8002c80 <HAL_TIM_ConfigClockSource+0x70>
 8002c7e:	e088      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x182>
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0152      	lsls	r2, r2, #5
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d900      	bls.n	8002c8a <HAL_TIM_ConfigClockSource+0x7a>
 8002c88:	e07e      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002c8a:	2b70      	cmp	r3, #112	; 0x70
 8002c8c:	d018      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0xb0>
 8002c8e:	d900      	bls.n	8002c92 <HAL_TIM_ConfigClockSource+0x82>
 8002c90:	e07a      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002c92:	2b60      	cmp	r3, #96	; 0x60
 8002c94:	d04f      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x126>
 8002c96:	d900      	bls.n	8002c9a <HAL_TIM_ConfigClockSource+0x8a>
 8002c98:	e076      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002c9a:	2b50      	cmp	r3, #80	; 0x50
 8002c9c:	d03b      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x106>
 8002c9e:	d900      	bls.n	8002ca2 <HAL_TIM_ConfigClockSource+0x92>
 8002ca0:	e072      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d057      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x146>
 8002ca6:	d900      	bls.n	8002caa <HAL_TIM_ConfigClockSource+0x9a>
 8002ca8:	e06e      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002caa:	2b30      	cmp	r3, #48	; 0x30
 8002cac:	d063      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x166>
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x166>
 8002cb4:	d868      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d05d      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x166>
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d05b      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x166>
 8002cbe:	e063      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd0:	f000 fc38 	bl	8003544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2277      	movs	r2, #119	; 0x77
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e052      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cfe:	f000 fc21 	bl	8003544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2180      	movs	r1, #128	; 0x80
 8002d0e:	01c9      	lsls	r1, r1, #7
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03e      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	001a      	movs	r2, r3
 8002d24:	f000 fb92 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fbec 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02e      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	001a      	movs	r2, r3
 8002d44:	f000 fbb0 	bl	80034a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fbdc 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01e      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	001a      	movs	r2, r3
 8002d64:	f000 fb72 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 fbcc 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00e      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0019      	movs	r1, r3
 8002d80:	0010      	movs	r0, r2
 8002d82:	f000 fbc3 	bl	800350c <TIM_ITRx_SetConfig>
      break;
 8002d86:	e005      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
      break;
 8002d90:	e000      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	223d      	movs	r2, #61	; 0x3d
 8002d98:	2101      	movs	r1, #1
 8002d9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	223c      	movs	r2, #60	; 0x3c
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

  return status;
 8002da4:	230f      	movs	r3, #15
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	ffceff88 	.word	0xffceff88
 8002db8:	ffff00ff 	.word	0xffff00ff

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a36      	ldr	r2, [pc, #216]	; (8002ea8 <TIM_Base_SetConfig+0xec>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0x20>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a35      	ldr	r2, [pc, #212]	; (8002eac <TIM_Base_SetConfig+0xf0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2270      	movs	r2, #112	; 0x70
 8002de0:	4393      	bics	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <TIM_Base_SetConfig+0xec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <TIM_Base_SetConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <TIM_Base_SetConfig+0xf0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00f      	beq.n	8002e1e <TIM_Base_SetConfig+0x62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2b      	ldr	r2, [pc, #172]	; (8002eb0 <TIM_Base_SetConfig+0xf4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <TIM_Base_SetConfig+0xf8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0x62>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <TIM_Base_SetConfig+0xfc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0x62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <TIM_Base_SetConfig+0x100>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <TIM_Base_SetConfig+0x104>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	4393      	bics	r3, r2
 8002e36:	001a      	movs	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <TIM_Base_SetConfig+0xec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_Base_SetConfig+0xba>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <TIM_Base_SetConfig+0xf8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0xba>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <TIM_Base_SetConfig+0xfc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0xba>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <TIM_Base_SetConfig+0x100>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d103      	bne.n	8002e7e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4393      	bics	r3, r2
 8002e98:	001a      	movs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]
  }
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40002000 	.word	0x40002000
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400
 8002ebc:	40014800 	.word	0x40014800
 8002ec0:	fffffcff 	.word	0xfffffcff

08002ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4393      	bics	r3, r2
 8002edc:	001a      	movs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <TIM_OC1_SetConfig+0xf8>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	4393      	bics	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <TIM_OC1_SetConfig+0xfc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_OC1_SetConfig+0x76>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <TIM_OC1_SetConfig+0x100>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_OC1_SetConfig+0x76>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <TIM_OC1_SetConfig+0x104>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_OC1_SetConfig+0x76>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <TIM_OC1_SetConfig+0x108>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4393      	bics	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4393      	bics	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <TIM_OC1_SetConfig+0xfc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <TIM_OC1_SetConfig+0xb0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <TIM_OC1_SetConfig+0x100>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_OC1_SetConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <TIM_OC1_SetConfig+0x104>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_OC1_SetConfig+0xb0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <TIM_OC1_SetConfig+0x108>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d111      	bne.n	8002f98 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <TIM_OC1_SetConfig+0x10c>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <TIM_OC1_SetConfig+0x110>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b006      	add	sp, #24
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	fffeff8f 	.word	0xfffeff8f
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800
 8002fd0:	fffffeff 	.word	0xfffffeff
 8002fd4:	fffffdff 	.word	0xfffffdff

08002fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	2210      	movs	r2, #16
 8002fee:	4393      	bics	r3, r2
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <TIM_OC2_SetConfig+0xe8>)
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <TIM_OC2_SetConfig+0xec>)
 800300e:	4013      	ands	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2220      	movs	r2, #32
 8003022:	4393      	bics	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <TIM_OC2_SetConfig+0xf0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10d      	bne.n	8003056 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	4393      	bics	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2240      	movs	r2, #64	; 0x40
 8003052:	4393      	bics	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <TIM_OC2_SetConfig+0xf0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00b      	beq.n	8003076 <TIM_OC2_SetConfig+0x9e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <TIM_OC2_SetConfig+0xf4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_OC2_SetConfig+0x9e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <TIM_OC2_SetConfig+0xf8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_OC2_SetConfig+0x9e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <TIM_OC2_SetConfig+0xfc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d113      	bne.n	800309e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <TIM_OC2_SetConfig+0x100>)
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <TIM_OC2_SetConfig+0x104>)
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	621a      	str	r2, [r3, #32]
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b006      	add	sp, #24
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	feff8fff 	.word	0xfeff8fff
 80030c4:	fffffcff 	.word	0xfffffcff
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800
 80030d8:	fffffbff 	.word	0xfffffbff
 80030dc:	fffff7ff 	.word	0xfffff7ff

080030e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a33      	ldr	r2, [pc, #204]	; (80031c4 <TIM_OC3_SetConfig+0xe4>)
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <TIM_OC3_SetConfig+0xe8>)
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2203      	movs	r2, #3
 8003114:	4393      	bics	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_OC3_SetConfig+0xec>)
 8003126:	4013      	ands	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <TIM_OC3_SetConfig+0xf0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10d      	bne.n	800315a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <TIM_OC3_SetConfig+0xf4>)
 8003142:	4013      	ands	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <TIM_OC3_SetConfig+0xf8>)
 8003156:	4013      	ands	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <TIM_OC3_SetConfig+0xf0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00b      	beq.n	800317a <TIM_OC3_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_OC3_SetConfig+0xfc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <TIM_OC3_SetConfig+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <TIM_OC3_SetConfig+0x100>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC3_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <TIM_OC3_SetConfig+0x104>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <TIM_OC3_SetConfig+0x108>)
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <TIM_OC3_SetConfig+0x10c>)
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b006      	add	sp, #24
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	fffffeff 	.word	0xfffffeff
 80031c8:	fffeff8f 	.word	0xfffeff8f
 80031cc:	fffffdff 	.word	0xfffffdff
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	fffff7ff 	.word	0xfffff7ff
 80031d8:	fffffbff 	.word	0xfffffbff
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	ffffefff 	.word	0xffffefff
 80031ec:	ffffdfff 	.word	0xffffdfff

080031f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <TIM_OC4_SetConfig+0xb0>)
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <TIM_OC4_SetConfig+0xb4>)
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <TIM_OC4_SetConfig+0xb8>)
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <TIM_OC4_SetConfig+0xbc>)
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <TIM_OC4_SetConfig+0xc0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_OC4_SetConfig+0x78>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <TIM_OC4_SetConfig+0xc4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_OC4_SetConfig+0x78>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <TIM_OC4_SetConfig+0xc8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_OC4_SetConfig+0x78>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <TIM_OC4_SetConfig+0xcc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d109      	bne.n	800327c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <TIM_OC4_SetConfig+0xd0>)
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b006      	add	sp, #24
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	ffffefff 	.word	0xffffefff
 80032a4:	feff8fff 	.word	0xfeff8fff
 80032a8:	fffffcff 	.word	0xfffffcff
 80032ac:	ffffdfff 	.word	0xffffdfff
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	ffffbfff 	.word	0xffffbfff

080032c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <TIM_OC5_SetConfig+0xa4>)
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a1f      	ldr	r2, [pc, #124]	; (800336c <TIM_OC5_SetConfig+0xa8>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <TIM_OC5_SetConfig+0xac>)
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <TIM_OC5_SetConfig+0xb0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_OC5_SetConfig+0x6e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <TIM_OC5_SetConfig+0xb4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_OC5_SetConfig+0x6e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <TIM_OC5_SetConfig+0xb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC5_SetConfig+0x6e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <TIM_OC5_SetConfig+0xbc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d109      	bne.n	8003346 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <TIM_OC5_SetConfig+0xa4>)
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fffeffff 	.word	0xfffeffff
 800336c:	fffeff8f 	.word	0xfffeff8f
 8003370:	fffdffff 	.word	0xfffdffff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40014000 	.word	0x40014000
 800337c:	40014400 	.word	0x40014400
 8003380:	40014800 	.word	0x40014800

08003384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a24      	ldr	r2, [pc, #144]	; (800342c <TIM_OC6_SetConfig+0xa8>)
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a20      	ldr	r2, [pc, #128]	; (8003430 <TIM_OC6_SetConfig+0xac>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <TIM_OC6_SetConfig+0xb0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	051b      	lsls	r3, r3, #20
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a18      	ldr	r2, [pc, #96]	; (8003438 <TIM_OC6_SetConfig+0xb4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_OC6_SetConfig+0x70>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <TIM_OC6_SetConfig+0xb8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_OC6_SetConfig+0x70>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a16      	ldr	r2, [pc, #88]	; (8003440 <TIM_OC6_SetConfig+0xbc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_OC6_SetConfig+0x70>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <TIM_OC6_SetConfig+0xc0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d109      	bne.n	8003408 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4a14      	ldr	r2, [pc, #80]	; (8003448 <TIM_OC6_SetConfig+0xc4>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b006      	add	sp, #24
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	ffefffff 	.word	0xffefffff
 8003430:	feff8fff 	.word	0xfeff8fff
 8003434:	ffdfffff 	.word	0xffdfffff
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40014400 	.word	0x40014400
 8003444:	40014800 	.word	0x40014800
 8003448:	fffbffff 	.word	0xfffbffff

0800344c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	2201      	movs	r2, #1
 8003464:	4393      	bics	r3, r2
 8003466:	001a      	movs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	22f0      	movs	r2, #240	; 0xf0
 8003476:	4393      	bics	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	220a      	movs	r2, #10
 8003488:	4393      	bics	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	2210      	movs	r2, #16
 80034c0:	4393      	bics	r3, r2
 80034c2:	001a      	movs	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <TIM_TI2_ConfigInputStage+0x60>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	22a0      	movs	r2, #160	; 0xa0
 80034e4:	4393      	bics	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b006      	add	sp, #24
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	ffff0fff 	.word	0xffff0fff

0800350c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <TIM_ITRx_SetConfig+0x34>)
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	2207      	movs	r2, #7
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	ffcfff8f 	.word	0xffcfff8f

08003544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <TIM_ETR_SetConfig+0x3c>)
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	431a      	orrs	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	ffff00ff 	.word	0xffff00ff

08003584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	221f      	movs	r2, #31
 8003594:	4013      	ands	r3, r2
 8003596:	2201      	movs	r2, #1
 8003598:	409a      	lsls	r2, r3
 800359a:	0013      	movs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	43d2      	mvns	r2, r2
 80035a6:	401a      	ands	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	211f      	movs	r1, #31
 80035b4:	400b      	ands	r3, r1
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4099      	lsls	r1, r3
 80035ba:	000b      	movs	r3, r1
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b006      	add	sp, #24
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223c      	movs	r2, #60	; 0x3c
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e04f      	b.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	223c      	movs	r2, #60	; 0x3c
 80035e8:	2101      	movs	r1, #1
 80035ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	223d      	movs	r2, #61	; 0x3d
 80035f0:	2102      	movs	r1, #2
 80035f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2270      	movs	r2, #112	; 0x70
 8003624:	4393      	bics	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10c      	bne.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	4393      	bics	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	223d      	movs	r2, #61	; 0x3d
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	; 0x3c
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40012c00 	.word	0x40012c00
 8003690:	ff0fffff 	.word	0xff0fffff
 8003694:	40000400 	.word	0x40000400
 8003698:	40014000 	.word	0x40014000

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e046      	b.n	800373c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2288      	movs	r2, #136	; 0x88
 80036b2:	589b      	ldr	r3, [r3, r2]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2284      	movs	r2, #132	; 0x84
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fd f9b4 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2288      	movs	r2, #136	; 0x88
 80036cc:	2124      	movs	r1, #36	; 0x24
 80036ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	438a      	bics	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 f9d0 	bl	8003a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f828 	bl	8003748 <UART_SetConfig>
 80036f8:	0003      	movs	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e01c      	b.n	800373c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	490d      	ldr	r1, [pc, #52]	; (8003744 <HAL_UART_Init+0xa8>)
 800370e:	400a      	ands	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	212a      	movs	r1, #42	; 0x2a
 800371e:	438a      	bics	r2, r1
 8003720:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 fa5f 	bl	8003bf8 <UART_CheckIdleState>
 800373a:	0003      	movs	r3, r0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}
 8003744:	ffffb7ff 	.word	0xffffb7ff

08003748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003750:	231a      	movs	r3, #26
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4313      	orrs	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4abc      	ldr	r2, [pc, #752]	; (8003a68 <UART_SetConfig+0x320>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4ab7      	ldr	r2, [pc, #732]	; (8003a6c <UART_SetConfig+0x324>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4aae      	ldr	r2, [pc, #696]	; (8003a70 <UART_SetConfig+0x328>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	220f      	movs	r2, #15
 80037cc:	4393      	bics	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4aa4      	ldr	r2, [pc, #656]	; (8003a74 <UART_SetConfig+0x32c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d127      	bne.n	8003836 <UART_SetConfig+0xee>
 80037e6:	4ba4      	ldr	r3, [pc, #656]	; (8003a78 <UART_SetConfig+0x330>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2203      	movs	r2, #3
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d017      	beq.n	8003822 <UART_SetConfig+0xda>
 80037f2:	d81b      	bhi.n	800382c <UART_SetConfig+0xe4>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d00a      	beq.n	800380e <UART_SetConfig+0xc6>
 80037f8:	d818      	bhi.n	800382c <UART_SetConfig+0xe4>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <UART_SetConfig+0xbc>
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d00a      	beq.n	8003818 <UART_SetConfig+0xd0>
 8003802:	e013      	b.n	800382c <UART_SetConfig+0xe4>
 8003804:	231b      	movs	r3, #27
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e058      	b.n	80038c0 <UART_SetConfig+0x178>
 800380e:	231b      	movs	r3, #27
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2202      	movs	r2, #2
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e053      	b.n	80038c0 <UART_SetConfig+0x178>
 8003818:	231b      	movs	r3, #27
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2204      	movs	r2, #4
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e04e      	b.n	80038c0 <UART_SetConfig+0x178>
 8003822:	231b      	movs	r3, #27
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2208      	movs	r2, #8
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e049      	b.n	80038c0 <UART_SetConfig+0x178>
 800382c:	231b      	movs	r3, #27
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2210      	movs	r2, #16
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e044      	b.n	80038c0 <UART_SetConfig+0x178>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a90      	ldr	r2, [pc, #576]	; (8003a7c <UART_SetConfig+0x334>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d127      	bne.n	8003890 <UART_SetConfig+0x148>
 8003840:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <UART_SetConfig+0x330>)
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	220c      	movs	r2, #12
 8003846:	4013      	ands	r3, r2
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x134>
 800384c:	d81b      	bhi.n	8003886 <UART_SetConfig+0x13e>
 800384e:	2b08      	cmp	r3, #8
 8003850:	d00a      	beq.n	8003868 <UART_SetConfig+0x120>
 8003852:	d818      	bhi.n	8003886 <UART_SetConfig+0x13e>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <UART_SetConfig+0x116>
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00a      	beq.n	8003872 <UART_SetConfig+0x12a>
 800385c:	e013      	b.n	8003886 <UART_SetConfig+0x13e>
 800385e:	231b      	movs	r3, #27
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e02b      	b.n	80038c0 <UART_SetConfig+0x178>
 8003868:	231b      	movs	r3, #27
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2202      	movs	r2, #2
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e026      	b.n	80038c0 <UART_SetConfig+0x178>
 8003872:	231b      	movs	r3, #27
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2204      	movs	r2, #4
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e021      	b.n	80038c0 <UART_SetConfig+0x178>
 800387c:	231b      	movs	r3, #27
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2208      	movs	r2, #8
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	e01c      	b.n	80038c0 <UART_SetConfig+0x178>
 8003886:	231b      	movs	r3, #27
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2210      	movs	r2, #16
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e017      	b.n	80038c0 <UART_SetConfig+0x178>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7a      	ldr	r2, [pc, #488]	; (8003a80 <UART_SetConfig+0x338>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d104      	bne.n	80038a4 <UART_SetConfig+0x15c>
 800389a:	231b      	movs	r3, #27
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e00d      	b.n	80038c0 <UART_SetConfig+0x178>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a76      	ldr	r2, [pc, #472]	; (8003a84 <UART_SetConfig+0x33c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d104      	bne.n	80038b8 <UART_SetConfig+0x170>
 80038ae:	231b      	movs	r3, #27
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e003      	b.n	80038c0 <UART_SetConfig+0x178>
 80038b8:	231b      	movs	r3, #27
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2210      	movs	r2, #16
 80038be:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d000      	beq.n	80038ce <UART_SetConfig+0x186>
 80038cc:	e065      	b.n	800399a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80038ce:	231b      	movs	r3, #27
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d015      	beq.n	8003904 <UART_SetConfig+0x1bc>
 80038d8:	dc18      	bgt.n	800390c <UART_SetConfig+0x1c4>
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00d      	beq.n	80038fa <UART_SetConfig+0x1b2>
 80038de:	dc15      	bgt.n	800390c <UART_SetConfig+0x1c4>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <UART_SetConfig+0x1a2>
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d005      	beq.n	80038f4 <UART_SetConfig+0x1ac>
 80038e8:	e010      	b.n	800390c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ea:	f7fe fdab 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80038ee:	0003      	movs	r3, r0
 80038f0:	617b      	str	r3, [r7, #20]
        break;
 80038f2:	e012      	b.n	800391a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <UART_SetConfig+0x340>)
 80038f6:	617b      	str	r3, [r7, #20]
        break;
 80038f8:	e00f      	b.n	800391a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7fe fd17 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80038fe:	0003      	movs	r3, r0
 8003900:	617b      	str	r3, [r7, #20]
        break;
 8003902:	e00a      	b.n	800391a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	617b      	str	r3, [r7, #20]
        break;
 800390a:	e006      	b.n	800391a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003910:	231a      	movs	r3, #26
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
        break;
 8003918:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d100      	bne.n	8003922 <UART_SetConfig+0x1da>
 8003920:	e08d      	b.n	8003a3e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <UART_SetConfig+0x344>)
 8003928:	0052      	lsls	r2, r2, #1
 800392a:	5ad3      	ldrh	r3, [r2, r3]
 800392c:	0019      	movs	r1, r3
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7fc fbe6 	bl	8000100 <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	005a      	lsls	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	18d2      	adds	r2, r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0019      	movs	r1, r3
 8003946:	0010      	movs	r0, r2
 8003948:	f7fc fbda 	bl	8000100 <__udivsi3>
 800394c:	0003      	movs	r3, r0
 800394e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d91c      	bls.n	8003990 <UART_SetConfig+0x248>
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	025b      	lsls	r3, r3, #9
 800395c:	429a      	cmp	r2, r3
 800395e:	d217      	bcs.n	8003990 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	b29a      	uxth	r2, r3
 8003964:	200e      	movs	r0, #14
 8003966:	183b      	adds	r3, r7, r0
 8003968:	210f      	movs	r1, #15
 800396a:	438a      	bics	r2, r1
 800396c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	2207      	movs	r2, #7
 8003976:	4013      	ands	r3, r2
 8003978:	b299      	uxth	r1, r3
 800397a:	183b      	adds	r3, r7, r0
 800397c:	183a      	adds	r2, r7, r0
 800397e:	8812      	ldrh	r2, [r2, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	183a      	adds	r2, r7, r0
 800398a:	8812      	ldrh	r2, [r2, #0]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	e056      	b.n	8003a3e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003990:	231a      	movs	r3, #26
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e051      	b.n	8003a3e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800399a:	231b      	movs	r3, #27
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d015      	beq.n	80039d0 <UART_SetConfig+0x288>
 80039a4:	dc18      	bgt.n	80039d8 <UART_SetConfig+0x290>
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00d      	beq.n	80039c6 <UART_SetConfig+0x27e>
 80039aa:	dc15      	bgt.n	80039d8 <UART_SetConfig+0x290>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <UART_SetConfig+0x26e>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0x278>
 80039b4:	e010      	b.n	80039d8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7fe fd45 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80039ba:	0003      	movs	r3, r0
 80039bc:	617b      	str	r3, [r7, #20]
        break;
 80039be:	e012      	b.n	80039e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <UART_SetConfig+0x340>)
 80039c2:	617b      	str	r3, [r7, #20]
        break;
 80039c4:	e00f      	b.n	80039e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fcb1 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80039ca:	0003      	movs	r3, r0
 80039cc:	617b      	str	r3, [r7, #20]
        break;
 80039ce:	e00a      	b.n	80039e6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	617b      	str	r3, [r7, #20]
        break;
 80039d6:	e006      	b.n	80039e6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039dc:	231a      	movs	r3, #26
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
        break;
 80039e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d028      	beq.n	8003a3e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f0:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <UART_SetConfig+0x344>)
 80039f2:	0052      	lsls	r2, r2, #1
 80039f4:	5ad3      	ldrh	r3, [r2, r3]
 80039f6:	0019      	movs	r1, r3
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f7fc fb81 	bl	8000100 <__udivsi3>
 80039fe:	0003      	movs	r3, r0
 8003a00:	001a      	movs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	18d2      	adds	r2, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f7fc fb75 	bl	8000100 <__udivsi3>
 8003a16:	0003      	movs	r3, r0
 8003a18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d90a      	bls.n	8003a36 <UART_SetConfig+0x2ee>
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	025b      	lsls	r3, r3, #9
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d205      	bcs.n	8003a36 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	e003      	b.n	8003a3e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003a36:	231a      	movs	r3, #26
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	226a      	movs	r2, #106	; 0x6a
 8003a42:	2101      	movs	r1, #1
 8003a44:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2268      	movs	r2, #104	; 0x68
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a5a:	231a      	movs	r3, #26
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b008      	add	sp, #32
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	cfff69f3 	.word	0xcfff69f3
 8003a6c:	ffffcfff 	.word	0xffffcfff
 8003a70:	11fff4ff 	.word	0x11fff4ff
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40004800 	.word	0x40004800
 8003a84:	40004c00 	.word	0x40004c00
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	08004250 	.word	0x08004250

08003a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <UART_AdvFeatureConfig+0x144>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <UART_AdvFeatureConfig+0x148>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <UART_AdvFeatureConfig+0x14c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <UART_AdvFeatureConfig+0x150>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <UART_AdvFeatureConfig+0x154>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <UART_AdvFeatureConfig+0x158>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <UART_AdvFeatureConfig+0x15c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	035b      	lsls	r3, r3, #13
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10b      	bne.n	8003baa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <UART_AdvFeatureConfig+0x160>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <UART_AdvFeatureConfig+0x164>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	ffff7fff 	.word	0xffff7fff
 8003bd8:	fffdffff 	.word	0xfffdffff
 8003bdc:	fffeffff 	.word	0xfffeffff
 8003be0:	fffbffff 	.word	0xfffbffff
 8003be4:	ffffefff 	.word	0xffffefff
 8003be8:	ffffdfff 	.word	0xffffdfff
 8003bec:	ffefffff 	.word	0xffefffff
 8003bf0:	ff9fffff 	.word	0xff9fffff
 8003bf4:	fff7ffff 	.word	0xfff7ffff

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b092      	sub	sp, #72	; 0x48
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2290      	movs	r2, #144	; 0x90
 8003c04:	2100      	movs	r1, #0
 8003c06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd f834 	bl	8000c74 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2208      	movs	r2, #8
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d12d      	bne.n	8003c7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	0391      	lsls	r1, r2, #14
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4a47      	ldr	r2, [pc, #284]	; (8003d44 <UART_CheckIdleState+0x14c>)
 8003c28:	9200      	str	r2, [sp, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f000 f88e 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d022      	beq.n	8003c7a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3e:	2301      	movs	r3, #1
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2288      	movs	r2, #136	; 0x88
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2284      	movs	r2, #132	; 0x84
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e060      	b.n	8003d3c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2204      	movs	r2, #4
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d146      	bne.n	8003d16 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	03d1      	lsls	r1, r2, #15
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <UART_CheckIdleState+0x14c>)
 8003c92:	9200      	str	r2, [sp, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f000 f859 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d03b      	beq.n	8003d16 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4922      	ldr	r1, [pc, #136]	; (8003d48 <UART_CheckIdleState+0x150>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	438a      	bics	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	228c      	movs	r2, #140	; 0x8c
 8003d06:	2120      	movs	r1, #32
 8003d08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2284      	movs	r2, #132	; 0x84
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e012      	b.n	8003d3c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2288      	movs	r2, #136	; 0x88
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	228c      	movs	r2, #140	; 0x8c
 8003d22:	2120      	movs	r1, #32
 8003d24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2284      	movs	r2, #132	; 0x84
 8003d36:	2100      	movs	r1, #0
 8003d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b010      	add	sp, #64	; 0x40
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	01ffffff 	.word	0x01ffffff
 8003d48:	fffffedf 	.word	0xfffffedf

08003d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	1dfb      	adds	r3, r7, #7
 8003d5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	e051      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d04e      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d64:	f7fc ff86 	bl	8000c74 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e051      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	4013      	ands	r3, r2
 8003d88:	d03b      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d038      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d035      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d111      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2208      	movs	r2, #8
 8003daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f83c 	bl	8003e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2290      	movs	r2, #144	; 0x90
 8003db8:	2108      	movs	r1, #8
 8003dba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2284      	movs	r2, #132	; 0x84
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e02c      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d112      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 f81f 	bl	8003e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2290      	movs	r2, #144	; 0x90
 8003df2:	2120      	movs	r1, #32
 8003df4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2284      	movs	r2, #132	; 0x84
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e00f      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	425a      	negs	r2, r3
 8003e12:	4153      	adcs	r3, r2
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	001a      	movs	r2, r3
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d09e      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b004      	add	sp, #16
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e34:	f3ef 8310 	mrs	r3, PRIMASK
 8003e38:	617b      	str	r3, [r7, #20]
  return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4926      	ldr	r1, [pc, #152]	; (8003ef0 <UART_EndRxTransfer+0xc4>)
 8003e56:	400a      	ands	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	491b      	ldr	r1, [pc, #108]	; (8003ef4 <UART_EndRxTransfer+0xc8>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d118      	bne.n	8003ed2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	2301      	movs	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f383 8810 	msr	PRIMASK, r3
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	228c      	movs	r2, #140	; 0x8c
 8003ed6:	2120      	movs	r1, #32
 8003ed8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b00e      	add	sp, #56	; 0x38
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	fffffedf 	.word	0xfffffedf
 8003ef4:	effffffe 	.word	0xeffffffe

08003ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2284      	movs	r2, #132	; 0x84
 8003f04:	5c9b      	ldrb	r3, [r3, r2]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e027      	b.n	8003f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2284      	movs	r2, #132	; 0x84
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2288      	movs	r2, #136	; 0x88
 8003f1a:	2124      	movs	r1, #36	; 0x24
 8003f1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	438a      	bics	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2288      	movs	r2, #136	; 0x88
 8003f50:	2120      	movs	r1, #32
 8003f52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2284      	movs	r2, #132	; 0x84
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	dfffffff 	.word	0xdfffffff

08003f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2284      	movs	r2, #132	; 0x84
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e02e      	b.n	8003fe2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2284      	movs	r2, #132	; 0x84
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2288      	movs	r2, #136	; 0x88
 8003f90:	2124      	movs	r1, #36	; 0x24
 8003f92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	438a      	bics	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	08d9      	lsrs	r1, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f854 	bl	8004070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2288      	movs	r2, #136	; 0x88
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2284      	movs	r2, #132	; 0x84
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2284      	movs	r2, #132	; 0x84
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e02f      	b.n	8004064 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2284      	movs	r2, #132	; 0x84
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2288      	movs	r2, #136	; 0x88
 8004010:	2124      	movs	r1, #36	; 0x24
 8004012:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004034:	4013      	ands	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 f813 	bl	8004070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2288      	movs	r2, #136	; 0x88
 8004056:	2120      	movs	r1, #32
 8004058:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2284      	movs	r2, #132	; 0x84
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f1ffffff 	.word	0xf1ffffff

08004070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	226a      	movs	r2, #106	; 0x6a
 8004084:	2101      	movs	r1, #1
 8004086:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2268      	movs	r2, #104	; 0x68
 800408c:	2101      	movs	r1, #1
 800408e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004090:	e043      	b.n	800411a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004092:	260f      	movs	r6, #15
 8004094:	19bb      	adds	r3, r7, r6
 8004096:	2208      	movs	r2, #8
 8004098:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800409a:	200e      	movs	r0, #14
 800409c:	183b      	adds	r3, r7, r0
 800409e:	2208      	movs	r2, #8
 80040a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	240d      	movs	r4, #13
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	2107      	movs	r1, #7
 80040b2:	400a      	ands	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	0f5b      	lsrs	r3, r3, #29
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	250c      	movs	r5, #12
 80040c2:	197b      	adds	r3, r7, r5
 80040c4:	2107      	movs	r1, #7
 80040c6:	400a      	ands	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	197a      	adds	r2, r7, r5
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	4914      	ldr	r1, [pc, #80]	; (8004124 <UARTEx_SetNbDataToProcess+0xb4>)
 80040d4:	5c8a      	ldrb	r2, [r1, r2]
 80040d6:	435a      	muls	r2, r3
 80040d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <UARTEx_SetNbDataToProcess+0xb8>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040e2:	0019      	movs	r1, r3
 80040e4:	f7fc f896 	bl	8000214 <__divsi3>
 80040e8:	0003      	movs	r3, r0
 80040ea:	b299      	uxth	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	226a      	movs	r2, #106	; 0x6a
 80040f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040f2:	19bb      	adds	r3, r7, r6
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	193a      	adds	r2, r7, r4
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	490a      	ldr	r1, [pc, #40]	; (8004124 <UARTEx_SetNbDataToProcess+0xb4>)
 80040fc:	5c8a      	ldrb	r2, [r1, r2]
 80040fe:	435a      	muls	r2, r3
 8004100:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004102:	193b      	adds	r3, r7, r4
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UARTEx_SetNbDataToProcess+0xb8>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800410a:	0019      	movs	r1, r3
 800410c:	f7fc f882 	bl	8000214 <__divsi3>
 8004110:	0003      	movs	r3, r0
 8004112:	b299      	uxth	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2268      	movs	r2, #104	; 0x68
 8004118:	5299      	strh	r1, [r3, r2]
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b005      	add	sp, #20
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	08004268 	.word	0x08004268
 8004128:	08004270 	.word	0x08004270

0800412c <memset>:
 800412c:	0003      	movs	r3, r0
 800412e:	1882      	adds	r2, r0, r2
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	7019      	strb	r1, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	2600      	movs	r6, #0
 8004140:	4c0c      	ldr	r4, [pc, #48]	; (8004174 <__libc_init_array+0x38>)
 8004142:	4d0d      	ldr	r5, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	2600      	movs	r6, #0
 800414e:	f000 f819 	bl	8004184 <_init>
 8004152:	4c0a      	ldr	r4, [pc, #40]	; (800417c <__libc_init_array+0x40>)
 8004154:	4d0a      	ldr	r5, [pc, #40]	; (8004180 <__libc_init_array+0x44>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	00b3      	lsls	r3, r6, #2
 8004162:	58eb      	ldr	r3, [r5, r3]
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	00b3      	lsls	r3, r6, #2
 800416c:	58eb      	ldr	r3, [r5, r3]
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	08004278 	.word	0x08004278
 8004178:	08004278 	.word	0x08004278
 800417c:	0800427c 	.word	0x0800427c
 8004180:	08004278 	.word	0x08004278

08004184 <_init>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr

08004190 <_fini>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr
